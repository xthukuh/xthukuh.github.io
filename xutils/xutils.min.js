/*! For license information please see xutils.min.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.xutils=e():t.xutils=e()}(this,(()=>{return t={742:(t,e)=>{"use strict";e.byteLength=function(t){var e=s(t),i=e[0],n=e[1];return 3*(i+n)/4-n},e.toByteArray=function(t){var e,i,r=s(t),a=r[0],p=r[1],c=new o(function(t,e,i){return 3*(e+i)/4-i}(0,a,p)),l=0,u=p>0?a-4:a;for(i=0;i<u;i+=4)e=n[t.charCodeAt(i)]<<18|n[t.charCodeAt(i+1)]<<12|n[t.charCodeAt(i+2)]<<6|n[t.charCodeAt(i+3)],c[l++]=e>>16&255,c[l++]=e>>8&255,c[l++]=255&e;return 2===p&&(e=n[t.charCodeAt(i)]<<2|n[t.charCodeAt(i+1)]>>4,c[l++]=255&e),1===p&&(e=n[t.charCodeAt(i)]<<10|n[t.charCodeAt(i+1)]<<4|n[t.charCodeAt(i+2)]>>2,c[l++]=e>>8&255,c[l++]=255&e),c},e.fromByteArray=function(t){for(var e,n=t.length,o=n%3,r=[],a=16383,s=0,c=n-o;s<c;s+=a)r.push(p(t,s,s+a>c?c:s+a));return 1===o?(e=t[n-1],r.push(i[e>>2]+i[e<<4&63]+"==")):2===o&&(e=(t[n-2]<<8)+t[n-1],r.push(i[e>>10]+i[e>>4&63]+i[e<<2&63]+"=")),r.join("")};for(var i=[],n=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0;a<64;++a)i[a]=r[a],n[r.charCodeAt(a)]=a;function s(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var i=t.indexOf("=");return-1===i&&(i=e),[i,i===e?0:4-i%4]}function p(t,e,n){for(var o,r,a=[],s=e;s<n;s+=3)o=(t[s]<<16&16711680)+(t[s+1]<<8&65280)+(255&t[s+2]),a.push(i[(r=o)>>18&63]+i[r>>12&63]+i[r>>6&63]+i[63&r]);return a.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},764:(t,e,i)=>{"use strict";const n=i(742),o=i(645),r="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=p,e.SlowBuffer=function(t){return+t!=t&&(t=0),p.alloc(+t)},e.INSPECT_MAX_BYTES=50;const a=2147483647;function s(t){if(t>a)throw new RangeError('The value "'+t+'" is invalid for option "size"');const e=new Uint8Array(t);return Object.setPrototypeOf(e,p.prototype),e}function p(t,e,i){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return u(t)}return c(t,e,i)}function c(t,e,i){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!p.isEncoding(e))throw new TypeError("Unknown encoding: "+e);const i=0|h(t,e);let n=s(i);const o=n.write(t,e);return o!==i&&(n=n.slice(0,o)),n}(t,e);if(ArrayBuffer.isView(t))return function(t){if(Z(t,Uint8Array)){const e=new Uint8Array(t);return f(e.buffer,e.byteOffset,e.byteLength)}return d(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(Z(t,ArrayBuffer)||t&&Z(t.buffer,ArrayBuffer))return f(t,e,i);if("undefined"!=typeof SharedArrayBuffer&&(Z(t,SharedArrayBuffer)||t&&Z(t.buffer,SharedArrayBuffer)))return f(t,e,i);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=t.valueOf&&t.valueOf();if(null!=n&&n!==t)return p.from(n,e,i);const o=function(t){if(p.isBuffer(t)){const e=0|m(t.length),i=s(e);return 0===i.length||t.copy(i,0,0,e),i}return void 0!==t.length?"number"!=typeof t.length||J(t.length)?s(0):d(t):"Buffer"===t.type&&Array.isArray(t.data)?d(t.data):void 0}(t);if(o)return o;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return p.from(t[Symbol.toPrimitive]("string"),e,i);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function u(t){return l(t),s(t<0?0:0|m(t))}function d(t){const e=t.length<0?0:0|m(t.length),i=s(e);for(let n=0;n<e;n+=1)i[n]=255&t[n];return i}function f(t,e,i){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(i||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===e&&void 0===i?new Uint8Array(t):void 0===i?new Uint8Array(t,e):new Uint8Array(t,e,i),Object.setPrototypeOf(n,p.prototype),n}function m(t){if(t>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return 0|t}function h(t,e){if(p.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||Z(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);const i=t.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===i)return 0;let o=!1;for(;;)switch(e){case"ascii":case"latin1":case"binary":return i;case"utf8":case"utf-8":return H(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*i;case"hex":return i>>>1;case"base64":return V(t).length;default:if(o)return n?-1:H(t).length;e=(""+e).toLowerCase(),o=!0}}function v(t,e,i){let n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===i||i>this.length)&&(i=this.length),i<=0)return"";if((i>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return P(this,e,i);case"utf8":case"utf-8":return k(this,e,i);case"ascii":return T(this,e,i);case"latin1":case"binary":return A(this,e,i);case"base64":return j(this,e,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return N(this,e,i);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function g(t,e,i){const n=t[e];t[e]=t[i],t[i]=n}function b(t,e,i,n,o){if(0===t.length)return-1;if("string"==typeof i?(n=i,i=0):i>2147483647?i=2147483647:i<-2147483648&&(i=-2147483648),J(i=+i)&&(i=o?0:t.length-1),i<0&&(i=t.length+i),i>=t.length){if(o)return-1;i=t.length-1}else if(i<0){if(!o)return-1;i=0}if("string"==typeof e&&(e=p.from(e,n)),p.isBuffer(e))return 0===e.length?-1:x(t,e,i,n,o);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,i):Uint8Array.prototype.lastIndexOf.call(t,e,i):x(t,[e],i,n,o);throw new TypeError("val must be string, number or Buffer")}function x(t,e,i,n,o){let r,a=1,s=t.length,p=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;a=2,s/=2,p/=2,i/=2}function c(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(o){let n=-1;for(r=i;r<s;r++)if(c(t,r)===c(e,-1===n?0:r-n)){if(-1===n&&(n=r),r-n+1===p)return n*a}else-1!==n&&(r-=r-n),n=-1}else for(i+p>s&&(i=s-p),r=i;r>=0;r--){let i=!0;for(let n=0;n<p;n++)if(c(t,r+n)!==c(e,n)){i=!1;break}if(i)return r}return-1}function y(t,e,i,n){i=Number(i)||0;const o=t.length-i;n?(n=Number(n))>o&&(n=o):n=o;const r=e.length;let a;for(n>r/2&&(n=r/2),a=0;a<n;++a){const n=parseInt(e.substr(2*a,2),16);if(J(n))return a;t[i+a]=n}return a}function _(t,e,i,n){return Y(H(e,t.length-i),t,i,n)}function w(t,e,i,n){return Y(function(t){const e=[];for(let i=0;i<t.length;++i)e.push(255&t.charCodeAt(i));return e}(e),t,i,n)}function O(t,e,i,n){return Y(V(e),t,i,n)}function E(t,e,i,n){return Y(function(t,e){let i,n,o;const r=[];for(let a=0;a<t.length&&!((e-=2)<0);++a)i=t.charCodeAt(a),n=i>>8,o=i%256,r.push(o),r.push(n);return r}(e,t.length-i),t,i,n)}function j(t,e,i){return 0===e&&i===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,i))}function k(t,e,i){i=Math.min(t.length,i);const n=[];let o=e;for(;o<i;){const e=t[o];let r=null,a=e>239?4:e>223?3:e>191?2:1;if(o+a<=i){let i,n,s,p;switch(a){case 1:e<128&&(r=e);break;case 2:i=t[o+1],128==(192&i)&&(p=(31&e)<<6|63&i,p>127&&(r=p));break;case 3:i=t[o+1],n=t[o+2],128==(192&i)&&128==(192&n)&&(p=(15&e)<<12|(63&i)<<6|63&n,p>2047&&(p<55296||p>57343)&&(r=p));break;case 4:i=t[o+1],n=t[o+2],s=t[o+3],128==(192&i)&&128==(192&n)&&128==(192&s)&&(p=(15&e)<<18|(63&i)<<12|(63&n)<<6|63&s,p>65535&&p<1114112&&(r=p))}}null===r?(r=65533,a=1):r>65535&&(r-=65536,n.push(r>>>10&1023|55296),r=56320|1023&r),n.push(r),o+=a}return function(t){const e=t.length;if(e<=I)return String.fromCharCode.apply(String,t);let i="",n=0;for(;n<e;)i+=String.fromCharCode.apply(String,t.slice(n,n+=I));return i}(n)}e.kMaxLength=a,p.TYPED_ARRAY_SUPPORT=function(){try{const t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),p.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(p.prototype,"parent",{enumerable:!0,get:function(){if(p.isBuffer(this))return this.buffer}}),Object.defineProperty(p.prototype,"offset",{enumerable:!0,get:function(){if(p.isBuffer(this))return this.byteOffset}}),p.poolSize=8192,p.from=function(t,e,i){return c(t,e,i)},Object.setPrototypeOf(p.prototype,Uint8Array.prototype),Object.setPrototypeOf(p,Uint8Array),p.alloc=function(t,e,i){return function(t,e,i){return l(t),t<=0?s(t):void 0!==e?"string"==typeof i?s(t).fill(e,i):s(t).fill(e):s(t)}(t,e,i)},p.allocUnsafe=function(t){return u(t)},p.allocUnsafeSlow=function(t){return u(t)},p.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==p.prototype},p.compare=function(t,e){if(Z(t,Uint8Array)&&(t=p.from(t,t.offset,t.byteLength)),Z(e,Uint8Array)&&(e=p.from(e,e.offset,e.byteLength)),!p.isBuffer(t)||!p.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;let i=t.length,n=e.length;for(let o=0,r=Math.min(i,n);o<r;++o)if(t[o]!==e[o]){i=t[o],n=e[o];break}return i<n?-1:n<i?1:0},p.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},p.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return p.alloc(0);let i;if(void 0===e)for(e=0,i=0;i<t.length;++i)e+=t[i].length;const n=p.allocUnsafe(e);let o=0;for(i=0;i<t.length;++i){let e=t[i];if(Z(e,Uint8Array))o+e.length>n.length?(p.isBuffer(e)||(e=p.from(e)),e.copy(n,o)):Uint8Array.prototype.set.call(n,e,o);else{if(!p.isBuffer(e))throw new TypeError('"list" argument must be an Array of Buffers');e.copy(n,o)}o+=e.length}return n},p.byteLength=h,p.prototype._isBuffer=!0,p.prototype.swap16=function(){const t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let e=0;e<t;e+=2)g(this,e,e+1);return this},p.prototype.swap32=function(){const t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},p.prototype.swap64=function(){const t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},p.prototype.toString=function(){const t=this.length;return 0===t?"":0===arguments.length?k(this,0,t):v.apply(this,arguments)},p.prototype.toLocaleString=p.prototype.toString,p.prototype.equals=function(t){if(!p.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===p.compare(this,t)},p.prototype.inspect=function(){let t="";const i=e.INSPECT_MAX_BYTES;return t=this.toString("hex",0,i).replace(/(.{2})/g,"$1 ").trim(),this.length>i&&(t+=" ... "),"<Buffer "+t+">"},r&&(p.prototype[r]=p.prototype.inspect),p.prototype.compare=function(t,e,i,n,o){if(Z(t,Uint8Array)&&(t=p.from(t,t.offset,t.byteLength)),!p.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===i&&(i=t?t.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),e<0||i>t.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&e>=i)return 0;if(n>=o)return-1;if(e>=i)return 1;if(this===t)return 0;let r=(o>>>=0)-(n>>>=0),a=(i>>>=0)-(e>>>=0);const s=Math.min(r,a),c=this.slice(n,o),l=t.slice(e,i);for(let t=0;t<s;++t)if(c[t]!==l[t]){r=c[t],a=l[t];break}return r<a?-1:a<r?1:0},p.prototype.includes=function(t,e,i){return-1!==this.indexOf(t,e,i)},p.prototype.indexOf=function(t,e,i){return b(this,t,e,i,!0)},p.prototype.lastIndexOf=function(t,e,i){return b(this,t,e,i,!1)},p.prototype.write=function(t,e,i,n){if(void 0===e)n="utf8",i=this.length,e=0;else if(void 0===i&&"string"==typeof e)n=e,i=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(i)?(i>>>=0,void 0===n&&(n="utf8")):(n=i,i=void 0)}const o=this.length-e;if((void 0===i||i>o)&&(i=o),t.length>0&&(i<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let r=!1;for(;;)switch(n){case"hex":return y(this,t,e,i);case"utf8":case"utf-8":return _(this,t,e,i);case"ascii":case"latin1":case"binary":return w(this,t,e,i);case"base64":return O(this,t,e,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,t,e,i);default:if(r)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),r=!0}},p.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const I=4096;function T(t,e,i){let n="";i=Math.min(t.length,i);for(let o=e;o<i;++o)n+=String.fromCharCode(127&t[o]);return n}function A(t,e,i){let n="";i=Math.min(t.length,i);for(let o=e;o<i;++o)n+=String.fromCharCode(t[o]);return n}function P(t,e,i){const n=t.length;(!e||e<0)&&(e=0),(!i||i<0||i>n)&&(i=n);let o="";for(let n=e;n<i;++n)o+=W[t[n]];return o}function N(t,e,i){const n=t.slice(e,i);let o="";for(let t=0;t<n.length-1;t+=2)o+=String.fromCharCode(n[t]+256*n[t+1]);return o}function S(t,e,i){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>i)throw new RangeError("Trying to access beyond buffer length")}function M(t,e,i,n,o,r){if(!p.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<r)throw new RangeError('"value" argument is out of bounds');if(i+n>t.length)throw new RangeError("Index out of range")}function B(t,e,i,n,o){F(e,n,o,t,i,7);let r=Number(e&BigInt(4294967295));t[i++]=r,r>>=8,t[i++]=r,r>>=8,t[i++]=r,r>>=8,t[i++]=r;let a=Number(e>>BigInt(32)&BigInt(4294967295));return t[i++]=a,a>>=8,t[i++]=a,a>>=8,t[i++]=a,a>>=8,t[i++]=a,i}function C(t,e,i,n,o){F(e,n,o,t,i,7);let r=Number(e&BigInt(4294967295));t[i+7]=r,r>>=8,t[i+6]=r,r>>=8,t[i+5]=r,r>>=8,t[i+4]=r;let a=Number(e>>BigInt(32)&BigInt(4294967295));return t[i+3]=a,a>>=8,t[i+2]=a,a>>=8,t[i+1]=a,a>>=8,t[i]=a,i+8}function D(t,e,i,n,o,r){if(i+n>t.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("Index out of range")}function z(t,e,i,n,r){return e=+e,i>>>=0,r||D(t,0,i,4),o.write(t,e,i,n,23,4),i+4}function $(t,e,i,n,r){return e=+e,i>>>=0,r||D(t,0,i,8),o.write(t,e,i,n,52,8),i+8}p.prototype.slice=function(t,e){const i=this.length;(t=~~t)<0?(t+=i)<0&&(t=0):t>i&&(t=i),(e=void 0===e?i:~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),e<t&&(e=t);const n=this.subarray(t,e);return Object.setPrototypeOf(n,p.prototype),n},p.prototype.readUintLE=p.prototype.readUIntLE=function(t,e,i){t>>>=0,e>>>=0,i||S(t,e,this.length);let n=this[t],o=1,r=0;for(;++r<e&&(o*=256);)n+=this[t+r]*o;return n},p.prototype.readUintBE=p.prototype.readUIntBE=function(t,e,i){t>>>=0,e>>>=0,i||S(t,e,this.length);let n=this[t+--e],o=1;for(;e>0&&(o*=256);)n+=this[t+--e]*o;return n},p.prototype.readUint8=p.prototype.readUInt8=function(t,e){return t>>>=0,e||S(t,1,this.length),this[t]},p.prototype.readUint16LE=p.prototype.readUInt16LE=function(t,e){return t>>>=0,e||S(t,2,this.length),this[t]|this[t+1]<<8},p.prototype.readUint16BE=p.prototype.readUInt16BE=function(t,e){return t>>>=0,e||S(t,2,this.length),this[t]<<8|this[t+1]},p.prototype.readUint32LE=p.prototype.readUInt32LE=function(t,e){return t>>>=0,e||S(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},p.prototype.readUint32BE=p.prototype.readUInt32BE=function(t,e){return t>>>=0,e||S(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},p.prototype.readBigUInt64LE=X((function(t){q(t>>>=0,"offset");const e=this[t],i=this[t+7];void 0!==e&&void 0!==i||G(t,this.length-8);const n=e+256*this[++t]+65536*this[++t]+this[++t]*2**24,o=this[++t]+256*this[++t]+65536*this[++t]+i*2**24;return BigInt(n)+(BigInt(o)<<BigInt(32))})),p.prototype.readBigUInt64BE=X((function(t){q(t>>>=0,"offset");const e=this[t],i=this[t+7];void 0!==e&&void 0!==i||G(t,this.length-8);const n=e*2**24+65536*this[++t]+256*this[++t]+this[++t],o=this[++t]*2**24+65536*this[++t]+256*this[++t]+i;return(BigInt(n)<<BigInt(32))+BigInt(o)})),p.prototype.readIntLE=function(t,e,i){t>>>=0,e>>>=0,i||S(t,e,this.length);let n=this[t],o=1,r=0;for(;++r<e&&(o*=256);)n+=this[t+r]*o;return o*=128,n>=o&&(n-=Math.pow(2,8*e)),n},p.prototype.readIntBE=function(t,e,i){t>>>=0,e>>>=0,i||S(t,e,this.length);let n=e,o=1,r=this[t+--n];for(;n>0&&(o*=256);)r+=this[t+--n]*o;return o*=128,r>=o&&(r-=Math.pow(2,8*e)),r},p.prototype.readInt8=function(t,e){return t>>>=0,e||S(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},p.prototype.readInt16LE=function(t,e){t>>>=0,e||S(t,2,this.length);const i=this[t]|this[t+1]<<8;return 32768&i?4294901760|i:i},p.prototype.readInt16BE=function(t,e){t>>>=0,e||S(t,2,this.length);const i=this[t+1]|this[t]<<8;return 32768&i?4294901760|i:i},p.prototype.readInt32LE=function(t,e){return t>>>=0,e||S(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},p.prototype.readInt32BE=function(t,e){return t>>>=0,e||S(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},p.prototype.readBigInt64LE=X((function(t){q(t>>>=0,"offset");const e=this[t],i=this[t+7];void 0!==e&&void 0!==i||G(t,this.length-8);const n=this[t+4]+256*this[t+5]+65536*this[t+6]+(i<<24);return(BigInt(n)<<BigInt(32))+BigInt(e+256*this[++t]+65536*this[++t]+this[++t]*2**24)})),p.prototype.readBigInt64BE=X((function(t){q(t>>>=0,"offset");const e=this[t],i=this[t+7];void 0!==e&&void 0!==i||G(t,this.length-8);const n=(e<<24)+65536*this[++t]+256*this[++t]+this[++t];return(BigInt(n)<<BigInt(32))+BigInt(this[++t]*2**24+65536*this[++t]+256*this[++t]+i)})),p.prototype.readFloatLE=function(t,e){return t>>>=0,e||S(t,4,this.length),o.read(this,t,!0,23,4)},p.prototype.readFloatBE=function(t,e){return t>>>=0,e||S(t,4,this.length),o.read(this,t,!1,23,4)},p.prototype.readDoubleLE=function(t,e){return t>>>=0,e||S(t,8,this.length),o.read(this,t,!0,52,8)},p.prototype.readDoubleBE=function(t,e){return t>>>=0,e||S(t,8,this.length),o.read(this,t,!1,52,8)},p.prototype.writeUintLE=p.prototype.writeUIntLE=function(t,e,i,n){t=+t,e>>>=0,i>>>=0,n||M(this,t,e,i,Math.pow(2,8*i)-1,0);let o=1,r=0;for(this[e]=255&t;++r<i&&(o*=256);)this[e+r]=t/o&255;return e+i},p.prototype.writeUintBE=p.prototype.writeUIntBE=function(t,e,i,n){t=+t,e>>>=0,i>>>=0,n||M(this,t,e,i,Math.pow(2,8*i)-1,0);let o=i-1,r=1;for(this[e+o]=255&t;--o>=0&&(r*=256);)this[e+o]=t/r&255;return e+i},p.prototype.writeUint8=p.prototype.writeUInt8=function(t,e,i){return t=+t,e>>>=0,i||M(this,t,e,1,255,0),this[e]=255&t,e+1},p.prototype.writeUint16LE=p.prototype.writeUInt16LE=function(t,e,i){return t=+t,e>>>=0,i||M(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},p.prototype.writeUint16BE=p.prototype.writeUInt16BE=function(t,e,i){return t=+t,e>>>=0,i||M(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},p.prototype.writeUint32LE=p.prototype.writeUInt32LE=function(t,e,i){return t=+t,e>>>=0,i||M(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},p.prototype.writeUint32BE=p.prototype.writeUInt32BE=function(t,e,i){return t=+t,e>>>=0,i||M(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},p.prototype.writeBigUInt64LE=X((function(t,e=0){return B(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),p.prototype.writeBigUInt64BE=X((function(t,e=0){return C(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),p.prototype.writeIntLE=function(t,e,i,n){if(t=+t,e>>>=0,!n){const n=Math.pow(2,8*i-1);M(this,t,e,i,n-1,-n)}let o=0,r=1,a=0;for(this[e]=255&t;++o<i&&(r*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/r>>0)-a&255;return e+i},p.prototype.writeIntBE=function(t,e,i,n){if(t=+t,e>>>=0,!n){const n=Math.pow(2,8*i-1);M(this,t,e,i,n-1,-n)}let o=i-1,r=1,a=0;for(this[e+o]=255&t;--o>=0&&(r*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/r>>0)-a&255;return e+i},p.prototype.writeInt8=function(t,e,i){return t=+t,e>>>=0,i||M(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},p.prototype.writeInt16LE=function(t,e,i){return t=+t,e>>>=0,i||M(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},p.prototype.writeInt16BE=function(t,e,i){return t=+t,e>>>=0,i||M(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},p.prototype.writeInt32LE=function(t,e,i){return t=+t,e>>>=0,i||M(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},p.prototype.writeInt32BE=function(t,e,i){return t=+t,e>>>=0,i||M(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},p.prototype.writeBigInt64LE=X((function(t,e=0){return B(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),p.prototype.writeBigInt64BE=X((function(t,e=0){return C(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),p.prototype.writeFloatLE=function(t,e,i){return z(this,t,e,!0,i)},p.prototype.writeFloatBE=function(t,e,i){return z(this,t,e,!1,i)},p.prototype.writeDoubleLE=function(t,e,i){return $(this,t,e,!0,i)},p.prototype.writeDoubleBE=function(t,e,i){return $(this,t,e,!1,i)},p.prototype.copy=function(t,e,i,n){if(!p.isBuffer(t))throw new TypeError("argument should be a Buffer");if(i||(i=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<i&&(n=i),n===i)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(i<0||i>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-i&&(n=t.length-e+i);const o=n-i;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,i,n):Uint8Array.prototype.set.call(t,this.subarray(i,n),e),o},p.prototype.fill=function(t,e,i,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,i=this.length):"string"==typeof i&&(n=i,i=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!p.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===t.length){const e=t.charCodeAt(0);("utf8"===n&&e<128||"latin1"===n)&&(t=e)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<i)throw new RangeError("Out of range index");if(i<=e)return this;let o;if(e>>>=0,i=void 0===i?this.length:i>>>0,t||(t=0),"number"==typeof t)for(o=e;o<i;++o)this[o]=t;else{const r=p.isBuffer(t)?t:p.from(t,n),a=r.length;if(0===a)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(o=0;o<i-e;++o)this[o+e]=r[o%a]}return this};const L={};function U(t,e,i){L[t]=class extends i{constructor(){super(),Object.defineProperty(this,"message",{value:e.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${t}]`,this.stack,delete this.name}get code(){return t}set code(t){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:t,writable:!0})}toString(){return`${this.name} [${t}]: ${this.message}`}}}function R(t){let e="",i=t.length;const n="-"===t[0]?1:0;for(;i>=n+4;i-=3)e=`_${t.slice(i-3,i)}${e}`;return`${t.slice(0,i)}${e}`}function F(t,e,i,n,o,r){if(t>i||t<e){const n="bigint"==typeof e?"n":"";let o;throw o=r>3?0===e||e===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(r+1)}${n}`:`>= -(2${n} ** ${8*(r+1)-1}${n}) and < 2 ** ${8*(r+1)-1}${n}`:`>= ${e}${n} and <= ${i}${n}`,new L.ERR_OUT_OF_RANGE("value",o,t)}!function(t,e,i){q(e,"offset"),void 0!==t[e]&&void 0!==t[e+i]||G(e,t.length-(i+1))}(n,o,r)}function q(t,e){if("number"!=typeof t)throw new L.ERR_INVALID_ARG_TYPE(e,"number",t)}function G(t,e,i){if(Math.floor(t)!==t)throw q(t,i),new L.ERR_OUT_OF_RANGE(i||"offset","an integer",t);if(e<0)throw new L.ERR_BUFFER_OUT_OF_BOUNDS;throw new L.ERR_OUT_OF_RANGE(i||"offset",`>= ${i?1:0} and <= ${e}`,t)}U("ERR_BUFFER_OUT_OF_BOUNDS",(function(t){return t?`${t} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),U("ERR_INVALID_ARG_TYPE",(function(t,e){return`The "${t}" argument must be of type number. Received type ${typeof e}`}),TypeError),U("ERR_OUT_OF_RANGE",(function(t,e,i){let n=`The value of "${t}" is out of range.`,o=i;return Number.isInteger(i)&&Math.abs(i)>2**32?o=R(String(i)):"bigint"==typeof i&&(o=String(i),(i>BigInt(2)**BigInt(32)||i<-(BigInt(2)**BigInt(32)))&&(o=R(o)),o+="n"),n+=` It must be ${e}. Received ${o}`,n}),RangeError);const Q=/[^+/0-9A-Za-z-_]/g;function H(t,e){let i;e=e||1/0;const n=t.length;let o=null;const r=[];for(let a=0;a<n;++a){if(i=t.charCodeAt(a),i>55295&&i<57344){if(!o){if(i>56319){(e-=3)>-1&&r.push(239,191,189);continue}if(a+1===n){(e-=3)>-1&&r.push(239,191,189);continue}o=i;continue}if(i<56320){(e-=3)>-1&&r.push(239,191,189),o=i;continue}i=65536+(o-55296<<10|i-56320)}else o&&(e-=3)>-1&&r.push(239,191,189);if(o=null,i<128){if((e-=1)<0)break;r.push(i)}else if(i<2048){if((e-=2)<0)break;r.push(i>>6|192,63&i|128)}else if(i<65536){if((e-=3)<0)break;r.push(i>>12|224,i>>6&63|128,63&i|128)}else{if(!(i<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;r.push(i>>18|240,i>>12&63|128,i>>6&63|128,63&i|128)}}return r}function V(t){return n.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(Q,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function Y(t,e,i,n){let o;for(o=0;o<n&&!(o+i>=e.length||o>=t.length);++o)e[o+i]=t[o];return o}function Z(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function J(t){return t!=t}const W=function(){const t="0123456789abcdef",e=new Array(256);for(let i=0;i<16;++i){const n=16*i;for(let o=0;o<16;++o)e[n+o]=t[i]+t[o]}return e}();function X(t){return"undefined"==typeof BigInt?K:t}function K(){throw new Error("BigInt not supported")}},645:(t,e)=>{e.read=function(t,e,i,n,o){var r,a,s=8*o-n-1,p=(1<<s)-1,c=p>>1,l=-7,u=i?o-1:0,d=i?-1:1,f=t[e+u];for(u+=d,r=f&(1<<-l)-1,f>>=-l,l+=s;l>0;r=256*r+t[e+u],u+=d,l-=8);for(a=r&(1<<-l)-1,r>>=-l,l+=n;l>0;a=256*a+t[e+u],u+=d,l-=8);if(0===r)r=1-c;else{if(r===p)return a?NaN:1/0*(f?-1:1);a+=Math.pow(2,n),r-=c}return(f?-1:1)*a*Math.pow(2,r-n)},e.write=function(t,e,i,n,o,r){var a,s,p,c=8*r-o-1,l=(1<<c)-1,u=l>>1,d=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,f=n?0:r-1,m=n?1:-1,h=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,a=l):(a=Math.floor(Math.log(e)/Math.LN2),e*(p=Math.pow(2,-a))<1&&(a--,p*=2),(e+=a+u>=1?d/p:d*Math.pow(2,1-u))*p>=2&&(a++,p/=2),a+u>=l?(s=0,a=l):a+u>=1?(s=(e*p-1)*Math.pow(2,o),a+=u):(s=e*Math.pow(2,u-1)*Math.pow(2,o),a=0));o>=8;t[i+f]=255&s,f+=m,s/=256,o-=8);for(a=a<<o|s,c+=o;c>0;t[i+f]=255&a,f+=m,a/=256,c-=8);t[i+f-m]|=128*h}},499:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e._base64Decode=e._base64Encode=e._isBuffer=e.Buffer=void 0;const n=i(764);e.Buffer=n.Buffer,e._isBuffer=t=>e.Buffer.isBuffer(t),e._base64Encode=(t,i)=>e.Buffer.from(t,i).toString("base64"),e._base64Decode=t=>e.Buffer.from(t,"base64")},599:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var o=Object.getOwnPropertyDescriptor(e,i);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,o)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(499),e)},830:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e._animate=e.DEFAULT_DURATION=e.DEFAULT_EASING=void 0;const n=i(377),o=i(539),r=i(892);e.DEFAULT_EASING=o.Easings.easeLinear,e.DEFAULT_DURATION=1e3,e._animate=function(t,i=!1){var a,s,p;let{update:c,before:l,after:u,easing:d=e.DEFAULT_EASING,duration:f=1e3,delay:m,delayed:h=!1,from:v,to:g,timeout:b,manual:x=!1}=t;const y=this,_="object"==typeof y&&y?y:null,w=(0,n._isFunc)(c)?c:void 0,O=(0,n._isFunc)(l)?l:void 0,E=(0,n._isFunc)(u)?u:void 0;if(!w){let e="The update callback is not defined in `_animate` options!";throw console.error(e,t),new Error(e)}const j=("string"==typeof d&&o.Easings.hasOwnProperty(d)&&(d=o.Easings[d]),"function"==typeof d?d:e.DEFAULT_EASING),k=null!==(a=(0,n._posInt)(f,0))&&void 0!==a?a:e.DEFAULT_DURATION,I=null!==(s=(0,n._posInt)(m,0))&&void 0!==s?s:0,T=Boolean(h),A=Boolean(x),P=null!==(p=(0,n._posInt)(b,0))&&void 0!==p?p:0,N=(0,n._num)(v,0),S=(0,n._num)(g,0),M=S-N;let B,C,D,z,$,L,U=0,R=0,F=0,q=0,G=0,Q=-1,H=Date.now();const V=()=>{L&&clearTimeout(L),B&&(0,r.cancelAnimationFrame)(B),B=L=C=D=z=$=void 0,U=R=q=F=G=0,Q=-1,H=(new Date).getTime()},Y=t=>{L&&clearTimeout(L),F&&(R+=t-F,F=0);let e,i=R,n=Math.max(Date.now()-H,G+q),o=!1,r=!o;if(D&&D<0)switch(o=!0,D){case-1:e="update";break;case-2:e="begin";break;case-4:e="timeout";break;default:e="abort"}E&&E.call(_,{aborted:o,abort_method:e,complete:r,pause_duration:i,total_duration:n}),B=void 0},Z=e=>(void 0===C&&(e=>{P&&(L=setTimeout((()=>D=-4),P)),O&&!1===O.call(_,{timestamp:e,options:t,then:H})&&(D=-2)})(e),C||(C=e),G=e-C+q,D?Y(e):z?(B=void 0,q=G,F=e,C=0,void(G=0)):(F&&(R+=e-F,F=0),(!U||U-+G.toFixed(2)<=.1)&&(!G&&T||(t=>{if(t===$||D)return;$=t,Q+=1;let e=k?j.call(_,t,0,1,k):0,i=0;M&&(i=Math.min(e*Math.abs(M),Math.abs(M)),i=N+i*(M<0?-1:1));let n=w.call(_,{index:Q,delta:e,pos:i,time:t});t>=k?D=1:!1===n&&(D=-1)})(Math.min(+G.toFixed(1),U||k)),U+=I),!D&&G>=k&&(D=1),D?Y(e):void(B=(0,r.requestAnimationFrame)(Z)))),J=(t=!1)=>(i&&console.debug(`[_animate] ${z?"resume":"play"}.`,{restart:t,is_paused:z,is_done:D,duration:k,from:N,to:S,diff:M,easing:j}),t&&V(),!D&&(z=void 0,B&&(0,r.cancelAnimationFrame)(B),B=(0,r.requestAnimationFrame)(Z),!0)),W=(t=!0)=>(t=null===t?!z:Boolean(t),i&&console.debug(`[_animate] ${t?"pause":"unpause"}.`,{toggle:t,is_paused:z,is_done:D}),!D&&(t===z?z:t?z=t:J()));return A||J(),{get _debug(){return i},get begun(){return void 0!==C},get paused(){return Boolean(z)},get done(){return Boolean(D)},play:J,pause:W,resume:()=>!!z&&W(!1),restart:()=>J(!0),cancel:()=>(V(),i&&console.debug("[_animate] cancelled."),!D),abort:()=>!D&&(D=-3,!0)}}},892:(t,e)=>{"use strict";var i;Object.defineProperty(e,"__esModule",{value:!0}),e.cancelAnimationFrame=e.requestAnimationFrame=void 0,i=(()=>{let t,e,i,n;if("undefined"!=typeof window){const i=["ms","moz","webkit","o"];t=window.requestAnimationFrame,e=window.cancelAnimationFrame;for(let n=0;n<i.length&&!t;n++){const o=i[n];t=window[`${o}RequestAnimationFrame`],e=window[`${o}CancelAnimationFrame`]||window[`${o}CancelRequestAnimationFrame`]}}if(t)i=t;else{let t=0;i=function(e){let i=(new Date).getTime(),n=Math.max(0,16-(i-t)),o=i+n,r=setTimeout((()=>"function"==typeof e?e(o):null),n);return t=o,r}}return n=e||function(t){clearTimeout(t)},"undefined"!=typeof window&&(window.requestAnimationFrame||(window.requestAnimationFrame=i),window.cancelAnimationFrame||(window.cancelAnimationFrame=n)),[i,n]})(),e.requestAnimationFrame=i[0],e.cancelAnimationFrame=i[1]},269:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.easeInBack=e.easeInOutElastic=e.easeOutElastic=e.easeInElastic=e.easeInOutQuint=e.easeOutQuint=e.easeInQuint=e.easeInOutQuart=e.easeOutQuart=e.easeInQuart=e.easeInOutCubic=e.easeOutCubic=e.easeInCubic=e.easeInOutCirc=e.easeOutCirc=e.easeInCirc=e.easeInOutExpo=e.easeOutExpo=e.easeInExpo=e.easeInOutSine=e.easeOutSine=e.easeInSine=e.easeInOutQuad=e.easeOutQuad=e.easeInQuad=e.easeLinear=void 0,e.easeLinear=(t,e,i,n)=>i*t/n+e,e.easeInQuad=(t,e,i,n)=>i*(t/=n)*t+e,e.easeOutQuad=(t,e,i,n)=>-i*(t/=n)*(t-2)+e,e.easeInOutQuad=(t,e,i,n)=>(t/=n/2)<1?i/2*t*t+e:-i/2*(--t*(t-2)-1)+e,e.easeInSine=(t,e,i,n)=>-i*Math.cos(t/n*(Math.PI/2))+i+e,e.easeOutSine=(t,e,i,n)=>i*Math.sin(t/n*(Math.PI/2))+e,e.easeInOutSine=(t,e,i,n)=>-i/2*(Math.cos(Math.PI*t/n)-1)+e,e.easeInExpo=(t,e,i,n)=>0===t?e:i*Math.pow(2,10*(t/n-1))+e,e.easeOutExpo=(t,e,i,n)=>t===n?e+i:i*(1-Math.pow(2,-10*t/n))+e,e.easeInOutExpo=(t,e,i,n)=>0===t?e:t===n?e+i:(t/=n/2)<1?i/2*Math.pow(2,10*(t-1))+e:i/2*(2-Math.pow(2,-10*--t))+e,e.easeInCirc=(t,e,i,n)=>-i*(Math.sqrt(1-(t/=n)*t)-1)+e,e.easeOutCirc=(t,e,i,n)=>i*Math.sqrt(1-(t=t/n-1)*t)+e,e.easeInOutCirc=(t,e,i,n)=>(t/=n/2)<1?-i/2*(Math.sqrt(1-t*t)-1)+e:i/2*(Math.sqrt(1-(t-=2)*t)+1)+e,e.easeInCubic=(t,e,i,n)=>i*(t/=n)*t*t+e,e.easeOutCubic=(t,e,i,n)=>i*((t=t/n-1)*t*t+1)+e,e.easeInOutCubic=(t,e,i,n)=>(t/=n/2)<1?i/2*t*t*t+e:i/2*((t-=2)*t*t+2)+e,e.easeInQuart=(t,e,i,n)=>i*(t/=n)*t*t*t+e,e.easeOutQuart=(t,e,i,n)=>-i*((t=t/n-1)*t*t*t-1)+e,e.easeInOutQuart=(t,e,i,n)=>(t/=n/2)<1?i/2*t*t*t*t+e:-i/2*((t-=2)*t*t*t-2)+e,e.easeInQuint=(t,e,i,n)=>i*(t/=n)*t*t*t*t+e,e.easeOutQuint=(t,e,i,n)=>i*((t=t/n-1)*t*t*t*t+1)+e,e.easeInOutQuint=(t,e,i,n)=>(t/=n/2)<1?i/2*t*t*t*t*t+e:i/2*((t-=2)*t*t*t*t+2)+e,e.easeInElastic=(t,e,i,n)=>{let o=1.70158,r=0,a=i;return 0===t?e:1==(t/=n)?e+i:(r||(r=.3*n),a<Math.abs(i)?(a=i,o=r/4):o=r/(2*Math.PI)*Math.asin(i/a),-a*Math.pow(2,10*(t-=1))*Math.sin((t*n-o)*(2*Math.PI)/r)+e)},e.easeOutElastic=(t,e,i,n)=>{let o=1.70158,r=0,a=i;return 0===t?e:1==(t/=n)?e+i:(r||(r=.3*n),a<Math.abs(i)?(a=i,o=r/4):o=r/(2*Math.PI)*Math.asin(i/a),a*Math.pow(2,-10*t)*Math.sin((t*n-o)*(2*Math.PI)/r)+i+e)},e.easeInOutElastic=(t,e,i,n)=>{let o=1.70158,r=0,a=i;return 0===t?e:2==(t/=n/2)?e+i:(r||(r=n*(.3*1.5)),a<Math.abs(i)?(a=i,o=r/4):o=r/(2*Math.PI)*Math.asin(i/a),t<1?a*Math.pow(2,10*(t-=1))*Math.sin((t*n-o)*(2*Math.PI)/r)*-.5+e:a*Math.pow(2,-10*(t-=1))*Math.sin((t*n-o)*(2*Math.PI)/r)*.5+i+e)},e.easeInBack=(t,e,i,n)=>{let o;return void 0===o&&(o=1.70158),i*(t/=n)*t*((o+1)*t-o)+e}},539:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Easings=void 0;const n=i(269);e.Easings={easeLinear:n.easeLinear,easeInQuad:n.easeInQuad,easeOutQuad:n.easeOutQuad,easeInOutQuad:n.easeInOutQuad,easeInSine:n.easeInSine,easeOutSine:n.easeOutSine,easeInOutSine:n.easeInOutSine,easeInExpo:n.easeInExpo,easeOutExpo:n.easeOutExpo,easeInOutExpo:n.easeInOutExpo,easeInCirc:n.easeInCirc,easeOutCirc:n.easeOutCirc,easeInOutCirc:n.easeInOutCirc,easeInCubic:n.easeInCubic,easeOutCubic:n.easeOutCubic,easeInOutCubic:n.easeInOutCubic,easeInQuart:n.easeInQuart,easeOutQuart:n.easeOutQuart,easeInOutQuart:n.easeInOutQuart,easeInQuint:n.easeInQuint,easeOutQuint:n.easeOutQuint,easeInOutQuint:n.easeInOutQuint,easeInElastic:n.easeInElastic,easeOutElastic:n.easeOutElastic,easeInOutElastic:n.easeInOutElastic,easeInBack:n.easeInBack}},885:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var o=Object.getOwnPropertyDescriptor(e,i);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,o)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(539),e),o(i(892),e),o(i(830),e)},102:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ElapsedTime=void 0;const n=i(925),o=i(782);e.ElapsedTime=class{constructor(){this.start_time=new Date,this.stop_time=void 0,this._ms=void 0}start(){const t=new Date;return this.start_time=(0,n._isDate)(this.start_time)?this.start_time:t,this.stop_time=void 0,this._ms=void 0,this}now(t=!1){const e=new Date,i=(0,n._isDate)(this.start_time)?this.start_time:this.start_time=e;return this._ms=e.getTime()-i.getTime(),t&&(this.start_time=e),this}stop(){const t=new Date,e=((0,n._isDate)(this.start_time)?this.start_time:t).getTime(),i=this.stop_time,o=(0,n._isDate)(i)&&i.getTime()>=e?i:this.stop_time=t;return this._ms=o.getTime()-e,this}started(){return(0,n._isDate)(this.start_time)}stopped(){return(0,n._isDate)(this.stop_time)}ms(){return parseInt(this._ms)}sec(t=3){return(0,o._round)(this.ms()/1e3,t)}min(t=3){return(0,o._round)(this.ms()/6e4,t)}data(){return this.stop(),{start_time:(0,n._isDate)(this.start_time)?this.start_time:void 0,stop_time:(0,n._isDate)(this.stop_time)?this.stop_time:void 0,elapsed_ms:this.ms()}}}},114:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var o=Object.getOwnPropertyDescriptor(e,i);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,o)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(102),e)},149:(t,e)=>{"use strict";var i;Object.defineProperty(e,"__esModule",{value:!0}),e.EventEmitter=void 0;let n=10;const o=Symbol(`__private_props_${Date.now()}__`);class r{static get max_listeners(){return n}static set max_listeners(t){n=!isNaN(t=parseInt(t))&&Number.isInteger(t)&&t>=1?t:10}get max_listeners(){return this[o]._max_listeners}set max_listeners(t){this[o]._max_listeners=!isNaN(t=parseInt(t))&&Number.isInteger(t)&&t>=0?t:r.max_listeners}constructor(){this[i]={},this[o]={_events:{},_max_listeners:void 0}}static type(t,e=!1){let i="";if("string"!=typeof t||!(i=t.trim())){const i="Invalid event type.";if(console.warn(i,{type:t}),e)throw new TypeError(i)}return i}static listener(t,e=!1){let i;if("function"==typeof t)i=t;else{const i="Invalid event listener callback function.";if(console.warn(i,{listener:t}),e)throw new TypeError(i)}return i}listeners(t){const e=this[o],i=[];if((t=r.type(t))&&e._events.hasOwnProperty(t)){const n=e._events[t];if("function"==typeof n)i.push(n);else if(Array.isArray(n)&&n.length)for(const t of n)"function"==typeof t&&i.push(t)}return i}hasListener(t,e){return this.listeners(t).findIndex((t=>t===e))>-1}emit(t,e){const i={type:t,data:e,time:Date.now()},n=this.listeners(t=r.type(t,!0));if(n.length){for(const t of n)t.call(this,i);return!0}if("error"===t){if(e instanceof Error)throw e;const t='Uncaught, unspecified "error" event.';throw console.warn(t,{event:i}),new Error(t)}return!1}on(t,e,i=!1){return this.addListener(t,e,i)}once(t,e){return this.addListener(t,e,!0)}subscribe(t,e){return t=r.type(t,!0),e=r.listener(e,!0),this.addListener(t,e),()=>{this.removeListener(t,e)}}addListener(t,e,i=!1){t=r.type(t,!0);let n=e=r.listener(e,!0);if(i){let i=!1;n=o=>{i||(i=!0,e.call(this,o),this.removeListener(t,n))}}const a=this.listeners(t);if(a.findIndex((t=>t===n))<0){const e=this[o];if(e._events.newListener&&this.emit("newListener",{type:t,handler:n}),e._events[t]=a.length?[...a,n]:n,Array.isArray(e._events[t])){const i=e._events[t].length,n="number"==typeof e._max_listeners?e._max_listeners:r.max_listeners;"number"==typeof n&&n>0&&i>n&&console.error(`EventEmitter possible memory leak detected - ${i} "${t}" event listeners added, max count is ${n}.`)}}else console.warn(`This "${t}" event listener is already added.`);return this}removeListener(t,e){if(!(t=r.type(t)))return this;const i=this[o];if(!i._events.hasOwnProperty(t))return this;let n=!1;if(Array.isArray(i._events[t])){const o=i._events[t],r=o.findIndex((t=>t===e));o.splice(r,1),n=!0}else i._events[t]===e&&(delete i._events[t],n=!0);return n&&(this.listeners(t).length||delete i._events[t],i._events.removeListener&&this.emit("removeListener",{type:t,listener:e})),this}removeAllListeners(t){if(!(t=r.type(t)))return this;const e=this[o];if(!e._events.hasOwnProperty(t))return this;const i="removeListener"!==t&&e._events.removeListener,n=i?this.listeners(t):[];if(delete e._events[t],i&&n.length)for(const e of n)this.emit("removeListener",{type:t,listener:e});return this}}e.EventEmitter=r,i=o},534:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Events=void 0;const n=i(149);e.Events=new n.EventEmitter},821:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var o=Object.getOwnPropertyDescriptor(e,i);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,o)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(149),e),o(i(534),e)},649:(t,e)=>{"use strict";var i;Object.defineProperty(e,"__esModule",{value:!0}),e.Exception=void 0;const n=Symbol(`__private_props_${Date.now()}__`);class o extends Error{get message(){return this[n].message}get name(){return this[n].name}get code(){return this[n].code}get data(){return this[n].data}get time(){return this[n].time}constructor(t,e,o,r,a){const s=Date.now();super(t=t&&"string"==typeof t&&(t=t.trim())?t:"Unspecified exception message."),this[i]={},"string"==typeof o?o=(o=o.trim())?o:0:"number"==typeof o&&!isNaN(o=parseInt(`${o}`))&&Number.isInteger(o)&&Number.isFinite(o)||(o=0),this[n]={message:t,name:e&&"string"==typeof e&&(e=e.trim())?e:"Exception",code:o,data:r,time:a&&!isNaN(a=parseInt(a))&&Number.isInteger(a)&&Number.isFinite(a)&&a>=0?a:s}}toString(){const{message:t,name:e,code:i}=this;let n=e+":";return 0!==i&&(n+=" ["+i+"]"),n+=" "+t,n}static error(t,e,i,n,r){return new o(t,e,i,n,r)}static parse(t){var e,i,n;const r=Date.now(),a={},s=t=>"string"==typeof t&&(t=t.trim())?t:void 0,p=t=>!isNaN(t=parseInt(t))&&Number.isInteger(t)&&Number.isFinite(t)&&t>=0?t:void 0,c=t=>{let e;return void 0!==(e=p(t))||(e=s(t)),e};if(t&&"object"==typeof t){let e=!1;if(Array.isArray(t)){const i=t[Symbol.iterator];(["values","entries"].includes(null==i?void 0:i.name)||"function"==typeof i)&&(t=[...t]),t.length&&(a.message=s(t[0]),a.name=s(t[1]),a.code=c(t[2]),a.data=t[3],a.time=p(t[4]),e=!0)}if(!e&&t instanceof Error){const i=t;a.message=s(i.message),a.name=s(i.name),a.code=c(i.code),a.data=i.data,a.time=p(i.time),e=!0}e||(a.message=s(t.message),a.name=s(t.name),a.code=c(t.code),a.data=t.data,a.time=p(t.time),e=!0)}else a.message=s(t);return new o(null!==(e=a.message)&&void 0!==e?e:"Unknown exception error.",null!==(i=a.name)&&void 0!==i?i:"Error",a.code,a.data,null!==(n=a.time)&&void 0!==n?n:r)}}e.Exception=o,i=n},882:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var o=Object.getOwnPropertyDescriptor(e,i);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,o)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(649),e)},246:(t,e,i)=>{"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),e.Task=e.TASK_STATUSES=void 0;const o=i(821);e.TASK_STATUSES=["new","running","stopped","failed","done"];let r=200,a=2;const s=(t,e=0,i=0)=>[void 0,null].includes(t)||"string"==typeof t&&!(t=t.trim())?i:!isNaN(t=parseFloat(t))&&Number.isFinite(t)&&t>=0?t:e,p=(t,e=0,i=0)=>parseInt(s(t,e,i)+""),c=(t,e)=>{const i=Math.pow(10,p(e,a,a));return Math.round((t+Number.EPSILON)*i)/i},l=t=>{void 0===t&&(t=null);const e=[];return JSON.stringify(t,(function(t,i){if(i&&"object"==typeof i){if(e.indexOf(i)>-1)return;e.push(i)}return i}))},u=t=>{if([void 0,null].includes(t))return"";let e="";try{Object(t)===t&&t[Symbol.iterator]&&(t=l([...t])),e=String(t)}catch(t){e=""}return Object(t)!==t||e&&!/\[object \w+\]/.test(e)||(e=l(t).replace(/^"|"$/g,"")),e.trim()},d=t=>(Object(t)!==t||t instanceof Error||(t.error instanceof Error||"string"==typeof t.error&&t.error.trim()||t.reason instanceof Error||"string"==typeof t.reason&&t.reason.trim()?t=t.error:"string"==typeof t.message&&t.message.trim()&&(t=t.message)),u(t)),f=(t,e=0)=>{let i,n;const o=()=>{clearTimeout(i),clearTimeout(n),n=void 0,t()};return()=>{if(!e)return t();clearTimeout(i),i=setTimeout(o,e),n||(n=setTimeout(o,Math.floor(1.5*e)))}},m=Symbol(`__private_props_${Date.now()}__`);class h{static get event_debounce(){return r}static set event_debounce(t){r=p(t,r,0)}static get decimal_precision(){return a}static set decimal_precision(t){a=p(t,a,2)}get name(){return this[m].name}get label(){return this[m].label}get linked(){return this[m].linked}get precision(){return this[m].precision}get event_debounce(){return this[m].event_debounce}get progress(){return this[m].progress}get total(){return this[m].total}get value(){return this[m].value}get error(){return this[m].error}get status(){return this[m].status}get startTime(){return this[m].startTime}get stopTime(){return this[m].stopTime}get elapsedTime(){return this.stopTime?this.stopTime-this.startTime:0}get complete(){return this[m].complete}get item(){return this[m].item}constructor(t,e=!1,i=h.decimal_precision,r=h.event_debounce){if(this[n]={},!(t=u(t)))throw new TypeError("Invalid new task name.");i=p(i,h.decimal_precision,h.decimal_precision),r=p(r,h.event_debounce,h.event_debounce),this[m]={name:t,label:"",linked:e,precision:i,event_debounce:r,progress:0,total:0,value:0,error:"",status:"new",startTime:0,stopTime:0,complete:!1,item:void 0,_done:!1,_round:t=>c(t,this[m].precision),_emitter:new o.EventEmitter,_debounced_update:f((()=>{const t=this[m];t._done||t._emitter.emit("update",this.data())}),r)}}get data(){return()=>{const{name:t,label:e,linked:i,precision:n,event_debounce:o,progress:r,total:a,value:s,error:p,status:c,startTime:l,stopTime:u,elapsedTime:d,complete:f,item:m}=this;return{name:t,label:e,linked:i,precision:n,event_debounce:o,progress:r,total:a,value:s,error:p,status:c,startTime:l,stopTime:u,elapsedTime:d,complete:f,item:m}}}get update(){return()=>(this[m]._debounced_update(),this)}subscribe(t){return this[m]._emitter.subscribe("update",t)}start(t=!1){const e=this[m];let i=0;return e.complete&&!t?(console.warn("Task `start` while complete ignored! Try using `task.start(restart=true)` to override."),this):(e.complete&&(i++,e.complete=!1),"running"!==e.status&&(i++,e.status="running"),e.startTime&&!t||(i++,e.startTime=Date.now()),e.stopTime&&(i++,e.stopTime=0),e.error&&(i++,e.error=""),i&&this.update(),this)}stop(){const t=this[m];let e=0;return"running"===t.status&&(e++,t.status="stopped"),t.stopTime||(e++,t.stopTime=Date.now(),t.startTime||(t.startTime=t.stopTime)),e&&this.update(),this}failure(t){t=(t=d(t))?t:"Unknown task error.";const e=this[m];let i=0;return e.error!==t&&(i++,e.error=t),"failed"!==e.status&&(i++,e.status="failed"),e.stopTime||(i++,e.stopTime=Date.now(),e.startTime||(e.startTime=e.stopTime)),i&&this.update(),this}done(t=!1){const e=this[m];let i=0;if(e.complete||(i++,e.complete=!0),"stopped"!==e.status){const n=e.error?"failed":"done";if(e.status!==n&&(i++,e.status=n),e.linked||t){let t=100;t!==e.progress&&(i++,e.progress=t),e.total&&e.value!==e.total&&(i++,e.value=e.total)}}return e.stopTime||(i++,e.stopTime=Date.now(),e.startTime||(e.startTime=e.stopTime)),e._done=!0,i&&e._emitter.emit("update",this.data()),this}setProgress(t,e,i){const n=this[m];if(n._done)return console.warn("Task `setProgress` while done ignored."),this;let o=s(t,-1,-1);if(o<0)throw new TypeError(`Invalid set task \`progress\` value (${t}).`);(t=n._round(o))>100&&(t=100);let r=n.value,a=n.total;n.linked?a&&(r=100===t?a:n._round(t/100*a)):((i=s(i,-1,-1))>=0&&(a=n._round(i)),(e=s(e,-1,-1))>=0&&(r=n._round(e)));let p=0;return t!==n.progress&&(p++,n.progress=t),r!==n.value&&(p++,n.value=r),a!==n.total&&(p++,n.total=a),p&&this.update(),this}setTotal(t){const e=this[m];if(e._done)return console.warn("Task `setTotal` while done ignored."),this;let i=s(t,-1,-1);if(i<0)throw new TypeError(`Invalid set task \`total\` value (${t}).`);t=e._round(i);let n=e.progress,o=e.value;e.linked&&(t?o?o>=t?(o=t,n=100):n=e._round(o/t*100):n&&(o=e._round(n/100*t)):(o=0,n=0));let r=0;return n!==e.progress&&(r++,e.progress=n),o!==e.value&&(r++,e.value=o),t!==e.total&&(r++,e.total=t),r&&this.update(),this}setValue(t){const e=this[m];if(e._done)return console.warn("Task `setValue` while done ignored."),this;let i=s(t,-1,-1);if(i<0)throw new TypeError(`Invalid set task \`value\` value (${t}).`);t=e._round(i);let n=e.total,o=e.progress;e.linked&&(t?n?t>n?(n=t,o=100):o=e._round(t/n*100):o&&(n=e._round(100/o*t)):o=0);let r=0;return o!==e.progress&&(r++,e.progress=o),t!==e.value&&(r++,e.value=t),n!==e.total&&(r++,e.total=n),r&&this.update(),this}setItem(t){const e=this[m];return e._done?(console.warn("Task `setItem` while done ignored."),this):(e.item=t,this)}static create(t,i,n){let{name:o,label:r,linked:a,precision:l,event_debounce:v,progress:g,total:b,value:x,error:y,status:_,startTime:w,stopTime:O,complete:E,item:j}=Object(t);try{let t;if(!(t=u(o)))throw new TypeError("Invalid task `name` value.");o=t,r=u(r),a=!!a,t=p(l,-1,h.decimal_precision),i=(t=p(i,-1,t))<0?h.decimal_precision:t,t=p(v,-1,h.event_debounce),n=(t=p(n,-1,t))<0?h.event_debounce:t;const k=t=>c(t,i);if((t=s(g,-1))<0)throw new TypeError("Invalid task `progress` value.");if((g=k(t))>100&&(g=100),(t=s(b,-1))<0)throw new TypeError("Invalid task `total` value.");if(b=k(t),(t=s(x,-1))<0)throw new TypeError("Invalid task `value` value.");if(x=k(t),a)if(x)if(b)if(x>b)console.warn(`Task linked \`value\` (${x}) is greater than \`total\` (${b}). Using value as new total${100!==g?" - updating progress":""}.`),b=x,g=100;else{const t=k(x/b*100);g!==t&&(g&&console.warn(`Task linked \`progress\` (${g}) recalculated to (${t}) using current value/total (${x}/${b}) %.`),g=t)}else g&&(b=k(100/g*x));else g=0;if(E=!!E,y=d(y),(_=u(_).toLowerCase())&&e.TASK_STATUSES.includes(_)||(_="new"),(t=p(w,-1))<0)throw new TypeError("Invalid task `startTime` value.");if(w=t,(t=p(O,-1))<0)throw new TypeError("Invalid task `stopTime` value.");if(O=t,["stopped","failed","done"].includes(_)&&w&&O&&w<O?y&&"failed"!==_?_="failed":"done"!==_||E||(E=!0):(_="new",w=0,O=0,y="",E=!1),!e.TASK_STATUSES.includes(_))throw new TypeError("Invalid task `status` value.");const I=new h(o,a,i,n),T=I[m];return T.name=o,T.label=r,T.linked=a,T.precision=i,T.event_debounce=n,T.progress=g,T.total=b,T.value=x,T.error=y,T.status=_,T.startTime=w,T.stopTime=O,T.complete=E,T.item=j,T._debounced_update=f((()=>{T._done||T._emitter.emit("update",I.data())}),I.event_debounce),I}catch(t){const e=`Create Task Failure! ${t instanceof Error?t.message:t}`.trim(),s={name:o,label:r,linked:a,precision:i,event_debounce:n,progress:g,total:b,value:x,error:e,status:_,startTime:w,stopTime:O,complete:E,item:j};throw console.warn(e,{_options:s}),"TypeError"===t.name?new TypeError(e):new Error(e)}}}e.Task=h,n=m},638:(t,e,i)=>{"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),e.Tasks=void 0;const o=i(821),r=i(246);let a=200,s=2;const p=(t,e=0,i=0)=>parseInt(((t,e=0,i=0)=>[void 0,null].includes(t)||"string"==typeof t&&!(t=t.trim())?i:!isNaN(t=parseFloat(t))&&Number.isFinite(t)&&t>=0?t:e)(t,e,i)+""),c=(t,e=0)=>{let i,n;const o=()=>{clearTimeout(i),clearTimeout(n),n=void 0,t()};return()=>{if(!e)return t();clearTimeout(i),i=setTimeout(o,e),n||(n=setTimeout(o,Math.floor(1.5*e)))}},l=Symbol(`__private_props_${Date.now()}__`);class u{static get event_debounce(){return a}static set event_debounce(t){a=p(t,a,0)}static get decimal_precision(){return s}static set decimal_precision(t){s=p(t,s,2)}get size(){return this[l]._tasks.size}get precision(){return this[l].precision}get event_debounce(){return this[l].event_debounce}constructor(t=u.decimal_precision,e=u.event_debounce){this[n]={},t=p(t,u.decimal_precision,u.decimal_precision),e=p(e,u.event_debounce,u.event_debounce),this[l]={precision:t,event_debounce:e,_tasks:new Map,_unsubscribe:new Map,_emitter:new o.EventEmitter,_debounced_update:c((()=>{this[l]._emitter.emit("update",this.data())}),e)}}get data(){return()=>{const t=this[l];let e=0,i=0,n=0,o=0,r=0,a=!1,c=!1,u=!1;const d=[];for(const s of[...t._tasks.values()]){const t=s.data();e++,r+=100,o+=t.progress,u||t.complete||(u=!0),"running"===t.status?(a||(a=!0),c||(c=!0)):!c&&["failed","done"].includes(t.status)&&(c=!0),t.startTime&&!i&&t.startTime<i&&(i=t.startTime),t.stopTime&&!n&&t.stopTime>n&&(n=t.stopTime),d.push([s.name,t])}const f=Object.fromEntries(d),m=o&&r?o>=r?100:((t,e)=>{const i=Math.pow(10,p(e,s,s));return Math.round((t+Number.EPSILON)*i)/i})(o/r*100,t.precision):0,h=a,v=c,g=v&&!u;let b=0;return n&&i&&(n<i&&(i=n),b=n-i),{precision:this.precision,event_debounce:this.event_debounce,size:e,progress:m,running:h,started:v,complete:g,startTime:i,stopTime:n,elapsedTime:b,tasks:f}}}get update(){return()=>(this[l]._debounced_update(),this)}subscribe(t){return this[l]._emitter.subscribe("update",t)}has(t){return this[l]._tasks.has(t)}get(t){return this[l]._tasks.get(t)}add(t,e=!1,i){const n=this[l];let o;if(i=(i=p(i,-1,-1))>=0?i:void 0,"string"==typeof t?o=new r.Task(t,e,n.precision,i):t instanceof r.Task?o=t:"object"==typeof t&&"string"==typeof(null==t?void 0:t.name)&&(o=r.Task.create(t,n.precision,i)),!(o instanceof r.Task))throw new TypeError("Add `Task` object is invalid.");this.has(o.name)&&console.warn(`Existing task named "${o.name}" has been replaced.`);const a=o.subscribe((t=>{console.debug(`-- task event ${t.data.name}`,t.data.progress),this.update()}));return n._tasks.set(o.name,o),n._unsubscribe.set(o.name,a),this.update(),o}remove(t){const e=this[l];if(!e._tasks.has(t))return this;const i=e._unsubscribe.get(t);return i&&(e._unsubscribe.delete(t),i()),e._tasks.delete(t),this.update(),this}}e.Tasks=u,n=l},921:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var o=Object.getOwnPropertyDescriptor(e,i);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,o)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(246),e),o(i(638),e)},0:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Term=void 0;const n=i(377);let o,r=!1;e.Term=class{static get FORMAT_DISABLED(){return r}static set FORMAT_DISABLED(t){var e;r=null!==(e=(0,n._bool)(t,!0))&&void 0!==e&&e}static get LOG_METHODS(){return["log","debug","warn","error","info"]}static get LOG_METHOD(){return o}static set LOG_METHOD(t){o=this.LOG_METHODS.includes(t)?t:void 0}static get FORMATS(){return{reset:"[0m",bright:"[1m",dim:"[2m",underscore:"[4m",blink:"[5m",reverse:"[7m",hidden:"[8m",fg_black:"[30m",fg_red:"[31m",fg_green:"[32m",fg_yellow:"[33m",fg_blue:"[34m",fg_magenta:"[35m",fg_cyan:"[36m",fg_white:"[37m",fg_gray:"[90m",bg_black:"[40m",bg_red:"[41m",bg_green:"[42m",bg_yellow:"[43m",bg_blue:"[44m",bg_magenta:"[45m",bg_cyan:"[46m",bg_white:"[47m",bg_gray:"[100m"}}static get PREDEFINED_FORMATS(){return{log:"fg_white",dump:["fg_white","bright"],debug:"fg_gray",error:"fg_red",warn:"fg_yellow",info:"fg_cyan",success:"fg_green",bg_log:["bg_blue","fg_white"],bg_debug:["bg_gray","fg_black"],bg_error:["bg_red","fg_white"],bg_warn:["bg_yellow","fg_black"],bg_info:["bg_cyan","fg_black"],bg_success:["bg_green","fg_white"]}}static get getFormats(){return function(t){const e=this.FORMATS,i=this.PREDEFINED_FORMATS;return(Array.isArray(t)?t:"string"==typeof t?[t]:[]).reduce(((t,n)=>{if((n=n.trim().toLowerCase())&&"reset"!==n){let o=n=n.replace(/[^a-z0-9]/gi,"_").replace("grey","gray");const r=e=>{const n=i[e];Array.isArray(n)?t.push(...n):"string"==typeof n&&t.push(n)};e.hasOwnProperty(n)?t.push(n):e.hasOwnProperty(o=`fg_${n}`)?t.push(o):i.hasOwnProperty(n)?r(n):i.hasOwnProperty(o=`bg_${n}`)&&r(o)}return t}),[])}}static get format(){return function(t,...e){let i;const o=this.getFormats(t),r=e=>{if(this.FORMAT_DISABLED||!t.length)return e;if("object"==typeof e&&e){if(Array.isArray(e))return e;if(new RegExp("\\[object \\w+\\]").test(i=(0,n._string)(e)))return e;e=i}return"string"==typeof e&&e.length?o.reduce(((t,e)=>this.FORMATS[e]+t+this.FORMATS.reset),e):e},a=this,s=[];for(const t of Array.isArray(e)?e:[])s.push(r(t));let p=a.LOG_METHOD;const c=t=>p||(a.LOG_METHODS.includes(t)?t:"log");return{method(t){return p=a.LOG_METHODS.includes(t)?t:a.LOG_METHOD,this},format(t,...e){return s.push(...a.format(t,...e).values()),this},values(...t){const e=[];if(Array.isArray(t)&&t.length)for(const i of t)e.push(r(i));return[...s,...e]},clean:(...t)=>a.clean(...s,...t),log(...t){const e=[];if(Array.isArray(t)&&t.length)for(const i of t)e.push(r(i));console[c("log")](...s,...e)},debug(...t){const e=[];if(Array.isArray(t)&&t.length)for(const i of t)e.push(r(i));console[c("debug")](...s,...e)},warn(...t){const e=[];if(Array.isArray(t)&&t.length)for(const i of t)e.push(r(i));console[c("warn")](...s,...e)},error(...t){const e=[];if(Array.isArray(t)&&t.length)for(const i of t)e.push(r(i));console[c("error")](...s,...e)},info(...t){const e=[];if(Array.isArray(t)&&t.length)for(const i of t)e.push(r(i));console[c("info")](...s,...e)}}}}static get clean(){return function(...t){const e=t=>Object.values(this.FORMATS).reduce(((t,e)=>t.replace(new RegExp(String(e).replace(/\x1B/,"\\x1B").replace(/\[/,"\\["),"g"),"")),t),i=[];for(const n of t)i.push("string"==typeof n&&n.trim().length?e(n):n);return i}}static get text(){return function(t,e){const i=(0,n._string)(t),o=[],r=Array.isArray(e)?e:"string"==typeof e?[e]:[];for(const t of r)"string"==typeof t&&t.trim()&&o.push(t);return o.length&&i.trim().length?this.format(o,i).values()[0]:i}}static log(...t){this.format("log",...t).log()}static debug(...t){this.format("debug",...t).debug()}static error(...t){this.format("error",...t).error()}static warn(...t){this.format("warn",...t).warn()}static info(...t){this.format("info",...t).info()}static success(...t){this.format("success",...t).log()}static get list(){return function(t,e=!1){var i;let o=[t=(0,n._clone)(t)],r="values";if("object"==typeof t&&t)if(r=null===(i=t[Symbol.iterator])||void 0===i?void 0:i.name)o="entries"===r?e?[...t]:[t]:[...t];else if(r="values",o=[t],e&&!1===(0,n._stringable)(t)){let e=Object.fromEntries(Object.entries(t)),i=[];"object"==typeof e&&e&&(i=Object.entries(e)).length||(i=Object.entries(t)),i.length&&(r="entries",o=i)}return[o,r]}}static get table(){return function(t,e=248,i=!1){const o=this,[r,a]=o.list(t,"object"==typeof t&&t&&!(0,n._stringable)(t)),s=t=>{let e,i;if(Array.isArray(t)||!1===(i=(0,n._stringable)(t))){if("object"==typeof t&&t){const e=t[Symbol.iterator];e?(t=[...t],"entries"===e&&(t=Object.fromEntries(t))):t=Object.fromEntries(Object.entries(t))}t=(0,n._jsonStringify)(t),e="magenta"}else e="green","number"==typeof t?e="yellow":null==t?e="gray":!0===t?e="cyan":!1===t?e="red":/^\d{4}-(?:0[1-9]|1[0-2])-(?:[0-2][1-9]|[1-3]0|3[01])T(?:[0-1][0-9]|2[0-3])(?::[0-6]\d)(?::[0-6]\d)?(?:\.\d{3})?(?:[+-][0-2]\d:[0-5]\d|Z)?$/.test(i)&&(e="magenta"),t=i;return t=t.replace(/\t/g,"  "),[(0,n._strEscape)(t),e]};let p;const c=[];if("entries"===a)c.push(["(index)","Values"]),c.push(...r);else{let t=[],e=[];for(let i=0;i<r.length;i++){const a=r[i];let[s,c]=o.list(a,!i||"entries"===p);i||(p=c);const l={};for(let e=0;e<s.length;e++){const i=s[e];let o,r;"entries"===c?(o=(0,n._str)(i[0],!0,!0),r=i[1]):(o=`${e}`,r=i),t.includes(o)||t.push(o),l[o]=r}e.push(l)}c.push(["(index)",...t]);for(let i=0;i<e.length;i++){const n=[],o=e[i];for(const e of t)n.push(o[e]);c.push([i,...n])}}const l={},u=[];for(const t of c){const i=[];for(let n=0;n<t.length;n++){const o=t[n],[r,a]=s(o);l.hasOwnProperty(n)||(l[n]=0);let p=r.length;p>e&&(p=e),p>l[n]&&(l[n]=p),i.push([r,a])}u.push(i)}const d=u.length;for(let t=0;t<u.length;t++){const e=u[t];let n=0,r=[];for(let i=0;i<e.length;i++){let[a,s]=e[i];i&&t||(s=!i&&t&&"values"===p?"gray":"white");const c=l[i],u=[];if(a.length>c){for(;a.length>c;){const t=a.substring(0,c).padEnd(c);a=a.slice(c),u.push(o.text(t,s))}a.length&&u.push(o.text(a.padEnd(c),s))}else u.push(o.text(a.padEnd(c),s));r.push(u),n<u.length&&(n=u.length)}const a=[];for(let t=0;t<r.length;t++){const e=r[t],i=l[t],o=[],s=[...Array(n)];for(let t=0;t<s.length;t++)o.push(t<e.length?e[t]:"".padEnd(i));a.push(o)}r=a;const s=[];for(const t of[...Array(n)])s.push([]);for(let t=0;t<r.length;t++){const e=r[t];for(let i=0;i<e.length;i++)s[i][t]=e[i]}const c=[],f=s.length;for(let e=0;e<s.length;e++){const n=s[e];if(!e&&!t){let t="┌─";for(let e=0;e<n.length;e++)t+=(e?"─┬─":"")+"".padEnd(l[e],"─");t+="─┐",c.push(t)}if(c.push("│ "+n.join(" │ ")+" │"),(!t||i)&&e+1===f&&t+1<d){let t="├─";for(let e=0;e<n.length;e++)t+=(e?"─┼─":"")+"".padEnd(l[e],"─");t+="─┤",c.push(t)}if(e+1===f&&t+1===d){let t="└─";for(let e=0;e<n.length;e++)t+=(e?"─┴─":"")+"".padEnd(l[e],"─");t+="─┘",c.push(t)}}console.log(c.join("\n"))}}}static get clear(){return function(){console.log("c"),console.clear()}}}},926:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var o=Object.getOwnPropertyDescriptor(e,i);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,o)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(0),e)},93:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e._mime=e.EXT_MIMES=void 0;const n=i(377);e.EXT_MIMES=i(154),e._mime=(t,i=0)=>{const o=[0,1,2].includes(i=parseInt(i+""))?i:0,r={value:t,type:"",ext:"",error:"",toString(t){return this[t&&["mime","ext","error"].includes(t=(0,n._str)(t,!0).toLowerCase())?t+"":"type"]}};try{const i=[],o=(0,n._str)(t,!0);if(o){let t=null;if(t=o.match(/(\.|^)([-_0-9a-zA-Z]+)$/i)){let n=t[2].toLowerCase();"jpeg"===n&&(n="jpg"),e.EXT_MIMES.hasOwnProperty(n)?r.type=e.EXT_MIMES[r.ext=n]:i.push(`Mime file extension "${n}" is not supported`)}else if(/^[-_a-z0-9]+\/[^\/]+$/i.test(o)){const t=Object.entries(e.EXT_MIMES).find((t=>t[1].startsWith(o.toLowerCase())||o.toLowerCase().startsWith(t[1])));if(t){let[e,i]=t;"jpeg"===e&&(e="jpg"),r.ext=e,r.type=i}else i.push(`Mime type "${o}" is not supported`)}else i.push("Invalid mime type or file extension string value")}else i.push("Blank mime type or file extension string value");if(i.length)throw new Error(r.error=i.join("; ")+".");return r}catch(t){if(o){class e extends Error{constructor(){super(...arguments),this.name="MimeTypeError",this.item=r}}const i=new e(`${t.message||t}`);if(2===o)throw i;console.warn(i+"",{item:r})}return r}}},297:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e._filepath=e._basename=void 0;const n=i(377);e._basename=(t,e=!1,i=!1,o)=>{const r=[0,1,2].includes(o=parseInt(o+""))?o:0,a={value:t,basename:"",name:"",ext:"",error:"",illegal:[],invalid:[],toString(t){return this[t&&["basename","name","ext","error"].includes(t=(0,n._str)(t,!0).toLowerCase())?t+"":"basename"]}};let s=null;const p=a.name=a.basename=(0,n._str)((0,n._str)(t,!0).split(/[\\\/]/g).pop(),!0);(s=p.match(/([^\\/]*)$/i))&&(a.name=s[1],(s=a.name.match(/(.*)(\.([-_0-9a-zA-Z]+))$/i))&&(a.name=s[1],a.ext=s[3]));try{const t=[];if(p?(!e&&["..",".."].includes(p)&&(a.invalid.push(p),t.push(`The basename "${p}" dots not allowed`)),(/^\.\.[\.]+$/.test(p)||/[^\.][\.]+$/.test(p))&&(a.invalid.length||a.invalid.push(p),t.push(`The basename "${p}" format is invalid`)),(s=p.match(/[\:\?\"\<\>\|\*]/g))&&(a.illegal.push(...s),t.push(`The basename "${p}" contains illegal characters (:?"<>|*) => "${s.join("")}"`))):t.push("The basename string value is empty"),t.length)throw new Error(a.error=t.join("; ")+".");return a}catch(t){if(i&&(a.basename="",a.name="",a.ext=""),r){class e extends Error{constructor(){super(...arguments),this.name="BasenameError",this.item=a}}const i=new e(`${t.message||t}`);if(2===r)throw i;console.warn(i+"",{item:a})}return a}},e._filepath=(t,i,o=!1,r,a)=>{var s,p;const c=["","/","\\"].includes(i=(0,n._str)(i,!0))?i:"",l=(r=(0,n._str)(r,!0).replace(/path\s*$/i,"").trim())?r+" ":"",u=[0,1,2].includes(a=parseInt(a+""))?a:0,d={value:t,root:"",drive:"",path:"",dir:"",basename:"",name:"",ext:"",error:"",illegal:[],invalid:[],toString(t){let e=t&&["file","root","drive","path","dir","basename","name","ext","error"].includes(t=(0,n._str)(t,!0).toLowerCase())?t+"":"path";if("file"===e){if(this.error||!this.basename)return"";e="path"}return this[e]}};let f=(0,n._str)(t,!0);try{let t="",i="";const o=[],r=(0,n._split)(f,/[\\\/]/);for(let e=0;e<r.length;e++){let[n,a]=r[e];a=a?c||a:"",!e&&(/[a-z]\:/i.test(n)?t=i=n.toUpperCase()+(c||a||"\\"):!n&&a&&(t=a),t)||o.push([n,a])}const a=[];for(let t=0;t<o.length;t++){let[e,i]=o[t];e=(0,n._str)(e,!0),t&&!e&&a.push([e,i])}const u=[];for(let e=0;e<a.length;e++){let[i,n]=a[e];"."===i&&(!e&&t||e)?e&&e===a.length-1&&(a[e-1][1]=""):u.push([i,n])}const m=new Set,h=new Set,v=[],g=[];for(let n=0;n<u.length;n++){const[o,r]=u[n];try{(0,e._basename)(o,!0,!1,2)}catch(t){if(Array.isArray(null===(s=null==t?void 0:t.item)||void 0===s?void 0:s.invalid)&&t.item.invalid.length)for(const e of t.item.invalid)m.add(e);if(Array.isArray(null===(p=null==t?void 0:t.item)||void 0===p?void 0:p.illegal)&&t.item.illegal.length)for(const e of t.item.illegal)h.add(e)}if(".."===o)if(g.length){const t=g.length-1;if(t>-1&&g[t][0]&&![".",".."].includes(g[t][0])){g.pop();continue}}else if(t&&(v.push([o,r]),i))continue;g.push([o,r])}t&&g.length&&!g[0][0]&&g[0][1]&&(g[0][1]=""),v.length&&v.push(...g),d.root=t,d.drive=i;let b="";for(const t of g)b+=t.join("");d.dir=d.path=f=t+b.replace(/[\\/]$/,"");const x=g.pop();if(x&&!["",".",".."].includes(x[0])){const i=(0,e._basename)(x[0]);d.basename=i.basename,d.name=i.name,d.ext=i.ext,b="";for(const t of g)b+=t.join("");d.dir=t+b.replace(/[\\/]$/,"")}const y=[];b="";for(const t of v)b+=t.join("");const _=b?t+b:"";if(_&&y.push(`The ${l}root (${t}) dot nav path is outbound "${_}" => "${f}"`),m.size&&y.push(`The ${l}path contains invalid name${m.size>1?"s":""} (${(0,n._jsonStringify)([...m])})`),h.size&&y.push(`The ${l}path contains illegal characters (:?"<>|*) => "${[...h].join("")}"`),y.length)throw d.invalid=[...m],d.illegal=[...h],new Error(d.error=y.join("; ")+".");return d}catch(t){if(o&&(d.root="",d.drive="",d.path="",d.dir="",d.basename="",d.name="",d.ext=""),u){class e extends Error{constructor(){super(...arguments),this.name="NormPathError",this.item=d}}const i=new e(`${t.message||t}`);if(2===u)throw i;console.warn(i+"",{item:d})}return d}}},307:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var o=Object.getOwnPropertyDescriptor(e,i);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,o)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(93),e),o(i(297),e)},713:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var o=Object.getOwnPropertyDescriptor(e,i);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,o)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(599),e),o(i(109),e),o(i(377),e),o(i(114),e),o(i(926),e),o(i(885),e),o(i(821),e),o(i(882),e),o(i(921),e),o(i(307),e)},302:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0})},109:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var o=Object.getOwnPropertyDescriptor(e,i);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,o)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(302),e)},586:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e._batchValues=void 0,e._batchValues=(t,e)=>{if(!(Number.isInteger(e)&&e>0))throw new Error("Invalid batch size.");const i=t.slice(0),n=[];for(;i.length;)n.push(i.splice(0,e));return n}},501:(t,e)=>{"use strict";function i(t,e){if(!t||"object"!=typeof t)return t;if(e.has(t))return e.get(t);let n;if(t.nodeType&&"cloneNode"in t)n=t.cloneNode(!0),e.set(t,n);else if(t instanceof Date)n=new Date(t.getTime()),e.set(t,n);else if(t instanceof RegExp)n=new RegExp(t),e.set(t,n);else if(Array.isArray(t)){n=new Array(t.length),e.set(t,n);for(let o=0;o<t.length;o++)n[o]=i(t[o],e)}else if(t instanceof Map){n=new Map,e.set(t,n);for(const[o,r]of t.entries())n.set(o,i(r,e))}else if(t instanceof Set){n=new Set,e.set(t,n);for(const e of t)n.add(i(e,new Map))}else{if(!(t instanceof Object)){const e=`Unable to clone ${t}`;throw console.warn("[_clone] Error: "+e,t),Error(e)}n={},e.set(t,n);for(const[o,r]of Object.entries(t))n[o]=i(r,e)}return n}Object.defineProperty(e,"__esModule",{value:!0}),e._clone=void 0,e._clone=t=>i(t,new Map)},473:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e._cloneDeep=e.clonePrototype=void 0;const n=i(599),o=(t,e)=>"object"==typeof e&&e&&t instanceof e,r=t=>Object.prototype.toString.call(t);e.clonePrototype=t=>{if(null==t)return t;"object"!=typeof t&&(t=Object.getPrototypeOf(t));const e=function(){};return e.prototype=t,new e},e._cloneDeep=function(t,e){const{circular:i=!0,depth:a=1/0,prototype:s,non_enumerable:p=!1}=Object(e),c=void 0===i||Boolean(i),l=!isNaN(a)&&Number.isInteger(a)&&a>0?a:1/0,u=s,d=Boolean(p),f=[],m=[],h=void 0!==n.Buffer,v=(t,e)=>{if(0===e||"object"!=typeof t||!t)return t;let i,a;if(o(t,Map))i=new Map;else if(o(t,Set))i=new Set;else if(o(t,Promise))i=new Promise(((i,n)=>{t.then((t=>i(v(t,e-1)))).catch((t=>n(v(t,e-1))))}));else if("object"==typeof(s=t)&&"[object Array]"===r(s))i=[];else if((t=>"object"==typeof t&&"[object RegExp]"===r(t))(t))i=new RegExp(t.source,(t=>{let e="";return(null==t?void 0:t.global)&&(e+="g"),(null==t?void 0:t.ignoreCase)&&(e+="i"),(null==t?void 0:t.multiline)&&(e+="m"),e})(t)),t.lastIndex&&(i.lastIndex=t.lastIndex);else if((t=>"object"==typeof t&&"[object Date]"===r(t))(t))i=new Date(t.getTime());else{if(h&&n.Buffer.isBuffer(t))return n.Buffer.from?i=n.Buffer.from(t):(i=new n.Buffer(t.length),t.copy(i)),i;o(t,Error)?i=Object.create(t):"object"!=typeof u?(a=Object.getPrototypeOf(t),i=Object.create(a)):(i=Object.create(u),a=u)}var s;if(c){const e=f.indexOf(t);if(-1!==e)return m[e];f.push(t),m.push(i)}if(o(t,Map))for(const[n,o]of t){const t=v(n,e-1),r=v(o,e-1);i.set(t,r)}if(o(t,Set))for(const n of t){const t=v(n,e-1);i.add(t)}for(let n in t){Object.getOwnPropertyDescriptor(t,n)&&(i[n]=v(t[n],e-1));try{const o=Object.getOwnPropertyDescriptor(t,n);if(void 0===(null==o?void 0:o.set))continue;i[n]=v(t[n],e-1),o&&Object.defineProperty(i,n,o)}catch(t){if(t instanceof TypeError)continue;if(t instanceof ReferenceError)continue}}if(Object.getOwnPropertySymbols){const n=Object.getOwnPropertySymbols(t);for(let o=0;o<n.length;o++){const r=n[o],a=Object.getOwnPropertyDescriptor(t,r);(!a||a.enumerable||d)&&(i[r]=v(t[r],e-1),a&&Object.defineProperty(i,r,a))}}if(d){const n=Object.getOwnPropertyNames(t);for(let o=0;o<n.length;o++){const r=n[o],a=Object.getOwnPropertyDescriptor(t,r);a&&a.enumerable||(i[r]=v(t[r],e-1),a&&Object.defineProperty(i,r,a))}}return i};return v(t,l)}},740:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e._compare=void 0,e._compare=(...t)=>{let e=[],i=[];if(t.length<1)return console.warn((t.length?"Less than two":"No")+" `_compare` arguments provided."),!0;for(let o=1;o<t.length;o++)if(e=[],i=[],!n(t[0],t[o]))return!1;return!0;function n(t,o){if("number"==typeof t&&"number"==typeof o&&isNaN(t)&&isNaN(o))return!0;if(t===o)return!0;if("function"==typeof t&&"function"==typeof o||t instanceof Date&&o instanceof Date||t instanceof RegExp&&o instanceof RegExp||t instanceof String&&o instanceof String||t instanceof Number&&o instanceof Number)return t.toString()===o.toString();if(!(t instanceof Object&&o instanceof Object))return!1;if(t.isPrototypeOf(o)||o.isPrototypeOf(t))return!1;if(t.constructor!==o.constructor)return!1;if(t.prototype!==o.prototype)return!1;if(e.indexOf(t)>-1||i.indexOf(o)>-1)return!1;for(let e in o)if(o.hasOwnProperty(e)===t.hasOwnProperty(e)&&typeof o[e]!=typeof t[e])return!1;for(let r in t){if(o.hasOwnProperty(r)!==t.hasOwnProperty(r))return!1;if(typeof o[r]!=typeof t[r])return!1;let a=t[r],s=o[r];switch(typeof a){case"object":case"function":if(e.push(t),i.push(o),!n(a,s))return!1;e.pop(),i.pop();break;default:if(a!==s)return!1}}return!0}}},47:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e._compareShallow=void 0,e._compareShallow=(...t)=>{if(t.length<1)return console.warn((t.length?"Less than two":"No")+" `_compareShallow` arguments provided."),!0;for(let i=1;i<t.length;i++)if(!e(t[0],t[i]))return!1;return!0;function e(t,i){if(t===i)return!0;if(!(t instanceof Object&&i instanceof Object))return!1;if(t.constructor!==i.constructor)return!1;for(let n in t)if(t.hasOwnProperty(n)){if(!i.hasOwnProperty(n))return!1;if(t[n]!==i[n]){if("object"!=typeof t[n])return!1;if(!e(t[n],i[n]))return!1}}return!0}}},925:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e._parseIso=e._datetime=e._isDate=e._time=e._monthDays=e._monthEnd=e._monthStart=e._tomorrow=e._yesterday=e._midnight=e._today=e._date=e.DateLocales=void 0;const n=i(301),o=i(782),r=i(962);e.DateLocales={monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],AM:"AM",PM:"PM"},e._date=(t,i)=>{let o;return t instanceof Date?o=t:(0,r._empty)(t,!0)||("number"==typeof t||(t=(0,n._str)(t,!0))&&!isNaN(t=Date.parse(t)))&&(o=new Date(t)),o&&!isNaN(o.getTime())?o:(()=>{if(!(0,r._empty)(i))return!0===i?new Date:(0,e._date)(i)})()},e._today=()=>{const t=new Date;return new Date(t.getFullYear(),t.getMonth(),t.getDate(),0,0,0,0)},e._midnight=(t,i)=>{const n=(0,e._date)(null!=t?t:new Date,i);if(n)return new Date(n.getFullYear(),n.getMonth(),n.getDate(),0,0,0,0)},e._yesterday=(t,i)=>{const n=(0,e._date)(null!=t?t:new Date,i);if(n)return new Date(n.getFullYear(),n.getMonth(),n.getDate()-1,0,0,0,0)},e._tomorrow=(t,i)=>{const n=(0,e._date)(t,i);if(n)return new Date(n.getFullYear(),n.getMonth(),n.getDate()+1,0,0,0,0)},e._monthStart=(t,i)=>{const n=(0,e._date)(t,i);if(n)return new Date(n.getFullYear(),n.getMonth(),1,0,0,0,0)},e._monthEnd=(t,i)=>{const n=(0,e._date)(t,i);if(n)return new Date(n.getFullYear(),n.getMonth()+1,0,23,59,59,999)},e._monthDays=(t,i)=>{const n=(0,e._date)(t,i);if(n)return new Date(n.getFullYear(),n.getMonth()+1,0,0,0,0,0).getDate()},e._time=(t,i,n,r)=>{let a,s;return(a=(0,e._date)(t))&&Number.isInteger(s=(0,o._posInt)(a.getTime(),i,n))||(a=(0,e._date)(r))&&Number.isInteger(s=(0,o._posInt)(a.getTime(),i,n))?s:void 0},e._isDate=t=>t instanceof Date&&!isNaN(t.getTime()),e._datetime=t=>{const i=(0,e._date)(t);if(!i)return"";const n=[i.getFullYear(),i.getMonth()+1,i.getDate(),i.getHours(),i.getMinutes(),i.getSeconds()],o=[];for(const t of n)o.push((t+"").padStart(2,"0"));return o.splice(0,3).join("-")+" "+o.join(":")},e._parseIso=t=>{let e,i=NaN;if(e=/^(\d{4}|[+-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,.](\d{1,}))?)?(?:(Z)|([+-])(\d{2})(?::?(\d{2}))?)?)?$/.exec(t=(0,n._str)(t,!0))){for(const t of[1,4,5,6,7,10,11])e[t]=+e[t]||0;if(e[2]=(+e[2]||1)-1,e[3]=+e[3]||1,e[7]=e[7]?String(e[7]).substring(0,3):0,void 0!==e[8]&&""!==e[8]||void 0!==e[9]&&""!==e[9]){let t=0;"Z"!==e[8]&&void 0!==e[9]&&(t=60*e[10]+e[11],"+"===e[9]&&(t=0-t)),i=Date.UTC(e[1],e[2],e[3],e[4],e[5]+t,e[6],e[7])}else i=+new Date(e[1],e[2],e[3],e[4],e[5],e[6],e[7])}else i=Date.parse?Date.parse(t):NaN;return isNaN(i)?void 0:i}},802:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e._debouced=void 0,e._debouced=(t,e=200,i=0,n=!1)=>{let o,r,a,s;e=!isNaN(e=parseFloat(e))&&e>=0?e:200,i=!isNaN(i=parseFloat(i))&&i>=0&&i>e?i:0,n=!!n;const p=i=>{let p=s;s=void 0,a&&(clearTimeout(a),a=void 0),r&&!i&&(clearTimeout(r),r=void 0),(null==p?void 0:p.length)&&"function"==typeof t&&t.apply(...p),e&&n&&!i&&(o=setTimeout((()=>{clearTimeout(o),o=void 0}),e))},c=function(...t){if(s=[this,t],!e)return p();const c=(t=0)=>{clearTimeout(r),r=setTimeout((()=>p()),e),t||!i||a||(a=setTimeout((()=>p()),i))};if(!n||o||r)return c();c(1),p(1)};return Object.defineProperties(c,{length:{value:t.length},name:{value:`${t.name||"anonymous"}__debounced__${e}`}}),c}},597:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e._sayHello=void 0,e._sayHello=t=>{const e=`[x] - Hello ${t=(null==t?void 0:t.length)?t:"Thuku"}!`;return console.log(e),e}},917:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e._jsonCopy=e._jsonParse=e._jsonStringify=void 0,e._jsonStringify=(t,e,i=null)=>{const n=null===e?void 0:e,o=[],r=["this"],a=new Map,s=function(t,e){if(null===e)return e;if(e instanceof Error)try{e=String(e)}catch(t){const i="[FAILURE] Parse Error to String failed!";console.warn(i,{value:e,e:t}),e=i}if(e instanceof Set&&(e=[...e]),e instanceof Map&&(e=[...e]),e instanceof RegExp&&(e+=""),"object"==typeof e){t&&((t,e)=>{let i=o.length-1,n=o[i];if(n[t]===e||0===i)return r.push(t),void o.push(e);for(;i-- >=0;)if(n=o[i],(null==n?void 0:n[t])===e){i+=2,o.length=i,r.length=i,--i,o[i]=e,r[i]=t;break}})(t,e);const i=a.get(e);if(i)return"[Circular Reference]"+i;a.set(e,r.join("."))}return e};try{return void 0===t&&(t=void 0!==i?i:i=null),o.push(t),JSON.stringify(t,s,n)}finally{a.clear(),o.length=0,r.length=1}},e._jsonParse=(t,e)=>{try{return JSON.parse(t)}catch(t){return e}},e._jsonCopy=t=>"object"==typeof t&&t?(0,e._jsonParse)((0,e._jsonStringify)(t)):t},782:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e._px2rem=e._rand=e._commas=e._round=e._posInt=e._int=e._posNum=e._num=e._numeric=void 0,e._numeric=(t,e=!1,i=!1)=>{if("number"==typeof t)return!isNaN(t);if("boolean"==typeof t)return!!e;const n=String(t).trim();return""===n?!!i:/(^[+-]?[0-9]+([.][0-9]+)?([eE][+-]?[0-9]+)?$)|(^[+-]?\.[0-9]+$)|(^[+-]?[0-9]+\.$)/.test(n)},e._num=(t,e=NaN)=>{if("string"==typeof t)if((t=t.trim())&&/^.*$/.test(t)){let e="",i=t.trim().match(/^([\+-])\s*(\d.*)$/);i&&(e=i[1],t=i[2]),(t=t.replace(/\s*([\.,])\s*/g,"$1")).match(/^\d{1,3}(,\d{3})*(\.|(\.\d+))?$/)&&(t=t.replace(/,/g,"").trim()),/^\d+\.$|^\.\d+$|^\d+(\.\d+){0,1}$/.test(t)?!isNaN(t=parseFloat(t))&&e&&(t=parseFloat(e+t)):t=NaN}else t=NaN;else t=Number(t);if(!isNaN(t=Number(t))&&t>=Number.MIN_SAFE_INTEGER&&t<=Number.MAX_SAFE_INTEGER){let e=String(t).match(/^([\+-]?\d+\.\d{5,})(0{3,}\d*)$/);return e&&(t=Number(e[1])),t}return Number(e)},e._posNum=(t,i,n)=>{const o=(0,e._num)(t);if(!isNaN(o)&&o>=0&&!("number"==typeof i&&!isNaN(i)&&i>=0&&o<i||"number"==typeof n&&!isNaN(n)&&n>=0&&o>n))return o},e._int=(t,i=NaN)=>{const n=Math.floor((0,e._num)(t,i));return isNaN(n)?i:n},e._posInt=(t,i,n)=>{const o=(0,e._int)(t);if(!isNaN(o)&&o>=0&&!("number"==typeof i&&!isNaN(i)&&i>=0&&o<i||"number"==typeof n&&!isNaN(n)&&n>=0&&o>n))return o},e._round=(t,i=2)=>{if(isNaN(t))return NaN;let n=Math.pow(10,Math.abs((0,e._int)(i,2)));return Math.round((t+Number.EPSILON)*n)/n},e._commas=(t,i=2,n=!1)=>{const o=(0,e._round)((0,e._num)(t),i=(0,e._int)(i,2));if(isNaN(o))return console.warn("[WARNING: `_commas`] NaN value:",t),"";let r=String(o).replace(/\B(?=(\d{3})+(?!\d))/g,",");return i&&n&&(-1===r.indexOf(".")?r+=".".padEnd(i+1,"0"):r=r.split(".").reduce(((t,e,n)=>(t.push(1===n&&e.length<i?e.padEnd(i,"0"):e),t)),[]).join(".")),r},e._rand=(t,e)=>Math.floor(Math.random()*(e-t+1))+t,e._px2rem=(t=1,i=!1,n=16)=>{t=(0,e._num)(t,1);const o=16===(n=(0,e._num)(n,16))?.0625:16/n*.0625;return i?t/o:t*o}},962:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e._trans=e._sortValues=e._dumpVal=e._values=e._iterable=e._empty=e._valueOf=e._dotGet=e._bool=e._validDotPath=e._dotInflate=e._dotFlat=e._minMax=e._isFunc=e._isClass=e._getProp=e._hasAnyProps=e._hasProps=e._hasProp=e._getAllProperties=e._getAllPropertyDescriptors=void 0;const n=i(917),o=i(782),r=i(301),a=i(599);e._getAllPropertyDescriptors=t=>{if([null,void 0].includes(t))return{};const i=Object.getPrototypeOf(t);return Object.assign(Object.assign({},(0,e._getAllPropertyDescriptors)(i)),Object.getOwnPropertyDescriptors(t))},e._getAllProperties=(t,i=!1)=>{if([null,void 0].includes(t))return[];const n=new Set;for(const e of Object.getOwnPropertyNames(t))n.add(e);const o=t=>(t=>{const e=[];for(let i in t)e.push(i);return e})((0,e._getAllPropertyDescriptors)(t)).concat(Object.getOwnPropertySymbols(t)),r=[...new Set([...o(Function.prototype),...i?o(Function):[],...o(Object.prototype),...i?o(Object):[]])],a=t=>{for(const e of o(t))r.includes(e)||n.add(e)};return a(t),i&&a(Object(t).constructor),[...n]},e._hasProp=(t,e,i=!1)=>!("object"!=typeof t||!t)&&(Object.prototype.hasOwnProperty.call(t,e)||!i&&e in t),e._hasProps=(t,...i)=>{if(!i.length)return!1;for(const n of i)if(!(0,e._hasProp)(t,n))return!1;return!0},e._hasAnyProps=(t,...i)=>{if(!i.length)return!1;for(const n of i)if((0,e._hasProp)(t,n))return!0;return!1},e._getProp=(t,i,n=!1)=>{const o={match:i,key:void 0,value:void 0,exists:0},a=(0,e._getAllProperties)(t,!1);if(a.includes(i))return o.key=i,o.value=t[i],o.exists=t.hasOwnProperty(i)?1:2,o;const s=(0,r._stringable)(i);if(!1!==s){if(a.includes(i=s))return o.key=i,o.value=t[i],o.exists=t.hasOwnProperty(i)?1:2,o;if(n)for(const e of a){const n=(0,r._stringable)(e);if(!1!==n&&n.toLowerCase()===i.toLowerCase())return o.key=n,o.value=t[n],o.exists=t.hasOwnProperty(i)?1:2,o}}return o},e._isClass=t=>!(!t||t.constructor!==Function||void 0===t.prototype)&&(Function.prototype!==Object.getPrototypeOf(t)||Object.getOwnPropertyNames(t.prototype).length>1),e._isFunc=(t,i=!1)=>t&&"function"==typeof t&&(!!i||!(0,e._isClass)(t)),e._minMax=(t,e)=>{let i=t,n=e;return t>e&&(i=e,n=t),[i,n]},e._dotFlat=(t,e=[])=>{if(!t||"object"!=typeof t)return{};const i=[],n=(t,o)=>{for(const r of Object.entries(t)){const[t,a]=r,s=`${o?`${o}.`:""}${t}`;e&&Array.isArray(e)&&e.length&&(e.includes(`${t}`)||e.includes(s))||(a&&"object"==typeof a?n(a,s):i.push([s,a]))}};return n(t,""),Object.fromEntries(i)},e._dotInflate=t=>{const i=Object.entries((0,e._dotFlat)(t)),n={};for(const[t,e]of i){const i=t.split(".");if(1===i.length){n[i[0]]=e;continue}let o=i.slice().reverse().reduce(((t,e)=>({[e]:t})),e),r=n;for(let t=0;t<i.length;t++){const e=i[t],n=o=o[e];r.hasOwnProperty(e)||(r[e]=n),r=r[e]}}const o=t=>{if(Object(t)!==t)return t;let e,i=0;(i=(e=Object.keys(t)).length)&&Object.keys([...Array(i)]).join(",")===e.join(",")&&(t=Object.values(t));for(const e in t)t[e]=o(t[e]);return t};return o(n)},e._validDotPath=(t,e=!1,i=0)=>{try{if(!(t=(0,r._str)(t,!0)))throw new TypeError("Invalid dot path value.");const i=[];for(let e of t.split("."))(e=e.trim())&&i.push(e);if(!i.length)throw new TypeError(`Invalid dot path format "${t}".`);const n=[];for(let t=0;t<i.length;t++){let o=i[t],r=/^[-_0-9a-zA-Z]+$/.test(o);if(!r&&e)if(["!reverse","!slice"].includes(o))r=!0;else if(o.indexOf("=")>-1){const t=[];for(let e of o.split(","))(e=e.trim())&&!/^[-_0-9a-zA-Z]+\=([^\=\.]*)$/.test(e)&&t.push(e);t.length||(r=!0)}if(!r)throw new TypeError(`Invalid dot path key "${o}".`);n.push(o)}return n.join(".")}catch(n){if(i)if(1===i)console.warn(n,{dot_path:t,operations:e});else if(2===i)throw n;return""}},e._bool=(t,e=!1,i=!0)=>{if(i&&"string"==typeof t&&(t=t.trim()),!e||["true","false",!0,!1,1,0].includes(t))return"false"!==t&&!!t},e._dotGet=(t,i,r=!1,a=0,s)=>{try{const p=(t=(0,e._validDotPath)(t,!0,a)).split(".");if(!p.length)throw new TypeError("Invalid resolve dot path format.");let c=!1,l=p.reduce(((t,i)=>{if(c)return t;if(t&&"object"==typeof t){const a=(0,e._getProp)(t,i,r);if(a.exists)return a.value;if(Array.isArray(t)){if("!reverse"===i)return t.slice().reverse();if("!slice"===i)return t.slice();let a;if((a=(0,o._num)(i,0))<0&&Number.isInteger(a))return t.slice(a);if(t.length&&i.indexOf("=")>-1){const o=[];for(let t of i.split(",")){if(!(t=t.trim()))continue;let e=t.split("=");if(2!==e.length)return[];let i=e[0].trim(),r=decodeURIComponent(e[1]);i&&o.push([i,(0,n._jsonParse)(r,r)])}let a=-1;if(o.length)for(let i=0;i<t.length;i++){const n=t[i],s=[];for(const t of o){const i=(0,e._getProp)(n,t[0],r);i.exists&&i.value===t[1]&&s.push(t)}if(s.length&&s.length===o.length){a=i;break}}return a>-1?t[a]:void(c=!0)}}}c=!0}),i);return c?s:l}catch(e){if(a)if(1===a)console.warn(e,{path:t,target:i});else if(2===a)throw e;return s}},e._valueOf=t=>{if(!t||"object"!=typeof t)return t;let e=t.valueOf();if(e===t){if(Object(t[Symbol.toPrimitive])===t[Symbol.toPrimitive]&&!isNaN(e=Number(t)))return e;if(!1!==(e=(0,r._stringable)(t)))return e;if("function"==typeof t.toJSON&&(e=t.toJSON())!==t)return e}return e},e._empty=(t,i=!1)=>!(![null,void 0,NaN,""].includes(t)&&(["function","boolean","number"].includes(typeof t)||("string"==typeof t||(0,a._isBuffer)(t)?(0,r._str)(t,i).length:"object"!=typeof t||(t instanceof Map||t instanceof Set?t.size:Array.isArray(t)?t.length:Object(t[Symbol.iterator])===t[Symbol.iterator]?[...t].length:(0,e._getAllProperties)(t).length)))),e._iterable=(t,e=!1)=>"function"==typeof(null==t?void 0:t[e?Symbol.asyncIterator:Symbol.iterator]),e._values=(t,i=!1,n=!1,o)=>{let r=void 0===t?[]:i?[["0",t]]:[t];if(t&&"object"==typeof t&&"function"!=typeof t)if(Object(t[Symbol.iterator])===t[Symbol.iterator]){const e=(r=[...t]).length&&r.findIndex((t=>!(Array.isArray(t)&&2===t.length&&Object.keys(t)+""=="0,1")))<0;if(i)r=e?r:Object.entries(r);else if(e){const t=[];for(const e of r)t.push(e[1]);r=t}}else if(n){const n=Object.entries(t);if(n.length||(0,e._empty)(t)&&Object.getPrototypeOf(t)===Object.prototype)if(!i&&n.length){const t=[];for(const e of n)t.push(e[1]);r=t}else r=n}else(0,e._empty)(t)&&Object.getPrototypeOf(t)===Object.prototype&&(r=[]);if(void 0!==o){let t=o;-1===o?t=1/0:[null,!0].includes(t)&&(t=void 0),r=r.flat(t)}return r},e._dumpVal=(t,e=200,i=!1)=>{t=(0,n._jsonCopy)(t),e=(e=(0,o._int)(e,200))?e>=20?e:200:0;const r=t=>{if(Array.isArray(t)){let e=1,i="";for(let n=0;n<t.length;n++){const o=t[n];if(Object(o)!==o){e=0;break}const r=Object.keys(o);if(r.length){e=0;break}const a=r.join(",");if(n){if(a!==i){e=0;break}}else i=a}if(e&&t.length)return{count:t.length,first:r(t[0])}}return t},a=t=>{if("object"==typeof t&&t)for(let e in t)t.hasOwnProperty(e)&&(t[e]=a(t[e]));else t=(t=>{if(!("string"==typeof t&&t.length>e))return t;const i=`...(${t.length})`;return t.substring(0,e-i.length)+i})(t);return t};return a(i?r(t):t)},e._sortValues=(t,e)=>{const i=(t,e)=>"string"==typeof t&&"string"==typeof e&&"function"==typeof(null==t?void 0:t.localeCompare)?t.localeCompare(e):t>e?1:t<e?-1:0,n=t=>{if("number"==typeof t)return t>=0?1:-1;if("string"==typeof t){if((t=t.trim().toLowerCase()).startsWith("asc"))return 1;if(t.startsWith("desc"))return-1}return 1};return t.sort((()=>{if(Object(e)===e){const t=Object.entries(e);if(t.length)return(e,o)=>{let r,a;for(a=0,r=0;0===a||r<t.length;r++){const[s,p]=t[r];a=i(null==e?void 0:e[s],null==o?void 0:o[s])*n(p)}return a}}return(t,o)=>i(t,o)*n(e)})())},e._trans=(t,i,n="NULL",o)=>{const a=/\{([_0-9a-zA-Z]+)((\.[_0-9a-zA-Z]+)*)\}/g,s=(0,r._str)(t);if(!s.trim())return s;const p=`!!_${Date.now()}_!!`,c="function"==typeof o?o:void 0,l=(t,n="")=>{let o=(0,e._dotGet)(t,i,!0,0,p);if(o===p)return p;if((n=(0,r._str)(n,!0))&&(o=(0,e._dotGet)(n,o,!0,0,p)),o===p)return p;c&&(o=c(o,n,t));const a=!Array.isArray(o)&&(0,r._stringable)(o);return!1!==a?a:(0,r._str)(o,!1,!0)};if(!a.test(s)){const t=l(s);return t!==p?t:s}let u=(0,r._str)(n);return s.replace(a,((...t)=>{const e=t[1],i=t[2].replace(/^\./,"");let n=l(e,i);return n===p&&(n=u),n}))}},16:function(t,e,i){"use strict";var n=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(o,r){function a(t){try{p(n.next(t))}catch(t){r(t)}}function s(t){try{p(n.throw(t))}catch(t){r(t)}}function p(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(a,s)}p((n=n.apply(t,e||[])).next())}))},o=this&&this.__asyncValues||function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,i=t[Symbol.asyncIterator];return i?i.call(t):(t="function"==typeof __values?__values(t):t[Symbol.iterator](),e={},n("next"),n("throw"),n("return"),e[Symbol.asyncIterator]=function(){return this},e);function n(i){e[i]=t[i]&&function(e){return new Promise((function(n,o){!function(t,e,i,n){Promise.resolve(n).then((function(e){t({value:e,done:i})}),e)}(n,o,(e=t[i](e)).done,e.value)}))}}};Object.defineProperty(e,"__esModule",{value:!0}),e._pendingAbort=e._pending=e.PENDING_CACHE=e.PendingAbortError=e._resolve=e._sleep=e._asyncValues=e._asyncAll=void 0;const r=i(301);function a(t,e=!1){return n(this,void 0,void 0,(function*(){const i=Promise.resolve("function"!=typeof t?t:(()=>n(this,void 0,void 0,(function*(){return t.call(this)})))());return e?new Promise(((t,e)=>i.then(t,e))):i}))}e._asyncAll=(t,e)=>n(void 0,void 0,void 0,(function*(){return new Promise((i=>{const o=[],r=()=>i(o),a=t.length;if(!a)return r();let s=0;const p="function"==typeof e?e:void 0;for(let e=0;e<a;e++){const i=t[e];n(void 0,void 0,void 0,(function*(){return p?p(i,e,a):i})).then((t=>(o.push({status:"resolved",index:e,value:t}),t))).catch((t=>o.push({status:"rejected",index:e,reason:t}))).finally((()=>++s>=a?r():void 0))}}))})),e._asyncValues=t=>({values:()=>t,size:()=>t.length,each(t){var e,i,r,a;return n(this,void 0,void 0,(function*(){let n=this,s=!1,p=-1,c=()=>{s=!0};try{for(var l,u=!0,d=o(n);l=yield d.next(),!(e=l.done);u=!0){a=l.value,u=!1;const e=a;if(p++,s)break;yield t(e,p,n.size(),c)}}catch(t){i={error:t}}finally{try{u||e||!(r=d.return)||(yield r.call(d))}finally{if(i)throw i.error}}}))},[Symbol.asyncIterator](){let e=0;const i=this;return{next(){return n(this,void 0,void 0,(function*(){let n,o=i.size();return e>=o?{done:!0,value:n}:(n=yield Promise.resolve(t[e]),e++,{done:!1,value:n})}))}}}}),e._sleep=t=>n(void 0,void 0,void 0,(function*(){return t=!isNaN(t)&&t>=0?t:0,new Promise((e=>setTimeout((()=>e(t)),t)))})),e._resolve=a;class s extends Error{constructor(t,e){super(t),this.name="PendingAbortError",this.pending=e}}e.PendingAbortError=s,e.PENDING_CACHE={},e._pending=(t,i,o=0,p=!1)=>{if(!(t=(0,r._str)(t,!0)))throw new TypeError("Invalid pending `key` value.");if("function"!=typeof i)throw new TypeError("Invalid pending `promise` callback function.");let c,l,u=e.PENDING_CACHE[t];const d=u&&u.promise instanceof Promise&&u.resolved>-1?u.promise:void 0;if(!d||o){const c=d&&1!==o?a(d,!0).then((t=>n(void 0,void 0,void 0,(function*(){return 2===o?t:a(i)})))).catch((()=>n(void 0,void 0,void 0,(function*(){return a(i)})))):a(i);u=e.PENDING_CACHE[t]={key:t,promise:c,resolved:0,keep:p,aborted:!1,abortError:void 0,abort:function(t){const e=this;"function"!=typeof l||e.resolved||e.aborted||l(e.abortError=new s((0,r._str)(t,!0)||"aborted",e),e.aborted=!0)}}}else u.abortError=void 0,u.aborted=!1;let f=0;const m=new Promise(((i,n)=>{c=n=>{f||(f=1,i(n)),u.resolved=1,e.PENDING_CACHE[t]!==u||u.keep||delete e.PENDING_CACHE[t]},l=(i,o=!1)=>{f||(f=-1,n(i)),o||(u.resolved=-1,e.PENDING_CACHE[t]===u&&delete e.PENDING_CACHE[t])},u.promise.then(c,(t=>{"function"==typeof l&&l(t)}))}));return m.pending=u,m},e._pendingAbort=(t=!1,i,n)=>{if(i=(0,r._str)(i,!0)){const o=e.PENDING_CACHE[i];"function"==typeof(null==o?void 0:o.abort)&&o.abort(n),t&&(null==o?void 0:o.key)&&delete e.PENDING_CACHE[o.key]}else for(const i of Object.values(e.PENDING_CACHE))"function"==typeof(null==i?void 0:i.abort)&&i.abort(n),t&&(null==i?void 0:i.key)&&delete e.PENDING_CACHE[i.key]}},78:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e._queue=void 0,e._queue=()=>{const t={};let e=0,i=0;return{get count(){return i},get length(){return i-e},get isEmpty(){return 0===this.length},enqueue(e){t[i]=e,i++},dequeue(){const i=t[e];return delete t[e],e++,i},peek:()=>t[e],values:()=>Object.values(t)}}},301:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e._textMaxLength=e._errorText=e._split=e._toCsv=e._parseCsv=e._isEmail=e._isUrl=e._parseDataUri=e._hash53=e._hashCodeStr=e._hashCode=e._toUpperCase=e._toLowerCase=e._toCamelCase=e._toStudlyCase=e._toSlugCase=e._toSnakeCase=e._toSentenceCase=e._toTitleCase=e._rtrim=e._ltrim=e._trim=e._sqlEscape=e._strEscape=e._regEscape=e._strNorm=e._str=e._stringable=e._string=e._uuid=e._xuid=void 0;const n=i(917);e._xuid=()=>Math.random().toString(36).substring(2)+(new Date).getTime().toString(36),e._uuid=(t,i)=>{const n=void 0!==t&&!isNaN(parseInt(t+""))&&Number.isInteger(t)&&t>=7&&t<=64?t:16,o=()=>{let t="";for(;t.length<n;)t+=(0,e._xuid)();return t.substring(0,n)};let r="";if("string"==typeof i&&(i=i.trim())){let t=!0;const e=i.replace(/\{uuid\}/g,(()=>(t&&(t=!1),o())));r=t?e+o():e}else r=o();return r},e._string=(t,e="")=>{let i="";try{i=t instanceof Date&&!isNaN(t.getTime())?t.toISOString():String(t)}catch(t){i=e}return i},e._stringable=t=>{const i=`!${Date.now()}!`,n=(0,e._string)(t,i);return n!==i&&!/\[object \w+\]/.test(n)&&n},e._str=(t,i=!1,o=!1)=>{if("string"!=typeof t){if(null==t)return"";if("object"==typeof t){if(Array.isArray(t))return o?(0,n._jsonStringify)(t):"";const i=(0,e._stringable)(t);if(!1===i)return o?(0,n._jsonStringify)(t):"";t=i}else t=(0,e._string)(t)}return i?t.trim():t},e._strNorm=t=>(0,e._str)(t).normalize("NFD").replace(/[\u0300-\u036f]/g,""),e._regEscape=t=>(0,e._str)(t).replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),e._strEscape=t=>JSON.stringify((0,e._str)(t)).replace(/\\u([\d\w]{4})/g,((t,e)=>{const i=parseInt(e,16);return i>255?t:"\\"+encodeURIComponent(String.fromCharCode(i)).replace("%","x").replace("x0B","v")})).replace(/^"|"$/g,"").replace(/\\"/g,'"'),e._sqlEscape=t=>null==t?null:"boolean"==typeof t?t:"number"==typeof t?isNaN(t)?null:t:(t=(0,e._str)(t,!1,!0))?t.replace(/\\/g,"\\\\").replace(/\0/g,"\\0").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/'/g,"\\'").replace(/"/g,'\\"').replace(/\x1a/g,"\\Z"):t,e._trim=(t,i=" \r\n\t\f\v\0",n="")=>{if(!(t=(0,e._str)(t))||!(i=(0,e._str)(i)))return t;i=i.replace(/\{default\}/," \r\n\t\f\v\0");let o=[],r=0,a=0;for(const t of[...new Set([...i])])t&&("-"!==t?"_"!==t?o.push(t):a=1:r=1);a&&o.unshift("_"),r&&o.unshift("-");let s=`[${(0,e._regEscape)(o.join(""))}]*`,p=`^${s}|${s}$`;return["l","left"].includes(n)?p=`^${s}`:["r","right"].includes(n)&&(p=`${s}$`),t.replace(new RegExp(p,"gs"),"")},e._ltrim=(t,i=" \r\n\t\f\v\0")=>(0,e._trim)(t,i,"left"),e._rtrim=(t,i=" \r\n\t\f\v\0")=>(0,e._trim)(t,i,"right"),e._toTitleCase=(t,i=!1)=>(0,e._str)(t).replace(/\w\S*/g,(t=>t[0].toUpperCase()+(i?t.substring(1):t.substring(1).toLowerCase()))),e._toSentenceCase=(t,i=!1)=>{let n="";for(let o of(0,e._str)(t).split(/((?:\.|\?|!)\s*)/)){if(o.length){const t=o.charAt(0).toUpperCase(),e=o.length>1?o.slice(1):"";o=t+(i?e:e.toLowerCase())}n+=o}return n},e._toSnakeCase=(t,i=!1)=>{let n=(0,e._strNorm)((0,e._trim)(t)).replace(/[A-Z]+/g,(t=>t[0].toUpperCase()+t.substring(1).toLowerCase())).replace(/\W+/g," ").split(/ |\B(?=[A-Z])/).join("_").replace(/_+/g,"_").toLowerCase();return"_"===n?"":(/^_|_$/.test(n)&&i&&(n=(0,e._trim)(n,"_",["l","left","r","right"].includes(i)?i:"")),n)},e._toSlugCase=(t,i=!1)=>(0,e._toSnakeCase)(t,i).replace(/_/g,"-"),e._toStudlyCase=t=>{let i="";for(const n of(0,e._toSnakeCase)(t).split("_"))n.length&&(i+=n[0].toUpperCase()+n.substring(1).toLowerCase());return i},e._toCamelCase=t=>{let i=(0,e._toStudlyCase)(t);return i.length&&(i=i[0].toLowerCase()+i.substring(1)),i},e._toLowerCase=t=>(0,e._str)(t).toLowerCase(),e._toUpperCase=t=>(0,e._str)(t).toUpperCase(),e._hashCode=t=>{let i=0;if(!(t=(0,e._str)(t)))return i;for(let e=0;e<t.length;e++)i=(i<<5)-i+t.charCodeAt(e),i|=0;return i},e._hashCodeStr=t=>String((0,e._hashCode)(t)).replace(/^-/,"x"),e._hash53=(t,e=0)=>{isNaN(e)&&(e=0);let i=3735928559^e,n=1103547991^e;for(let e,o=0;o<t.length;o++)e=t.charCodeAt(o),i=Math.imul(i^e,2654435761),n=Math.imul(n^e,1597334677);return i=Math.imul(i^i>>>16,2246822507)^Math.imul(n^n>>>13,3266489909),n=Math.imul(n^n>>>16,2246822507)^Math.imul(i^i>>>13,3266489909),4294967296*(2097151&n)+(i>>>0)},e._parseDataUri=t=>{if(!(t=(0,e._str)(t,!0)))return;const i=/data:(?<mime>[\w/\-\.]+);(?<encoding>(charset=)?([^,]+)),(?<data>[^\s]+)/.exec(t);return i?{mime:i[1],encoding:i[2],charset:i[3]&&i[4]||"",data:i[5]}:void 0},e._isUrl=(t,i=!1)=>!(!t||"string"!=typeof t||!t.trim())&&(!(!i||!(0,e._parseDataUri)(t))||new RegExp("^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#[-a-z\\d_]*)?$","i").test(t)),e._isEmail=t=>!(!t||"string"!=typeof t||!t.trim())&&/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(t.toLowerCase()),e._parseCsv=(t,i,n)=>{const o=new RegExp("","g"),r=new RegExp("","g"),a=new RegExp("","g"),s=1===(i=(0,e._str)(i,!0)).length?i:",",p=new RegExp("(^|["+s+'\\n])"([^"]*(?:""[^"]*)*)"(?=($|['+s+"\\n]))","g"),c=(0,e._str)(t,!0).replace(/\r/g,"").replace(/\n+$/,"").replace(p,((t,e,i)=>e+i.replace(/\n/g,"").replace(/""/g,"").replace(/,/g,""))).split(/\n/),l=[];for(const t of c){if(!t.length)continue;const e=[];for(const i of t.split(s))e.push(i.replace(o,null!=n?n:"\n").replace(r,'"').replace(a,","));l.push(e)}return l},e._toCsv=(t,i,n)=>{const o=1===(i=(0,e._str)(i,!0)).length?i:",",r=[],a=t=>{let i=(0,e._str)(t);return i.length?("string"==typeof n&&i.indexOf(n)>-1&&"\n"!==n&&(i=i.replace(new RegExp(n,"g"),"\n")),i=i.replace(/\r/g,"").replace(/\n+$/,"").replace(/"/g,'""'),(i.indexOf(o)>-1||i.indexOf('"')>-1||i.indexOf("\n")>-1||/^\s+|\s+$/.test(i))&&(i=`"${i}"`),i):i};if(t&&"object"==typeof t&&t[Symbol.iterator]){const e=[],i=Object.values([...t]);for(const t of i)"object"==typeof t&&t[Symbol.iterator]&&e.push(t);if(e.length)for(const t of i){const e=[];for(const i of t)e.push(a(i));r.push(e)}else{const t=[];for(const e of i)t.push(a(e));r.push(t)}}else if(t=(0,e._str)(t,!0)){const i=(0,e._parseCsv)(t,o,n);for(const t of i){const e=[];for(const i of t)e.push(a(i));r.push(e)}}let s="",p=0;for(let t=0;t<r.length;t++){const e=r[t].join(o).trim();e&&(p?s+="\n"+e:(p=1,s+=e))}return s},e._split=(t,i,n)=>{var o;let r,a=(0,e._str)(t);"string"==typeof i?r=new RegExp((0,e._regEscape)((0,e._str)(i))):i instanceof RegExp&&(r=i),r&&(r=new RegExp(r,[...new Set(("g"+r.flags).split(""))].join(""))),n=n&&!isNaN(n=parseInt(n+""))&&n>=0?n:void 0;const s=r?a.split(r,n):a.split(void 0,n),p=r?a.match(r)||[]:a.match(void 0)||[],c=[];for(let t=0;t<s.length;t++){const e=s[t],i=null!==(o=p[t])&&void 0!==o?o:"";c.push([e,i])}return c},e._errorText=t=>{const i={},n=o=>{if("object"!=typeof o||!o){const t=(0,e._str)(o,!0);return void(t&&(i[t.toLowerCase()]=t))}if(Array.isArray(o)){for(const t of o)n(t);return}if(o instanceof Error){let n=(0,e._str)(t.name,!0);["Error","TypeError"].includes(n)&&(n="");const o=(0,e._str)(t.message,!0),r=o?(n?n+" ":"")+o:"";return void(r&&(i[r.toLowerCase()]=r))}if(o.response)return n(o.response);if(o.body)return n(o.body);if(o.error)return n(o.error);if(o.message)return n(o.message);const r=(0,e._str)(o,!0,!0);r&&(i[r.toLowerCase()]=r)};return n(t),Object.values(i).join("\n")},e._textMaxLength=(t,i=1e3,n=0)=>{const o=(t=(0,e._str)(t)).length,r=!isNaN(i=parseInt(i))&&i>0?i:1e3;if(o<=r)return t;const a=2===n?`...(${t.length})`:1===n?"...":"",s=a.length,p=r-s;return p>s&&o>p?t.substring(0,p)+a:t.substring(0,r)}},377:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var o=Object.getOwnPropertyDescriptor(e,i);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,o)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(586),e),o(i(501),e),o(i(473),e),o(i(740),e),o(i(47),e),o(i(925),e),o(i(802),e),o(i(597),e),o(i(917),e),o(i(782),e),o(i(962),e),o(i(16),e),o(i(78),e),o(i(301),e)},154:t=>{"use strict";t.exports=JSON.parse('{"123":"application/vnd.lotus-1-2-3","tmp":"text/x-tmp","php":"text/x-php","scss":"text/x-scss","ts":"text/x-typescript","tsx":"application/javascript","jsx":"application/javascript","ez":"application/andrew-inset","aw":"application/applixware","atom":"application/atom+xml","atomcat":"application/atomcat+xml","atomsvc":"application/atomsvc+xml","ccxml":"application/ccxml+xml","cdmia":"application/cdmi-capability","cdmic":"application/cdmi-container","cdmid":"application/cdmi-domain","cdmio":"application/cdmi-object","cdmiq":"application/cdmi-queue","cu":"application/cu-seeme","davmount":"application/davmount+xml","dbk":"application/docbook+xml","dssc":"application/dssc+der","xdssc":"application/dssc+xml","ecma":"application/ecmascript","emma":"application/emma+xml","epub":"application/epub+zip","exi":"application/exi","pfr":"application/font-tdpfr","gml":"application/gml+xml","gpx":"application/gpx+xml","gxf":"application/gxf","stk":"application/hyperstudio","ink":"application/inkml+xml","inkml":"application/inkml+xml","ipfix":"application/ipfix","jar":"application/java-archive","ser":"application/java-serialized-object","class":"application/java-vm","json":"application/json","jsonml":"application/jsonml+json","lostxml":"application/lost+xml","hqx":"application/mac-binhex40","cpt":"application/mac-compactpro","mads":"application/mads+xml","mrc":"application/marc","mrcx":"application/marcxml+xml","ma":"application/mathematica","nb":"application/mathematica","mb":"application/mathematica","mathml":"application/mathml+xml","mbox":"application/mbox","mscml":"application/mediaservercontrol+xml","metalink":"application/metalink+xml","meta4":"application/metalink4+xml","mets":"application/mets+xml","mods":"application/mods+xml","m21":"application/mp21","mp21":"application/mp21","mp4s":"application/mp4","doc":"application/msword","dot":"application/msword","mxf":"application/mxf","bin":"application/octet-stream","dms":"application/octet-stream","lrf":"application/octet-stream","mar":"application/octet-stream","so":"application/octet-stream","dist":"application/octet-stream","distz":"application/octet-stream","pkg":"application/octet-stream","bpk":"application/octet-stream","dump":"application/octet-stream","elc":"application/octet-stream","deploy":"application/octet-stream","oda":"application/oda","opf":"application/oebps-package+xml","ogx":"application/ogg","omdoc":"application/omdoc+xml","onetoc":"application/onenote","onetoc2":"application/onenote","onetmp":"application/onenote","onepkg":"application/onenote","oxps":"application/oxps","xer":"application/patch-ops-error+xml","pdf":"application/pdf","pgp":"application/pgp-encrypted","asc":"application/pgp-signature","sig":"application/pgp-signature","prf":"application/pics-rules","p10":"application/pkcs10","p7m":"application/pkcs7-mime","p7c":"application/pkcs7-mime","p7s":"application/pkcs7-signature","p8":"application/pkcs8","ac":"application/pkix-attr-cert","cer":"application/pkix-cert","crl":"application/pkix-crl","pkipath":"application/pkix-pkipath","pki":"application/pkixcmp","pls":"application/pls+xml","ai":"application/postscript","eps":"application/postscript","ps":"application/postscript","cww":"application/prs.cww","pskcxml":"application/pskc+xml","rdf":"application/rdf+xml","rif":"application/reginfo+xml","rnc":"application/relax-ng-compact-syntax","rl":"application/resource-lists+xml","rld":"application/resource-lists-diff+xml","rs":"application/rls-services+xml","gbr":"application/rpki-ghostbusters","mft":"application/rpki-manifest","roa":"application/rpki-roa","rsd":"application/rsd+xml","rss":"application/rss+xml","rtf":"application/rtf","sbml":"application/sbml+xml","scq":"application/scvp-cv-request","scs":"application/scvp-cv-response","spq":"application/scvp-vp-request","spp":"application/scvp-vp-response","sdp":"application/sdp","setpay":"application/set-payment-initiation","setreg":"application/set-registration-initiation","shf":"application/shf+xml","smi":"application/smil+xml","smil":"application/smil+xml","rq":"application/sparql-query","srx":"application/sparql-results+xml","gram":"application/srgs","grxml":"application/srgs+xml","sru":"application/sru+xml","ssdl":"application/ssdl+xml","ssml":"application/ssml+xml","tei":"application/tei+xml","teicorpus":"application/tei+xml","tfi":"application/thraud+xml","tsd":"application/timestamped-data","plb":"application/vnd.3gpp.pic-bw-large","psb":"application/vnd.3gpp.pic-bw-small","pvb":"application/vnd.3gpp.pic-bw-var","tcap":"application/vnd.3gpp2.tcap","pwn":"application/vnd.3m.post-it-notes","aso":"application/vnd.accpac.simply.aso","imp":"application/vnd.accpac.simply.imp","acu":"application/vnd.acucobol","atc":"application/vnd.acucorp","acutc":"application/vnd.acucorp","air":"application/vnd.adobe.air-application-installer-package+zip","fcdt":"application/vnd.adobe.formscentral.fcdt","fxp":"application/vnd.adobe.fxp","fxpl":"application/vnd.adobe.fxp","xdp":"application/vnd.adobe.xdp+xml","xfdf":"application/vnd.adobe.xfdf","ahead":"application/vnd.ahead.space","azf":"application/vnd.airzip.filesecure.azf","azs":"application/vnd.airzip.filesecure.azs","azw":"application/vnd.amazon.ebook","acc":"application/vnd.americandynamics.acc","ami":"application/vnd.amiga.ami","apk":"application/vnd.android.package-archive","cii":"application/vnd.anser-web-certificate-issue-initiation","fti":"application/vnd.anser-web-funds-transfer-initiation","atx":"application/vnd.antix.game-component","mpkg":"application/vnd.apple.installer+xml","m3u8":"application/vnd.apple.mpegurl","swi":"application/vnd.aristanetworks.swi","iota":"application/vnd.astraea-software.iota","aep":"application/vnd.audiograph","mpm":"application/vnd.blueice.multipass","bmi":"application/vnd.bmi","rep":"application/vnd.businessobjects","cdxml":"application/vnd.chemdraw+xml","mmd":"application/vnd.chipnuts.karaoke-mmd","cdy":"application/vnd.cinderella","cla":"application/vnd.claymore","rp9":"application/vnd.cloanto.rp9","c4g":"application/vnd.clonk.c4group","c4d":"application/vnd.clonk.c4group","c4f":"application/vnd.clonk.c4group","c4p":"application/vnd.clonk.c4group","c4u":"application/vnd.clonk.c4group","c11amc":"application/vnd.cluetrust.cartomobile-config","c11amz":"application/vnd.cluetrust.cartomobile-config-pkg","csp":"application/vnd.commonspace","cdbcmsg":"application/vnd.contact.cmsg","cmc":"application/vnd.cosmocaller","clkx":"application/vnd.crick.clicker","clkk":"application/vnd.crick.clicker.keyboard","clkp":"application/vnd.crick.clicker.palette","clkt":"application/vnd.crick.clicker.template","clkw":"application/vnd.crick.clicker.wordbank","wbs":"application/vnd.criticaltools.wbs+xml","pml":"application/vnd.ctc-posml","ppd":"application/vnd.cups-ppd","car":"application/vnd.curl.car","pcurl":"application/vnd.curl.pcurl","dart":"application/vnd.dart","rdz":"application/vnd.data-vision.rdz","uvf":"application/vnd.dece.data","uvvf":"application/vnd.dece.data","uvd":"application/vnd.dece.data","uvvd":"application/vnd.dece.data","uvt":"application/vnd.dece.ttml+xml","uvvt":"application/vnd.dece.ttml+xml","uvx":"application/vnd.dece.unspecified","uvvx":"application/vnd.dece.unspecified","uvz":"application/vnd.dece.zip","uvvz":"application/vnd.dece.zip","fe_launch":"application/vnd.denovo.fcselayout-link","dna":"application/vnd.dna","mlp":"application/vnd.dolby.mlp","dpg":"application/vnd.dpgraph","dfac":"application/vnd.dreamfactory","kpxx":"application/vnd.ds-keypoint","ait":"application/vnd.dvb.ait","svc":"application/vnd.dvb.service","geo":"application/vnd.dynageo","mag":"application/vnd.ecowin.chart","nml":"application/vnd.enliven","esf":"application/vnd.epson.esf","msf":"application/vnd.epson.msf","qam":"application/vnd.epson.quickanime","slt":"application/vnd.epson.salt","ssf":"application/vnd.epson.ssf","es3":"application/vnd.eszigno3+xml","et3":"application/vnd.eszigno3+xml","ez2":"application/vnd.ezpix-album","ez3":"application/vnd.ezpix-package","fdf":"application/vnd.fdf","mseed":"application/vnd.fdsn.mseed","seed":"application/vnd.fdsn.seed","dataless":"application/vnd.fdsn.seed","gph":"application/vnd.flographit","ftc":"application/vnd.fluxtime.clip","fm":"application/vnd.framemaker","frame":"application/vnd.framemaker","maker":"application/vnd.framemaker","book":"application/vnd.framemaker","fnc":"application/vnd.frogans.fnc","ltf":"application/vnd.frogans.ltf","fsc":"application/vnd.fsc.weblaunch","oas":"application/vnd.fujitsu.oasys","oa2":"application/vnd.fujitsu.oasys2","oa3":"application/vnd.fujitsu.oasys3","fg5":"application/vnd.fujitsu.oasysgp","bh2":"application/vnd.fujitsu.oasysprs","ddd":"application/vnd.fujixerox.ddd","xdw":"application/vnd.fujixerox.docuworks","xbd":"application/vnd.fujixerox.docuworks.binder","fzs":"application/vnd.fuzzysheet","txd":"application/vnd.genomatix.tuxedo","ggb":"application/vnd.geogebra.file","ggt":"application/vnd.geogebra.tool","gex":"application/vnd.geometry-explorer","gre":"application/vnd.geometry-explorer","gxt":"application/vnd.geonext","g2w":"application/vnd.geoplan","g3w":"application/vnd.geospace","gmx":"application/vnd.gmx","kml":"application/vnd.google-earth.kml+xml","kmz":"application/vnd.google-earth.kmz","gqf":"application/vnd.grafeq","gqs":"application/vnd.grafeq","gac":"application/vnd.groove-account","ghf":"application/vnd.groove-help","gim":"application/vnd.groove-identity-message","grv":"application/vnd.groove-injector","gtm":"application/vnd.groove-tool-message","tpl":"application/vnd.groove-tool-template","vcg":"application/vnd.groove-vcard","hal":"application/vnd.hal+xml","zmm":"application/vnd.handheld-entertainment+xml","hbci":"application/vnd.hbci","les":"application/vnd.hhe.lesson-player","hpgl":"application/vnd.hp-hpgl","hpid":"application/vnd.hp-hpid","hps":"application/vnd.hp-hps","jlt":"application/vnd.hp-jlyt","pcl":"application/vnd.hp-pcl","pclxl":"application/vnd.hp-pclxl","sfd-hdstx":"application/vnd.hydrostatix.sof-data","mpy":"application/vnd.ibm.minipay","afp":"application/vnd.ibm.modcap","listafp":"application/vnd.ibm.modcap","list3820":"application/vnd.ibm.modcap","irm":"application/vnd.ibm.rights-management","sc":"application/vnd.ibm.secure-container","icc":"application/vnd.iccprofile","icm":"application/vnd.iccprofile","igl":"application/vnd.igloader","ivp":"application/vnd.immervision-ivp","ivu":"application/vnd.immervision-ivu","igm":"application/vnd.insors.igm","xpw":"application/vnd.intercon.formnet","xpx":"application/vnd.intercon.formnet","i2g":"application/vnd.intergeo","qbo":"application/vnd.intu.qbo","qfx":"application/vnd.intu.qfx","rcprofile":"application/vnd.ipunplugged.rcprofile","irp":"application/vnd.irepository.package+xml","xpr":"application/vnd.is-xpr","fcs":"application/vnd.isac.fcs","jam":"application/vnd.jam","rms":"application/vnd.jcp.javame.midlet-rms","jisp":"application/vnd.jisp","joda":"application/vnd.joost.joda-archive","ktz":"application/vnd.kahootz","ktr":"application/vnd.kahootz","karbon":"application/vnd.kde.karbon","chrt":"application/vnd.kde.kchart","kfo":"application/vnd.kde.kformula","flw":"application/vnd.kde.kivio","kon":"application/vnd.kde.kontour","kpr":"application/vnd.kde.kpresenter","kpt":"application/vnd.kde.kpresenter","ksp":"application/vnd.kde.kspread","kwd":"application/vnd.kde.kword","kwt":"application/vnd.kde.kword","htke":"application/vnd.kenameaapp","kia":"application/vnd.kidspiration","kne":"application/vnd.kinar","knp":"application/vnd.kinar","skp":"application/vnd.koan","skd":"application/vnd.koan","skt":"application/vnd.koan","skm":"application/vnd.koan","sse":"application/vnd.kodak-descriptor","lasxml":"application/vnd.las.las+xml","lbd":"application/vnd.llamagraphics.life-balance.desktop","lbe":"application/vnd.llamagraphics.life-balance.exchange+xml","apr":"application/vnd.lotus-approach","pre":"application/vnd.lotus-freelance","nsf":"application/vnd.lotus-notes","org":"application/vnd.lotus-organizer","scm":"application/vnd.lotus-screencam","lwp":"application/vnd.lotus-wordpro","portpkg":"application/vnd.macports.portpkg","mcd":"application/vnd.mcd","mc1":"application/vnd.medcalcdata","cdkey":"application/vnd.mediastation.cdkey","mwf":"application/vnd.mfer","mfm":"application/vnd.mfmp","flo":"application/vnd.micrografx.flo","igx":"application/vnd.micrografx.igx","mif":"application/vnd.mif","daf":"application/vnd.mobius.daf","dis":"application/vnd.mobius.dis","mbk":"application/vnd.mobius.mbk","mqy":"application/vnd.mobius.mqy","msl":"application/vnd.mobius.msl","plc":"application/vnd.mobius.plc","txf":"application/vnd.mobius.txf","mpn":"application/vnd.mophun.application","mpc":"application/vnd.mophun.certificate","xul":"application/vnd.mozilla.xul+xml","cil":"application/vnd.ms-artgalry","cab":"application/vnd.ms-cab-compressed","xls":"application/vnd.ms-excel","xlm":"application/vnd.ms-excel","xla":"application/vnd.ms-excel","xlc":"application/vnd.ms-excel","xlt":"application/vnd.ms-excel","xlw":"application/vnd.ms-excel","xlam":"application/vnd.ms-excel.addin.macroenabled.12","xlsb":"application/vnd.ms-excel.sheet.binary.macroenabled.12","xlsm":"application/vnd.ms-excel.sheet.macroenabled.12","xltm":"application/vnd.ms-excel.template.macroenabled.12","eot":"application/vnd.ms-fontobject","chm":"application/vnd.ms-htmlhelp","ims":"application/vnd.ms-ims","lrm":"application/vnd.ms-lrm","thmx":"application/vnd.ms-officetheme","cat":"application/vnd.ms-pki.seccat","stl":"application/vnd.ms-pki.stl","ppt":"application/vnd.ms-powerpoint","pps":"application/vnd.ms-powerpoint","pot":"application/vnd.ms-powerpoint","ppam":"application/vnd.ms-powerpoint.addin.macroenabled.12","pptm":"application/vnd.ms-powerpoint.presentation.macroenabled.12","sldm":"application/vnd.ms-powerpoint.slide.macroenabled.12","ppsm":"application/vnd.ms-powerpoint.slideshow.macroenabled.12","potm":"application/vnd.ms-powerpoint.template.macroenabled.12","mpp":"application/vnd.ms-project","mpt":"application/vnd.ms-project","docm":"application/vnd.ms-word.document.macroenabled.12","dotm":"application/vnd.ms-word.template.macroenabled.12","wps":"application/vnd.ms-works","wks":"application/vnd.ms-works","wcm":"application/vnd.ms-works","wdb":"application/vnd.ms-works","wpl":"application/vnd.ms-wpl","xps":"application/vnd.ms-xpsdocument","mseq":"application/vnd.mseq","mus":"application/vnd.musician","msty":"application/vnd.muvee.style","taglet":"application/vnd.mynfc","nlu":"application/vnd.neurolanguage.nlu","ntf":"application/vnd.nitf","nitf":"application/vnd.nitf","nnd":"application/vnd.noblenet-directory","nns":"application/vnd.noblenet-sealer","nnw":"application/vnd.noblenet-web","ngdat":"application/vnd.nokia.n-gage.data","n-gage":"application/vnd.nokia.n-gage.symbian.install","rpst":"application/vnd.nokia.radio-preset","rpss":"application/vnd.nokia.radio-presets","edm":"application/vnd.novadigm.edm","edx":"application/vnd.novadigm.edx","ext":"application/vnd.novadigm.ext","odc":"application/vnd.oasis.opendocument.chart","otc":"application/vnd.oasis.opendocument.chart-template","odb":"application/vnd.oasis.opendocument.database","odf":"application/vnd.oasis.opendocument.formula","odft":"application/vnd.oasis.opendocument.formula-template","odg":"application/vnd.oasis.opendocument.graphics","otg":"application/vnd.oasis.opendocument.graphics-template","odi":"application/vnd.oasis.opendocument.image","oti":"application/vnd.oasis.opendocument.image-template","odp":"application/vnd.oasis.opendocument.presentation","otp":"application/vnd.oasis.opendocument.presentation-template","ods":"application/vnd.oasis.opendocument.spreadsheet","ots":"application/vnd.oasis.opendocument.spreadsheet-template","odt":"application/vnd.oasis.opendocument.text","odm":"application/vnd.oasis.opendocument.text-master","ott":"application/vnd.oasis.opendocument.text-template","oth":"application/vnd.oasis.opendocument.text-web","xo":"application/vnd.olpc-sugar","dd2":"application/vnd.oma.dd2+xml","oxt":"application/vnd.openofficeorg.extension","pptx":"application/vnd.openxmlformats-officedocument.presentationml.presentation","sldx":"application/vnd.openxmlformats-officedocument.presentationml.slide","ppsx":"application/vnd.openxmlformats-officedocument.presentationml.slideshow","potx":"application/vnd.openxmlformats-officedocument.presentationml.template","xlsx":"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet","xltx":"application/vnd.openxmlformats-officedocument.spreadsheetml.template","docx":"application/vnd.openxmlformats-officedocument.wordprocessingml.document","dotx":"application/vnd.openxmlformats-officedocument.wordprocessingml.template","mgp":"application/vnd.osgeo.mapguide.package","dp":"application/vnd.osgi.dp","esa":"application/vnd.osgi.subsystem","pdb":"application/vnd.palm","pqa":"application/vnd.palm","oprc":"application/vnd.palm","paw":"application/vnd.pawaafile","str":"application/vnd.pg.format","ei6":"application/vnd.pg.osasli","efif":"application/vnd.picsel","wg":"application/vnd.pmi.widget","plf":"application/vnd.pocketlearn","pbd":"application/vnd.powerbuilder6","box":"application/vnd.previewsystems.box","mgz":"application/vnd.proteus.magazine","qps":"application/vnd.publishare-delta-tree","ptid":"application/vnd.pvi.ptid1","qxd":"application/vnd.quark.quarkxpress","qxt":"application/vnd.quark.quarkxpress","qwd":"application/vnd.quark.quarkxpress","qwt":"application/vnd.quark.quarkxpress","qxl":"application/vnd.quark.quarkxpress","qxb":"application/vnd.quark.quarkxpress","bed":"application/vnd.realvnc.bed","mxl":"application/vnd.recordare.musicxml","musicxml":"application/vnd.recordare.musicxml+xml","cryptonote":"application/vnd.rig.cryptonote","cod":"application/vnd.rim.cod","rm":"application/vnd.rn-realmedia","rmvb":"application/vnd.rn-realmedia-vbr","link66":"application/vnd.route66.link66+xml","st":"application/vnd.sailingtracker.track","see":"application/vnd.seemail","sema":"application/vnd.sema","semd":"application/vnd.semd","semf":"application/vnd.semf","ifm":"application/vnd.shana.informed.formdata","itp":"application/vnd.shana.informed.formtemplate","iif":"application/vnd.shana.informed.interchange","ipk":"application/vnd.shana.informed.package","twd":"application/vnd.simtech-mindmapper","twds":"application/vnd.simtech-mindmapper","mmf":"application/vnd.smaf","teacher":"application/vnd.smart.teacher","sdkm":"application/vnd.solent.sdkm+xml","sdkd":"application/vnd.solent.sdkm+xml","dxp":"application/vnd.spotfire.dxp","sfs":"application/vnd.spotfire.sfs","sdc":"application/vnd.stardivision.calc","sda":"application/vnd.stardivision.draw","sdd":"application/vnd.stardivision.impress","smf":"application/vnd.stardivision.math","sdw":"application/vnd.stardivision.writer","vor":"application/vnd.stardivision.writer","sgl":"application/vnd.stardivision.writer-global","smzip":"application/vnd.stepmania.package","sm":"application/vnd.stepmania.stepchart","sxc":"application/vnd.sun.xml.calc","stc":"application/vnd.sun.xml.calc.template","sxd":"application/vnd.sun.xml.draw","std":"application/vnd.sun.xml.draw.template","sxi":"application/vnd.sun.xml.impress","sti":"application/vnd.sun.xml.impress.template","sxm":"application/vnd.sun.xml.math","sxw":"application/vnd.sun.xml.writer","sxg":"application/vnd.sun.xml.writer.global","stw":"application/vnd.sun.xml.writer.template","sus":"application/vnd.sus-calendar","susp":"application/vnd.sus-calendar","svd":"application/vnd.svd","sis":"application/vnd.symbian.install","sisx":"application/vnd.symbian.install","xsm":"application/vnd.syncml+xml","bdm":"application/vnd.syncml.dm+wbxml","xdm":"application/vnd.syncml.dm+xml","tao":"application/vnd.tao.intent-module-archive","pcap":"application/vnd.tcpdump.pcap","cap":"application/vnd.tcpdump.pcap","dmp":"application/vnd.tcpdump.pcap","tmo":"application/vnd.tmobile-livetv","tpt":"application/vnd.trid.tpt","mxs":"application/vnd.triscape.mxs","tra":"application/vnd.trueapp","ufd":"application/vnd.ufdl","ufdl":"application/vnd.ufdl","utz":"application/vnd.uiq.theme","umj":"application/vnd.umajin","unityweb":"application/vnd.unity","uoml":"application/vnd.uoml+xml","vcx":"application/vnd.vcx","vsd":"application/vnd.visio","vst":"application/vnd.visio","vss":"application/vnd.visio","vsw":"application/vnd.visio","vis":"application/vnd.visionary","vsf":"application/vnd.vsf","wbxml":"application/vnd.wap.wbxml","wmlc":"application/vnd.wap.wmlc","wmlsc":"application/vnd.wap.wmlscriptc","wtb":"application/vnd.webturbo","nbp":"application/vnd.wolfram.player","wpd":"application/vnd.wordperfect","wqd":"application/vnd.wqd","stf":"application/vnd.wt.stf","xar":"application/vnd.xara","xfdl":"application/vnd.xfdl","hvd":"application/vnd.yamaha.hv-dic","hvs":"application/vnd.yamaha.hv-script","hvp":"application/vnd.yamaha.hv-voice","osf":"application/vnd.yamaha.openscoreformat","osfpvg":"application/vnd.yamaha.openscoreformat.osfpvg+xml","saf":"application/vnd.yamaha.smaf-audio","spf":"application/vnd.yamaha.smaf-phrase","cmp":"application/vnd.yellowriver-custom-menu","zir":"application/vnd.zul","zirz":"application/vnd.zul","zaz":"application/vnd.zzazz.deck+xml","vxml":"application/voicexml+xml","wgt":"application/widget","hlp":"application/winhlp","wsdl":"application/wsdl+xml","wspolicy":"application/wspolicy+xml","7z":"application/x-7z-compressed","abw":"application/x-abiword","ace":"application/x-ace-compressed","dmg":"application/x-apple-diskimage","aab":"application/x-authorware-bin","x32":"application/x-authorware-bin","u32":"application/x-authorware-bin","vox":"application/x-authorware-bin","aam":"application/x-authorware-map","aas":"application/x-authorware-seg","bcpio":"application/x-bcpio","torrent":"application/x-bittorrent","blb":"application/x-blorb","blorb":"application/x-blorb","bz":"application/x-bzip","bz2":"application/x-bzip2","boz":"application/x-bzip2","cbr":"application/x-cbr","cba":"application/x-cbr","cbt":"application/x-cbr","cbz":"application/x-cbr","cb7":"application/x-cbr","vcd":"application/x-cdlink","cfs":"application/x-cfs-compressed","chat":"application/x-chat","pgn":"application/x-chess-pgn","nsc":"application/x-conference","cpio":"application/x-cpio","csh":"application/x-csh","deb":"application/x-debian-package","udeb":"application/x-debian-package","dgc":"application/x-dgc-compressed","dir":"application/x-director","dcr":"application/x-director","dxr":"application/x-director","cst":"application/x-director","cct":"application/x-director","cxt":"application/x-director","w3d":"application/x-director","fgd":"application/x-director","swa":"application/x-director","wad":"application/x-doom","ncx":"application/x-dtbncx+xml","dtb":"application/x-dtbook+xml","res":"application/x-dtbresource+xml","dvi":"application/x-dvi","evy":"application/x-envoy","eva":"application/x-eva","bdf":"application/x-font-bdf","gsf":"application/x-font-ghostscript","psf":"application/x-font-linux-psf","pcf":"application/x-font-pcf","snf":"application/x-font-snf","pfa":"application/x-font-type1","pfb":"application/x-font-type1","pfm":"application/x-font-type1","afm":"application/x-font-type1","arc":"application/x-freearc","spl":"application/x-futuresplash","gca":"application/x-gca-compressed","ulx":"application/x-glulx","gnumeric":"application/x-gnumeric","gramps":"application/x-gramps-xml","gtar":"application/x-gtar","hdf":"application/x-hdf","install":"application/x-install-instructions","iso":"application/x-iso9660-image","jnlp":"application/x-java-jnlp-file","latex":"application/x-latex","lzh":"application/x-lzh-compressed","lha":"application/x-lzh-compressed","mie":"application/x-mie","prc":"application/x-mobipocket-ebook","mobi":"application/x-mobipocket-ebook","application":"application/x-ms-application","lnk":"application/x-ms-shortcut","wmd":"application/x-ms-wmd","wmz":"application/x-ms-wmz","xbap":"application/x-ms-xbap","mdb":"application/x-msaccess","obd":"application/x-msbinder","crd":"application/x-mscardfile","clp":"application/x-msclip","exe":"application/x-msdownload","dll":"application/x-msdownload","com":"application/x-msdownload","bat":"application/x-msdownload","msi":"application/x-msdownload","mvb":"application/x-msmediaview","m13":"application/x-msmediaview","m14":"application/x-msmediaview","wmf":"application/x-msmetafile","emf":"application/x-msmetafile","emz":"application/x-msmetafile","mny":"application/x-msmoney","pub":"application/x-mspublisher","scd":"application/x-msschedule","trm":"application/x-msterminal","wri":"application/x-mswrite","nc":"application/x-netcdf","cdf":"application/x-netcdf","nzb":"application/x-nzb","p12":"application/x-pkcs12","pfx":"application/x-pkcs12","p7b":"application/x-pkcs7-certificates","spc":"application/x-pkcs7-certificates","p7r":"application/x-pkcs7-certreqresp","rar":"application/x-rar-compressed","ris":"application/x-research-info-systems","sh":"application/x-sh","shar":"application/x-shar","swf":"application/x-shockwave-flash","xap":"application/x-silverlight-app","sql":"application/x-sql","sit":"application/x-stuffit","sitx":"application/x-stuffitx","srt":"application/x-subrip","sv4cpio":"application/x-sv4cpio","sv4crc":"application/x-sv4crc","t3":"application/x-t3vm-image","gam":"application/x-tads","tar":"application/x-tar","tcl":"application/x-tcl","tex":"application/x-tex","tfm":"application/x-tex-tfm","texinfo":"application/x-texinfo","texi":"application/x-texinfo","obj":"application/x-tgif","ustar":"application/x-ustar","src":"application/x-wais-source","der":"application/x-x509-ca-cert","crt":"application/x-x509-ca-cert","fig":"application/x-xfig","xlf":"application/x-xliff+xml","xpi":"application/x-xpinstall","xz":"application/x-xz","z1":"application/x-zmachine","z2":"application/x-zmachine","z3":"application/x-zmachine","z4":"application/x-zmachine","z5":"application/x-zmachine","z6":"application/x-zmachine","z7":"application/x-zmachine","z8":"application/x-zmachine","xaml":"application/xaml+xml","xdf":"application/xcap-diff+xml","xenc":"application/xenc+xml","xhtml":"application/xhtml+xml","xht":"application/xhtml+xml","xml":"application/xml","xsl":"application/xml","dtd":"application/xml-dtd","xop":"application/xop+xml","xpl":"application/xproc+xml","xslt":"application/xslt+xml","xspf":"application/xspf+xml","mxml":"application/xv+xml","xhvml":"application/xv+xml","xvml":"application/xv+xml","xvm":"application/xv+xml","yang":"application/yang","yin":"application/yin+xml","zip":"application/zip","adp":"audio/adpcm","au":"audio/basic","snd":"audio/basic","mid":"audio/midi","midi":"audio/midi","kar":"audio/midi","rmi":"audio/midi","m4a":"audio/mp4","mp4a":"audio/mp4","mpga":"audio/mpeg","mp2":"audio/mpeg","mp2a":"audio/mpeg","mp3":"audio/mpeg","m2a":"audio/mpeg","m3a":"audio/mpeg","oga":"audio/ogg","ogg":"audio/ogg","spx":"audio/ogg","opus":"audio/ogg","s3m":"audio/s3m","sil":"audio/silk","uva":"audio/vnd.dece.audio","uvva":"audio/vnd.dece.audio","eol":"audio/vnd.digital-winds","dra":"audio/vnd.dra","dts":"audio/vnd.dts","dtshd":"audio/vnd.dts.hd","lvp":"audio/vnd.lucent.voice","pya":"audio/vnd.ms-playready.media.pya","ecelp4800":"audio/vnd.nuera.ecelp4800","ecelp7470":"audio/vnd.nuera.ecelp7470","ecelp9600":"audio/vnd.nuera.ecelp9600","rip":"audio/vnd.rip","weba":"audio/webm","aac":"audio/x-aac","aif":"audio/x-aiff","aiff":"audio/x-aiff","aifc":"audio/x-aiff","caf":"audio/x-caf","flac":"audio/x-flac","mka":"audio/x-matroska","m3u":"audio/x-mpegurl","wax":"audio/x-ms-wax","wma":"audio/x-ms-wma","ram":"audio/x-pn-realaudio","ra":"audio/x-pn-realaudio","rmp":"audio/x-pn-realaudio-plugin","wav":"audio/x-wav","xm":"audio/xm","cdx":"chemical/x-cdx","cif":"chemical/x-cif","cmdf":"chemical/x-cmdf","cml":"chemical/x-cml","csml":"chemical/x-csml","xyz":"chemical/x-xyz","ttc":"font/collection","otf":"font/otf","ttf":"font/ttf","woff":"font/woff","woff2":"font/woff2","bmp":"image/bmp","cgm":"image/cgm","g3":"image/g3fax","gif":"image/gif","ief":"image/ief","jpeg":"image/jpeg","jpg":"image/jpeg","jpe":"image/jpeg","ktx":"image/ktx","png":"image/png","btif":"image/prs.btif","sgi":"image/sgi","svg":"image/svg+xml","svgz":"image/svg+xml","tiff":"image/tiff","tif":"image/tiff","psd":"image/vnd.adobe.photoshop","uvi":"image/vnd.dece.graphic","uvvi":"image/vnd.dece.graphic","uvg":"image/vnd.dece.graphic","uvvg":"image/vnd.dece.graphic","djvu":"image/vnd.djvu","djv":"image/vnd.djvu","sub":"image/vnd.dvb.subtitle","dwg":"image/vnd.dwg","dxf":"image/vnd.dxf","fbs":"image/vnd.fastbidsheet","fpx":"image/vnd.fpx","fst":"image/vnd.fst","mmr":"image/vnd.fujixerox.edmics-mmr","rlc":"image/vnd.fujixerox.edmics-rlc","mdi":"image/vnd.ms-modi","wdp":"image/vnd.ms-photo","npx":"image/vnd.net-fpx","wbmp":"image/vnd.wap.wbmp","xif":"image/vnd.xiff","webp":"image/webp","3ds":"image/x-3ds","ras":"image/x-cmu-raster","cmx":"image/x-cmx","fh":"image/x-freehand","fhc":"image/x-freehand","fh4":"image/x-freehand","fh5":"image/x-freehand","fh7":"image/x-freehand","ico":"image/x-icon","sid":"image/x-mrsid-image","pcx":"image/x-pcx","pic":"image/x-pict","pct":"image/x-pict","pnm":"image/x-portable-anymap","pbm":"image/x-portable-bitmap","pgm":"image/x-portable-graymap","ppm":"image/x-portable-pixmap","rgb":"image/x-rgb","tga":"image/x-tga","xbm":"image/x-xbitmap","xpm":"image/x-xpixmap","xwd":"image/x-xwindowdump","eml":"message/rfc822","mime":"message/rfc822","igs":"model/iges","iges":"model/iges","msh":"model/mesh","mesh":"model/mesh","silo":"model/mesh","dae":"model/vnd.collada+xml","dwf":"model/vnd.dwf","gdl":"model/vnd.gdl","gtw":"model/vnd.gtw","mts":"model/vnd.mts","vtu":"model/vnd.vtu","wrl":"model/vrml","vrml":"model/vrml","x3db":"model/x3d+binary","x3dbz":"model/x3d+binary","x3dv":"model/x3d+vrml","x3dvz":"model/x3d+vrml","x3d":"model/x3d+xml","x3dz":"model/x3d+xml","appcache":"text/cache-manifest","ics":"text/calendar","ifb":"text/calendar","css":"text/css","csv":"text/csv","html":"text/html","htm":"text/html","js":"text/javascript","mjs":"text/javascript","n3":"text/n3","txt":"text/plain","text":"text/plain","conf":"text/plain","def":"text/plain","list":"text/plain","log":"text/plain","in":"text/plain","dsc":"text/prs.lines.tag","rtx":"text/richtext","sgml":"text/sgml","sgm":"text/sgml","tsv":"text/tab-separated-values","t":"text/troff","tr":"text/troff","roff":"text/troff","man":"text/troff","me":"text/troff","ms":"text/troff","ttl":"text/turtle","uri":"text/uri-list","uris":"text/uri-list","urls":"text/uri-list","vcard":"text/vcard","curl":"text/vnd.curl","dcurl":"text/vnd.curl.dcurl","mcurl":"text/vnd.curl.mcurl","scurl":"text/vnd.curl.scurl","fly":"text/vnd.fly","flx":"text/vnd.fmi.flexstor","gv":"text/vnd.graphviz","3dml":"text/vnd.in3d.3dml","spot":"text/vnd.in3d.spot","jad":"text/vnd.sun.j2me.app-descriptor","wml":"text/vnd.wap.wml","wmls":"text/vnd.wap.wmlscript","s":"text/x-asm","asm":"text/x-asm","c":"text/x-c","cc":"text/x-c","cxx":"text/x-c","cpp":"text/x-c","h":"text/x-c","hh":"text/x-c","dic":"text/x-c","f":"text/x-fortran","for":"text/x-fortran","f77":"text/x-fortran","f90":"text/x-fortran","java":"text/x-java-source","nfo":"text/x-nfo","opml":"text/x-opml","p":"text/x-pascal","pas":"text/x-pascal","etx":"text/x-setext","sfv":"text/x-sfv","uu":"text/x-uuencode","vcs":"text/x-vcalendar","vcf":"text/x-vcard","3gp":"video/3gpp","3g2":"video/3gpp2","h261":"video/h261","h263":"video/h263","h264":"video/h264","jpgv":"video/jpeg","jpm":"video/jpm","jpgm":"video/jpm","mj2":"video/mj2","mjp2":"video/mj2","mp4":"video/mp4","mp4v":"video/mp4","mpg4":"video/mp4","mpeg":"video/mpeg","mpg":"video/mpeg","mpe":"video/mpeg","m1v":"video/mpeg","m2v":"video/mpeg","ogv":"video/ogg","qt":"video/quicktime","mov":"video/quicktime","uvh":"video/vnd.dece.hd","uvvh":"video/vnd.dece.hd","uvm":"video/vnd.dece.mobile","uvvm":"video/vnd.dece.mobile","uvp":"video/vnd.dece.pd","uvvp":"video/vnd.dece.pd","uvs":"video/vnd.dece.sd","uvvs":"video/vnd.dece.sd","uvv":"video/vnd.dece.video","uvvv":"video/vnd.dece.video","dvb":"video/vnd.dvb.file","fvt":"video/vnd.fvt","mxu":"video/vnd.mpegurl","m4u":"video/vnd.mpegurl","pyv":"video/vnd.ms-playready.media.pyv","uvu":"video/vnd.uvvu.mp4","uvvu":"video/vnd.uvvu.mp4","viv":"video/vnd.vivo","webm":"video/webm","f4v":"video/x-f4v","fli":"video/x-fli","flv":"video/x-flv","m4v":"video/x-m4v","mkv":"video/x-matroska","mk3d":"video/x-matroska","mks":"video/x-matroska","mng":"video/x-mng","asf":"video/x-ms-asf","asx":"video/x-ms-asf","vob":"video/x-ms-vob","wm":"video/x-ms-wm","wmv":"video/x-ms-wmv","wmx":"video/x-ms-wmx","wvx":"video/x-ms-wvx","avi":"video/x-msvideo","movie":"video/x-sgi-movie","smv":"video/x-smv","ice":"x-conference/x-cooltalk"}')}},e={},function i(n){var o=e[n];if(void 0!==o)return o.exports;var r=e[n]={exports:{}};return t[n].call(r.exports,r,r.exports,i),r.exports}(713);var t,e}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QSxZQUNBLFdBQ0EsWUFDQSxZQUNBLFlBQ0EsWUFDQSxZQUNBLFlBQ0EsV0FDQSxXQUNBLG83L0JDWklHLEVBQTJCLENBQUMsRUFHaEMsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQm44QixJQUFqQm84QixFQUNILE9BQU9BLEVBQWF6aEMsUUFHckIsSUFBSUMsRUFBU3FoQyxFQUF5QkUsR0FBWSxDQUdqRHhoQyxRQUFTLENBQUMsR0FPWCxPQUhBMGhDLEVBQW9CRixHQUFVcDZCLEtBQUtuSCxFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTdWhDLEdBR3BFdGhDLEVBQU9ELE9BQ2YsQ0NuQjBCdWhDLENBQW9CLFdERjFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL3h1dGlscy93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8veHV0aWxzLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly94dXRpbHMvLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovL3h1dGlscy8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi8zcmQtcGFydHkvX0J1ZmZlci50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvM3JkLXBhcnR5L2luZGV4LnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi9BbmltYXRlL19hbmltYXRlLnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi9BbmltYXRlL19wb2x5ZmlsbC50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvQW5pbWF0ZS9lYXNpbmdzL19lYXNpbmdzLnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi9BbmltYXRlL2Vhc2luZ3MvaW5kZXgudHMiLCJ3ZWJwYWNrOi8veHV0aWxzLy4vbGliL0FuaW1hdGUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8veHV0aWxzLy4vbGliL0VsYXBzZWRUaW1lL19FbGFwc2VkVGltZS50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvRWxhcHNlZFRpbWUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8veHV0aWxzLy4vbGliL0V2ZW50RW1pdHRlci9fRXZlbnRFbWl0dGVyLnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi9FdmVudEVtaXR0ZXIvX0V2ZW50cy50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvRXZlbnRFbWl0dGVyL2luZGV4LnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi9FeGNlcHRpb24vX0V4Y2VwdGlvbi50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvRXhjZXB0aW9uL2luZGV4LnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi9UYXNrcy9fVGFzay50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvVGFza3MvX1Rhc2tzLnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi9UYXNrcy9pbmRleC50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvVGVybS9fVGVybS50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvVGVybS9pbmRleC50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvZmlsZS9fbWltZS50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvZmlsZS9fcGF0aC50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvZmlsZS9pbmRleC50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8veHV0aWxzLy4vbGliL3R5cGVzL2luZGV4LnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi91dGlscy9fYmF0Y2gudHMiLCJ3ZWJwYWNrOi8veHV0aWxzLy4vbGliL3V0aWxzL19jbG9uZS50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvdXRpbHMvX2Nsb25lRGVlcC50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvdXRpbHMvX2NvbXBhcmUudHMiLCJ3ZWJwYWNrOi8veHV0aWxzLy4vbGliL3V0aWxzL19jb21wYXJlU2hhbGxvdy50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvdXRpbHMvX2RhdGV0aW1lLnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi91dGlscy9fZGVib3VjZWQudHMiLCJ3ZWJwYWNrOi8veHV0aWxzLy4vbGliL3V0aWxzL19oZWxsby50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvdXRpbHMvX2pzb24udHMiLCJ3ZWJwYWNrOi8veHV0aWxzLy4vbGliL3V0aWxzL19udW1iZXIudHMiLCJ3ZWJwYWNrOi8veHV0aWxzLy4vbGliL3V0aWxzL19vYmplY3RzLnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi91dGlscy9fcHJvbWlzZS50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvdXRpbHMvX3F1ZXVlLnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi91dGlscy9fc3RyaW5nLnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi91dGlscy9pbmRleC50cyIsIndlYnBhY2s6Ly94dXRpbHMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8veHV0aWxzL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJ4dXRpbHNcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wieHV0aWxzXCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgKCkgPT4ge1xucmV0dXJuICIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxuY29uc3QgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbmNvbnN0IGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbmNvbnN0IGN1c3RvbUluc3BlY3RTeW1ib2wgPVxuICAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sWydmb3InXSA9PT0gJ2Z1bmN0aW9uJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICA/IFN5bWJvbFsnZm9yJ10oJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICA6IG51bGxcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG5jb25zdCBLX01BWF9MRU5HVEggPSAweDdmZmZmZmZmXG5leHBvcnRzLmtNYXhMZW5ndGggPSBLX01BWF9MRU5HVEhcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgUHJpbnQgd2FybmluZyBhbmQgcmVjb21tZW5kIHVzaW5nIGBidWZmZXJgIHY0Lnggd2hpY2ggaGFzIGFuIE9iamVjdFxuICogICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogV2UgcmVwb3J0IHRoYXQgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0eXBlZCBhcnJheXMgaWYgdGhlIGFyZSBub3Qgc3ViY2xhc3NhYmxlXG4gKiB1c2luZyBfX3Byb3RvX18uIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgXG4gKiAoU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzgpLiBJRSAxMCBsYWNrcyBzdXBwb3J0XG4gKiBmb3IgX19wcm90b19fIGFuZCBoYXMgYSBidWdneSB0eXBlZCBhcnJheSBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbmlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgY29uc29sZS5lcnJvcihcbiAgICAnVGhpcyBicm93c2VyIGxhY2tzIHR5cGVkIGFycmF5IChVaW50OEFycmF5KSBzdXBwb3J0IHdoaWNoIGlzIHJlcXVpcmVkIGJ5ICcgK1xuICAgICdgYnVmZmVyYCB2NS54LiBVc2UgYGJ1ZmZlcmAgdjQueCBpZiB5b3UgcmVxdWlyZSBvbGQgYnJvd3NlciBzdXBwb3J0LidcbiAgKVxufVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIC8vIENhbiB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZD9cbiAgdHJ5IHtcbiAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGNvbnN0IHByb3RvID0geyBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH0gfVxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihwcm90bywgVWludDhBcnJheS5wcm90b3R5cGUpXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGFyciwgcHJvdG8pXG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDJcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLCAncGFyZW50Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzKSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLmJ1ZmZlclxuICB9XG59KVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgJ29mZnNldCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5ieXRlT2Zmc2V0XG4gIH1cbn0pXG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAobGVuZ3RoKSB7XG4gIGlmIChsZW5ndGggPiBLX01BWF9MRU5HVEgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIGxlbmd0aCArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGJ1ZiwgQnVmZmVyLnByb3RvdHlwZSlcbiAgcmV0dXJuIGJ1ZlxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKGFyZylcbiAgfVxuICByZXR1cm4gZnJvbShhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbmZ1bmN0aW9uIGZyb20gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheVZpZXcodmFsdWUpXG4gIH1cblxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgICAnb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdmFsdWUpXG4gICAgKVxuICB9XG5cbiAgaWYgKGlzSW5zdGFuY2UodmFsdWUsIEFycmF5QnVmZmVyKSB8fFxuICAgICAgKHZhbHVlICYmIGlzSW5zdGFuY2UodmFsdWUuYnVmZmVyLCBBcnJheUJ1ZmZlcikpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIChpc0luc3RhbmNlKHZhbHVlLCBTaGFyZWRBcnJheUJ1ZmZlcikgfHxcbiAgICAgICh2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgU2hhcmVkQXJyYXlCdWZmZXIpKSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwidmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSBudW1iZXInXG4gICAgKVxuICB9XG5cbiAgY29uc3QgdmFsdWVPZiA9IHZhbHVlLnZhbHVlT2YgJiYgdmFsdWUudmFsdWVPZigpXG4gIGlmICh2YWx1ZU9mICE9IG51bGwgJiYgdmFsdWVPZiAhPT0gdmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVPZiwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgY29uc3QgYiA9IGZyb21PYmplY3QodmFsdWUpXG4gIGlmIChiKSByZXR1cm4gYlxuXG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9QcmltaXRpdmUgIT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIHZhbHVlW1N5bWJvbC50b1ByaW1pdGl2ZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSgnc3RyaW5nJyksIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksICcgK1xuICAgICdvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB2YWx1ZSlcbiAgKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIE5vdGU6IENoYW5nZSBwcm90b3R5cGUgKmFmdGVyKiBCdWZmZXIuZnJvbSBpcyBkZWZpbmVkIHRvIHdvcmthcm91bmQgQ2hyb21lIGJ1Zzpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvMTQ4XG5PYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLnByb3RvdHlwZSwgVWludDhBcnJheS5wcm90b3R5cGUpXG5PYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLCBVaW50OEFycmF5KVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgc2l6ZSArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAoc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gIH1cblxuICBjb25zdCBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICBsZXQgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcblxuICBjb25zdCBhY3R1YWwgPSBidWYud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIGJ1ZiA9IGJ1Zi5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKGFycmF5KSB7XG4gIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICBjb25zdCBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgYnVmW2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheVZpZXcgKGFycmF5Vmlldykge1xuICBpZiAoaXNJbnN0YW5jZShhcnJheVZpZXcsIFVpbnQ4QXJyYXkpKSB7XG4gICAgY29uc3QgY29weSA9IG5ldyBVaW50OEFycmF5KGFycmF5VmlldylcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKGNvcHkuYnVmZmVyLCBjb3B5LmJ5dGVPZmZzZXQsIGNvcHkuYnl0ZUxlbmd0aClcbiAgfVxuICByZXR1cm4gZnJvbUFycmF5TGlrZShhcnJheVZpZXcpXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJvZmZzZXRcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcImxlbmd0aFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBsZXQgYnVmXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYnVmLCBCdWZmZXIucHJvdG90eXBlKVxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAob2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIGNvbnN0IGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgY29uc3QgYnVmID0gY3JlYXRlQnVmZmVyKGxlbilcblxuICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gYnVmXG4gICAgfVxuXG4gICAgb2JqLmNvcHkoYnVmLCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIGJ1ZlxuICB9XG5cbiAgaWYgKG9iai5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgbnVtYmVySXNOYU4ob2JqLmxlbmd0aCkpIHtcbiAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIoMClcbiAgICB9XG4gICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqKVxuICB9XG5cbiAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBBcnJheS5pc0FycmF5KG9iai5kYXRhKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iai5kYXRhKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBLX01BWF9MRU5HVEhgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIEtfTUFYX0xFTkdUSC50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuIGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlciA9PT0gdHJ1ZSAmJlxuICAgIGIgIT09IEJ1ZmZlci5wcm90b3R5cGUgLy8gc28gQnVmZmVyLmlzQnVmZmVyKEJ1ZmZlci5wcm90b3R5cGUpIHdpbGwgYmUgZmFsc2Vcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmIChpc0luc3RhbmNlKGEsIFVpbnQ4QXJyYXkpKSBhID0gQnVmZmVyLmZyb20oYSwgYS5vZmZzZXQsIGEuYnl0ZUxlbmd0aClcbiAgaWYgKGlzSW5zdGFuY2UoYiwgVWludDhBcnJheSkpIGIgPSBCdWZmZXIuZnJvbShiLCBiLm9mZnNldCwgYi5ieXRlTGVuZ3RoKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJidWYxXCIsIFwiYnVmMlwiIGFyZ3VtZW50cyBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5J1xuICAgIClcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIGxldCB4ID0gYS5sZW5ndGhcbiAgbGV0IHkgPSBiLmxlbmd0aFxuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgbGV0IGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICBsZXQgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIGxldCBidWYgPSBsaXN0W2ldXG4gICAgaWYgKGlzSW5zdGFuY2UoYnVmLCBVaW50OEFycmF5KSkge1xuICAgICAgaWYgKHBvcyArIGJ1Zi5sZW5ndGggPiBidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIGJ1ZiA9IEJ1ZmZlci5mcm9tKGJ1ZilcbiAgICAgICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgYnVmLFxuICAgICAgICAgIHBvc1xuICAgICAgICApXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIH1cbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBpc0luc3RhbmNlKHN0cmluZywgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBvciBBcnJheUJ1ZmZlci4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIHN0cmluZ1xuICAgIClcbiAgfVxuXG4gIGNvbnN0IGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgY29uc3QgbXVzdE1hdGNoID0gKGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSA9PT0gdHJ1ZSlcbiAgaWYgKCFtdXN0TWF0Y2ggJiYgbGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICBsZXQgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB7XG4gICAgICAgICAgcmV0dXJuIG11c3RNYXRjaCA/IC0xIDogdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgfVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJjaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoaXMgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCAoYW5kIHRoZSBgaXMtYnVmZmVyYCBucG0gcGFja2FnZSlcbi8vIHRvIGRldGVjdCBhIEJ1ZmZlciBpbnN0YW5jZS4gSXQncyBub3QgcG9zc2libGUgdG8gdXNlIGBpbnN0YW5jZW9mIEJ1ZmZlcmBcbi8vIHJlbGlhYmx5IGluIGEgYnJvd3NlcmlmeSBjb250ZXh0IGJlY2F1c2UgdGhlcmUgY291bGQgYmUgbXVsdGlwbGUgZGlmZmVyZW50XG4vLyBjb3BpZXMgb2YgdGhlICdidWZmZXInIHBhY2thZ2UgaW4gdXNlLiBUaGlzIG1ldGhvZCB3b3JrcyBldmVuIGZvciBCdWZmZXJcbi8vIGluc3RhbmNlcyB0aGF0IHdlcmUgY3JlYXRlZCBmcm9tIGFub3RoZXIgY29weSBvZiB0aGUgYGJ1ZmZlcmAgcGFja2FnZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE1NFxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgY29uc3QgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcgPSBCdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nXG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgbGV0IHN0ciA9ICcnXG4gIGNvbnN0IG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5yZXBsYWNlKC8oLnsyfSkvZywgJyQxICcpLnRyaW0oKVxuICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5pZiAoY3VzdG9tSW5zcGVjdFN5bWJvbCkge1xuICBCdWZmZXIucHJvdG90eXBlW2N1c3RvbUluc3BlY3RTeW1ib2xdID0gQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmIChpc0luc3RhbmNlKHRhcmdldCwgVWludDhBcnJheSkpIHtcbiAgICB0YXJnZXQgPSBCdWZmZXIuZnJvbSh0YXJnZXQsIHRhcmdldC5vZmZzZXQsIHRhcmdldC5ieXRlTGVuZ3RoKVxuICB9XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInRhcmdldFwiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXkuICcgK1xuICAgICAgJ1JlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdGFyZ2V0KVxuICAgIClcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIGxldCB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICBsZXQgeSA9IGVuZCAtIHN0YXJ0XG4gIGNvbnN0IGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgY29uc3QgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgY29uc3QgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKG51bWJlcklzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgW3ZhbF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIGxldCBpbmRleFNpemUgPSAxXG4gIGxldCBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIGxldCB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIGxldCBpXG4gIGlmIChkaXIpIHtcbiAgICBsZXQgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBsZXQgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIGNvbnN0IHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBsZXQgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb25zdCBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKG51bWJlcklzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPj4+IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICBjb25zdCByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIGxldCBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgY29uc3QgcmVzID0gW11cblxuICBsZXQgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgY29uc3QgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgbGV0IGNvZGVQb2ludCA9IG51bGxcbiAgICBsZXQgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKVxuICAgICAgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKVxuICAgICAgICAgID8gM1xuICAgICAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpXG4gICAgICAgICAgICAgID8gMlxuICAgICAgICAgICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIGxldCBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbmNvbnN0IE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICBjb25zdCBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIGxldCByZXMgPSAnJ1xuICBsZXQgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGxldCByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGNvbnN0IGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICBsZXQgb3V0ID0gJydcbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gaGV4U2xpY2VMb29rdXBUYWJsZVtidWZbaV1dXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBjb25zdCBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICBsZXQgcmVzID0gJydcbiAgLy8gSWYgYnl0ZXMubGVuZ3RoIGlzIG9kZCwgdGhlIGxhc3QgOCBiaXRzIG11c3QgYmUgaWdub3JlZCAoc2FtZSBhcyBub2RlLmpzKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aCAtIDE7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgKGJ5dGVzW2kgKyAxXSAqIDI1NikpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICBjb25zdCBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihuZXdCdWYsIEJ1ZmZlci5wcm90b3R5cGUpXG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludExFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0XVxuICBsZXQgbXVsID0gMVxuICBsZXQgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50QkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICBsZXQgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIGxldCBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDggPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDE2TEUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MTZCRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQzMkxFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDMyQkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnVUludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ1VJbnQ2NExFIChvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGNvbnN0IGZpcnN0ID0gdGhpc1tvZmZzZXRdXG4gIGNvbnN0IGxhc3QgPSB0aGlzW29mZnNldCArIDddXG4gIGlmIChmaXJzdCA9PT0gdW5kZWZpbmVkIHx8IGxhc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgdGhpcy5sZW5ndGggLSA4KVxuICB9XG5cbiAgY29uc3QgbG8gPSBmaXJzdCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDI0XG5cbiAgY29uc3QgaGkgPSB0aGlzWysrb2Zmc2V0XSArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgbGFzdCAqIDIgKiogMjRcblxuICByZXR1cm4gQmlnSW50KGxvKSArIChCaWdJbnQoaGkpIDw8IEJpZ0ludCgzMikpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRCaWdVSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnVUludDY0QkUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCBoaSA9IGZpcnN0ICogMiAqKiAyNCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF1cblxuICBjb25zdCBsbyA9IHRoaXNbKytvZmZzZXRdICogMiAqKiAyNCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgbGFzdFxuXG4gIHJldHVybiAoQmlnSW50KGhpKSA8PCBCaWdJbnQoMzIpKSArIEJpZ0ludChsbylcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIGxldCB2YWwgPSB0aGlzW29mZnNldF1cbiAgbGV0IG11bCA9IDFcbiAgbGV0IGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICBsZXQgaSA9IGJ5dGVMZW5ndGhcbiAgbGV0IG11bCA9IDFcbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIGNvbnN0IHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICBjb25zdCB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnSW50NjRMRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnSW50NjRMRSAob2Zmc2V0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBjb25zdCBmaXJzdCA9IHRoaXNbb2Zmc2V0XVxuICBjb25zdCBsYXN0ID0gdGhpc1tvZmZzZXQgKyA3XVxuICBpZiAoZmlyc3QgPT09IHVuZGVmaW5lZCB8fCBsYXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIHRoaXMubGVuZ3RoIC0gOClcbiAgfVxuXG4gIGNvbnN0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgNF0gK1xuICAgIHRoaXNbb2Zmc2V0ICsgNV0gKiAyICoqIDggK1xuICAgIHRoaXNbb2Zmc2V0ICsgNl0gKiAyICoqIDE2ICtcbiAgICAobGFzdCA8PCAyNCkgLy8gT3ZlcmZsb3dcblxuICByZXR1cm4gKEJpZ0ludCh2YWwpIDw8IEJpZ0ludCgzMikpICtcbiAgICBCaWdJbnQoZmlyc3QgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAyNClcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEJpZ0ludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ0ludDY0QkUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCB2YWwgPSAoZmlyc3QgPDwgMjQpICsgLy8gT3ZlcmZsb3dcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XVxuXG4gIHJldHVybiAoQmlnSW50KHZhbCkgPDwgQmlnSW50KDMyKSkgK1xuICAgIEJpZ0ludCh0aGlzWysrb2Zmc2V0XSAqIDIgKiogMjQgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIGxhc3QpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnRMRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICBsZXQgbXVsID0gMVxuICBsZXQgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludEJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjb25zdCBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIGxldCBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgbGV0IG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50OCA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQxNkxFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MTZCRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDMyTEUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQzMkJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIHdydEJpZ1VJbnQ2NExFIChidWYsIHZhbHVlLCBvZmZzZXQsIG1pbiwgbWF4KSB7XG4gIGNoZWNrSW50QkkodmFsdWUsIG1pbiwgbWF4LCBidWYsIG9mZnNldCwgNylcblxuICBsZXQgbG8gPSBOdW1iZXIodmFsdWUgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0KytdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsZXQgaGkgPSBOdW1iZXIodmFsdWUgPj4gQmlnSW50KDMyKSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0KytdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIHJldHVybiBvZmZzZXRcbn1cblxuZnVuY3Rpb24gd3J0QmlnVUludDY0QkUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbWluLCBtYXgpIHtcbiAgY2hlY2tJbnRCSSh2YWx1ZSwgbWluLCBtYXgsIGJ1Ziwgb2Zmc2V0LCA3KVxuXG4gIGxldCBsbyA9IE51bWJlcih2YWx1ZSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCArIDddID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQgKyA2XSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0ICsgNV0gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCArIDRdID0gbG9cbiAgbGV0IGhpID0gTnVtYmVyKHZhbHVlID4+IEJpZ0ludCgzMikgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQgKyAzXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0ICsgMl0gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCArIDFdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXRdID0gaGlcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ1VJbnQ2NExFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHdyaXRlQmlnVUludDY0TEUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRMRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBCaWdJbnQoMCksIEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnVUludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdVSW50NjRCRSAodmFsdWUsIG9mZnNldCA9IDApIHtcbiAgcmV0dXJuIHdydEJpZ1VJbnQ2NEJFKHRoaXMsIHZhbHVlLCBvZmZzZXQsIEJpZ0ludCgwKSwgQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgbGV0IGkgPSAwXG4gIGxldCBtdWwgPSAxXG4gIGxldCBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgbGV0IGkgPSBieXRlTGVuZ3RoIC0gMVxuICBsZXQgbXVsID0gMVxuICBsZXQgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ0ludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdJbnQ2NExFICh2YWx1ZSwgb2Zmc2V0ID0gMCkge1xuICByZXR1cm4gd3J0QmlnVUludDY0TEUodGhpcywgdmFsdWUsIG9mZnNldCwgLUJpZ0ludCgnMHg4MDAwMDAwMDAwMDAwMDAwJyksIEJpZ0ludCgnMHg3ZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiB3cml0ZUJpZ0ludDY0QkUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRCRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAtQmlnSW50KCcweDgwMDAwMDAwMDAwMDAwMDAnKSwgQmlnSW50KCcweDdmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHNob3VsZCBiZSBhIEJ1ZmZlcicpXG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICBjb25zdCBsZW4gPSBlbmQgLSBzdGFydFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBVc2UgYnVpbHQtaW4gd2hlbiBhdmFpbGFibGUsIG1pc3NpbmcgZnJvbSBJRTExXG4gICAgdGhpcy5jb3B5V2l0aGluKHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKChlbmNvZGluZyA9PT0gJ3V0ZjgnICYmIGNvZGUgPCAxMjgpIHx8XG4gICAgICAgICAgZW5jb2RpbmcgPT09ICdsYXRpbjEnKSB7XG4gICAgICAgIC8vIEZhc3QgcGF0aDogSWYgYHZhbGAgZml0cyBpbnRvIGEgc2luZ2xlIGJ5dGUsIHVzZSB0aGF0IG51bWVyaWMgdmFsdWUuXG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnYm9vbGVhbicpIHtcbiAgICB2YWwgPSBOdW1iZXIodmFsKVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIGxldCBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgICBjb25zdCBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgdmFsdWUgXCInICsgdmFsICtcbiAgICAgICAgJ1wiIGlzIGludmFsaWQgZm9yIGFyZ3VtZW50IFwidmFsdWVcIicpXG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIENVU1RPTSBFUlJPUlNcbi8vID09PT09PT09PT09PT1cblxuLy8gU2ltcGxpZmllZCB2ZXJzaW9ucyBmcm9tIE5vZGUsIGNoYW5nZWQgZm9yIEJ1ZmZlci1vbmx5IHVzYWdlXG5jb25zdCBlcnJvcnMgPSB7fVxuZnVuY3Rpb24gRSAoc3ltLCBnZXRNZXNzYWdlLCBCYXNlKSB7XG4gIGVycm9yc1tzeW1dID0gY2xhc3MgTm9kZUVycm9yIGV4dGVuZHMgQmFzZSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgc3VwZXIoKVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ21lc3NhZ2UnLCB7XG4gICAgICAgIHZhbHVlOiBnZXRNZXNzYWdlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pXG5cbiAgICAgIC8vIEFkZCB0aGUgZXJyb3IgY29kZSB0byB0aGUgbmFtZSB0byBpbmNsdWRlIGl0IGluIHRoZSBzdGFjayB0cmFjZS5cbiAgICAgIHRoaXMubmFtZSA9IGAke3RoaXMubmFtZX0gWyR7c3ltfV1gXG4gICAgICAvLyBBY2Nlc3MgdGhlIHN0YWNrIHRvIGdlbmVyYXRlIHRoZSBlcnJvciBtZXNzYWdlIGluY2x1ZGluZyB0aGUgZXJyb3IgY29kZVxuICAgICAgLy8gZnJvbSB0aGUgbmFtZS5cbiAgICAgIHRoaXMuc3RhY2sgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcbiAgICAgIC8vIFJlc2V0IHRoZSBuYW1lIHRvIHRoZSBhY3R1YWwgbmFtZS5cbiAgICAgIGRlbGV0ZSB0aGlzLm5hbWVcbiAgICB9XG5cbiAgICBnZXQgY29kZSAoKSB7XG4gICAgICByZXR1cm4gc3ltXG4gICAgfVxuXG4gICAgc2V0IGNvZGUgKHZhbHVlKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NvZGUnLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9KVxuICAgIH1cblxuICAgIHRvU3RyaW5nICgpIHtcbiAgICAgIHJldHVybiBgJHt0aGlzLm5hbWV9IFske3N5bX1dOiAke3RoaXMubWVzc2FnZX1gXG4gICAgfVxuICB9XG59XG5cbkUoJ0VSUl9CVUZGRVJfT1VUX09GX0JPVU5EUycsXG4gIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiBgJHtuYW1lfSBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHNgXG4gICAgfVxuXG4gICAgcmV0dXJuICdBdHRlbXB0IHRvIGFjY2VzcyBtZW1vcnkgb3V0c2lkZSBidWZmZXIgYm91bmRzJ1xuICB9LCBSYW5nZUVycm9yKVxuRSgnRVJSX0lOVkFMSURfQVJHX1RZUEUnLFxuICBmdW5jdGlvbiAobmFtZSwgYWN0dWFsKSB7XG4gICAgcmV0dXJuIGBUaGUgXCIke25hbWV9XCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSAke3R5cGVvZiBhY3R1YWx9YFxuICB9LCBUeXBlRXJyb3IpXG5FKCdFUlJfT1VUX09GX1JBTkdFJyxcbiAgZnVuY3Rpb24gKHN0ciwgcmFuZ2UsIGlucHV0KSB7XG4gICAgbGV0IG1zZyA9IGBUaGUgdmFsdWUgb2YgXCIke3N0cn1cIiBpcyBvdXQgb2YgcmFuZ2UuYFxuICAgIGxldCByZWNlaXZlZCA9IGlucHV0XG4gICAgaWYgKE51bWJlci5pc0ludGVnZXIoaW5wdXQpICYmIE1hdGguYWJzKGlucHV0KSA+IDIgKiogMzIpIHtcbiAgICAgIHJlY2VpdmVkID0gYWRkTnVtZXJpY2FsU2VwYXJhdG9yKFN0cmluZyhpbnB1dCkpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdiaWdpbnQnKSB7XG4gICAgICByZWNlaXZlZCA9IFN0cmluZyhpbnB1dClcbiAgICAgIGlmIChpbnB1dCA+IEJpZ0ludCgyKSAqKiBCaWdJbnQoMzIpIHx8IGlucHV0IDwgLShCaWdJbnQoMikgKiogQmlnSW50KDMyKSkpIHtcbiAgICAgICAgcmVjZWl2ZWQgPSBhZGROdW1lcmljYWxTZXBhcmF0b3IocmVjZWl2ZWQpXG4gICAgICB9XG4gICAgICByZWNlaXZlZCArPSAnbidcbiAgICB9XG4gICAgbXNnICs9IGAgSXQgbXVzdCBiZSAke3JhbmdlfS4gUmVjZWl2ZWQgJHtyZWNlaXZlZH1gXG4gICAgcmV0dXJuIG1zZ1xuICB9LCBSYW5nZUVycm9yKVxuXG5mdW5jdGlvbiBhZGROdW1lcmljYWxTZXBhcmF0b3IgKHZhbCkge1xuICBsZXQgcmVzID0gJydcbiAgbGV0IGkgPSB2YWwubGVuZ3RoXG4gIGNvbnN0IHN0YXJ0ID0gdmFsWzBdID09PSAnLScgPyAxIDogMFxuICBmb3IgKDsgaSA+PSBzdGFydCArIDQ7IGkgLT0gMykge1xuICAgIHJlcyA9IGBfJHt2YWwuc2xpY2UoaSAtIDMsIGkpfSR7cmVzfWBcbiAgfVxuICByZXR1cm4gYCR7dmFsLnNsaWNlKDAsIGkpfSR7cmVzfWBcbn1cblxuLy8gQ0hFQ0sgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gY2hlY2tCb3VuZHMgKGJ1Ziwgb2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGlmIChidWZbb2Zmc2V0XSA9PT0gdW5kZWZpbmVkIHx8IGJ1ZltvZmZzZXQgKyBieXRlTGVuZ3RoXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCBidWYubGVuZ3RoIC0gKGJ5dGVMZW5ndGggKyAxKSlcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0ludEJJICh2YWx1ZSwgbWluLCBtYXgsIGJ1Ziwgb2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikge1xuICAgIGNvbnN0IG4gPSB0eXBlb2YgbWluID09PSAnYmlnaW50JyA/ICduJyA6ICcnXG4gICAgbGV0IHJhbmdlXG4gICAgaWYgKGJ5dGVMZW5ndGggPiAzKSB7XG4gICAgICBpZiAobWluID09PSAwIHx8IG1pbiA9PT0gQmlnSW50KDApKSB7XG4gICAgICAgIHJhbmdlID0gYD49IDAke259IGFuZCA8IDIke259ICoqICR7KGJ5dGVMZW5ndGggKyAxKSAqIDh9JHtufWBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJhbmdlID0gYD49IC0oMiR7bn0gKiogJHsoYnl0ZUxlbmd0aCArIDEpICogOCAtIDF9JHtufSkgYW5kIDwgMiAqKiBgICtcbiAgICAgICAgICAgICAgICBgJHsoYnl0ZUxlbmd0aCArIDEpICogOCAtIDF9JHtufWBcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmFuZ2UgPSBgPj0gJHttaW59JHtufSBhbmQgPD0gJHttYXh9JHtufWBcbiAgICB9XG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfT1VUX09GX1JBTkdFKCd2YWx1ZScsIHJhbmdlLCB2YWx1ZSlcbiAgfVxuICBjaGVja0JvdW5kcyhidWYsIG9mZnNldCwgYnl0ZUxlbmd0aClcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVOdW1iZXIgKHZhbHVlLCBuYW1lKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfSU5WQUxJRF9BUkdfVFlQRShuYW1lLCAnbnVtYmVyJywgdmFsdWUpXG4gIH1cbn1cblxuZnVuY3Rpb24gYm91bmRzRXJyb3IgKHZhbHVlLCBsZW5ndGgsIHR5cGUpIHtcbiAgaWYgKE1hdGguZmxvb3IodmFsdWUpICE9PSB2YWx1ZSkge1xuICAgIHZhbGlkYXRlTnVtYmVyKHZhbHVlLCB0eXBlKVxuICAgIHRocm93IG5ldyBlcnJvcnMuRVJSX09VVF9PRl9SQU5HRSh0eXBlIHx8ICdvZmZzZXQnLCAnYW4gaW50ZWdlcicsIHZhbHVlKVxuICB9XG5cbiAgaWYgKGxlbmd0aCA8IDApIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9CVUZGRVJfT1VUX09GX0JPVU5EUygpXG4gIH1cblxuICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9PVVRfT0ZfUkFOR0UodHlwZSB8fCAnb2Zmc2V0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA+PSAke3R5cGUgPyAxIDogMH0gYW5kIDw9ICR7bGVuZ3RofWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSlcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG5jb25zdCBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXisvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHRha2VzIGVxdWFsIHNpZ25zIGFzIGVuZCBvZiB0aGUgQmFzZTY0IGVuY29kaW5nXG4gIHN0ciA9IHN0ci5zcGxpdCgnPScpWzBdXG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHIudHJpbSgpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgbGV0IGNvZGVQb2ludFxuICBjb25zdCBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIGxldCBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICBjb25zdCBieXRlcyA9IFtdXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIGNvbnN0IGJ5dGVBcnJheSA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgbGV0IGMsIGhpLCBsb1xuICBjb25zdCBieXRlQXJyYXkgPSBbXVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGxldCBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG4vLyBBcnJheUJ1ZmZlciBvciBVaW50OEFycmF5IG9iamVjdHMgZnJvbSBvdGhlciBjb250ZXh0cyAoaS5lLiBpZnJhbWVzKSBkbyBub3QgcGFzc1xuLy8gdGhlIGBpbnN0YW5jZW9mYCBjaGVjayBidXQgdGhleSBzaG91bGQgYmUgdHJlYXRlZCBhcyBvZiB0aGF0IHR5cGUuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNjZcbmZ1bmN0aW9uIGlzSW5zdGFuY2UgKG9iaiwgdHlwZSkge1xuICByZXR1cm4gb2JqIGluc3RhbmNlb2YgdHlwZSB8fFxuICAgIChvYmogIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IgIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IubmFtZSAhPSBudWxsICYmXG4gICAgICBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gdHlwZS5uYW1lKVxufVxuZnVuY3Rpb24gbnVtYmVySXNOYU4gKG9iaikge1xuICAvLyBGb3IgSUUxMSBzdXBwb3J0XG4gIHJldHVybiBvYmogIT09IG9iaiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuXG4vLyBDcmVhdGUgbG9va3VwIHRhYmxlIGZvciBgdG9TdHJpbmcoJ2hleCcpYFxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMjE5XG5jb25zdCBoZXhTbGljZUxvb2t1cFRhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OWFiY2RlZidcbiAgY29uc3QgdGFibGUgPSBuZXcgQXJyYXkoMjU2KVxuICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICBjb25zdCBpMTYgPSBpICogMTZcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDE2OyArK2opIHtcbiAgICAgIHRhYmxlW2kxNiArIGpdID0gYWxwaGFiZXRbaV0gKyBhbHBoYWJldFtqXVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGFibGVcbn0pKClcblxuLy8gUmV0dXJuIG5vdCBmdW5jdGlvbiB3aXRoIEVycm9yIGlmIEJpZ0ludCBub3Qgc3VwcG9ydGVkXG5mdW5jdGlvbiBkZWZpbmVCaWdJbnRNZXRob2QgKGZuKSB7XG4gIHJldHVybiB0eXBlb2YgQmlnSW50ID09PSAndW5kZWZpbmVkJyA/IEJ1ZmZlckJpZ0ludE5vdERlZmluZWQgOiBmblxufVxuXG5mdW5jdGlvbiBCdWZmZXJCaWdJbnROb3REZWZpbmVkICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdCaWdJbnQgbm90IHN1cHBvcnRlZCcpXG59XG4iLCIvKiEgaWVlZTc1NC4gQlNELTMtQ2xhdXNlIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiaW1wb3J0IHsgQnVmZmVyIGFzIF9CdWZmZXIgfSBmcm9tICdidWZmZXInO1xyXG5pbXBvcnQgeyBCdWZmZXJTdHJpbmcsIEJ1ZmZlckVuY29kaW5nIH0gZnJvbSAnLi4vdHlwZXMnO1xyXG5cclxuLyoqXHJcbiAqIEJ1ZmZlciBvYmplY3RcclxuICovXHJcbmV4cG9ydCBjb25zdCBCdWZmZXIgPSBfQnVmZmVyO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHZhbHVlIGlzIHZhbGlkIGxlbmd0aFxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlXHJcbiAqIEByZXR1cm5zIGBib29sZWFuYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9pc0J1ZmZlciA9ICh2YWx1ZTogYW55KTogYm9vbGVhbiA9PiBCdWZmZXIuaXNCdWZmZXIodmFsdWUpO1xyXG5cclxuLyoqXHJcbiAqIEJhc2U2NCBlbmNvZGVcclxuICogLSBFeGFtcGxlOiBgX2Jhc2U2NEVuY29kZSgnSGVsbG8gd29ybGQhJylgID0+IGAnU0dWc2JHOGdkMjl5YkdRaCdgXHJcbiAqIFxyXG4gKiBAcGFyYW0gYnVmZmVyXHJcbiAqIEBwYXJhbSBidWZmZXJFbmNvZGluZ1xyXG4gKiBAcmV0dXJucyBiYXNlNjQgZW5jb2RlZCBgc3RyaW5nYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9iYXNlNjRFbmNvZGUgPSAoYnVmZmVyOiBCdWZmZXJTdHJpbmcsIGJ1ZmZlckVuY29kaW5nPzogQnVmZmVyRW5jb2RpbmcpOiBzdHJpbmcgPT4ge1xyXG5cdHJldHVybiBCdWZmZXIuZnJvbShidWZmZXIsIGJ1ZmZlckVuY29kaW5nKS50b1N0cmluZygnYmFzZTY0Jyk7XHJcbn07XHJcblxyXG4vKipcclxuICogQmFzZTY0IGRlY29kZVxyXG4gKiAtIEV4YW1wbGU6IGBfYmFzZTY0RGVjb2RlKCdTR1ZzYkc4Z2QyOXliR1FoJylgID0+IGA8QnVmZmVyIDQ4IDY1IDZjIDZjIDZmIDIwIDc3IDZmIDcyIDZjIDY0IDIxPmBcclxuICogLSBFeGFtcGxlOiBgX2Jhc2U2NERlY29kZSgnU0dWc2JHOGdkMjl5YkdRaCcpLnRvU3RyaW5nKClgID0+IGAnSGVsbG8gd29ybGQhJ2BcclxuICogXHJcbiAqIEBwYXJhbSBiYXNlNjRcclxuICogQHJldHVybnMgZGVjb2RlZCBgQnVmZmVyYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9iYXNlNjREZWNvZGUgPSAoYmFzZTY0OiBzdHJpbmcpOiBCdWZmZXIgPT4ge1xyXG5cdHJldHVybiBCdWZmZXIuZnJvbShiYXNlNjQsICdiYXNlNjQnKTtcclxufTsiLCJleHBvcnQgKiBmcm9tICcuL19CdWZmZXInOyIsImltcG9ydCB7IF9pc0Z1bmMsIF9udW0sIF9wb3NJbnQgfSBmcm9tICcuLi91dGlscyc7XHJcbmltcG9ydCB7IEVhc2luZ0Z1bmN0aW9uLCBFYXNpbmdzS2V5LCBFYXNpbmdzIH0gZnJvbSAnLi9lYXNpbmdzJztcclxuaW1wb3J0IHsgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLCBjYW5jZWxBbmltYXRpb25GcmFtZSB9IGZyb20gJy4vX3BvbHlmaWxsJztcclxuXHJcbi8qKlxyXG4gKiBEZWZhdWx0IGFuaW1hdGlvbiBlYXNpbmdcclxuICovXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX0VBU0lORzogRWFzaW5nRnVuY3Rpb24gPSBFYXNpbmdzLmVhc2VMaW5lYXI7XHJcblxyXG4vKipcclxuICogRGVmYXVsdCBhbmltYXRpb24gZHVyYXRpb25cclxuICovXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX0RVUkFUSU9OOiBudW1iZXIgPSAxMDAwO1xyXG5cclxuLyoqXHJcbiAqIEFuaW1hdGUgb3B0aW9ucyBpbnRlcmZhY2VcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUFuaW1hdGVPcHRpb25zIHtcclxuXHR1cGRhdGU6ICh2YWx1ZToge1xyXG5cdFx0aW5kZXg6IG51bWJlcjtcclxuXHRcdGRlbHRhOiBudW1iZXI7XHJcblx0XHRwb3M6IG51bWJlcjtcclxuXHRcdHRpbWU6IG51bWJlcjtcclxuXHR9KSA9PiB2b2lkfGZhbHNlO1xyXG5cdGJlZm9yZT86ICh2YWx1ZToge1xyXG5cdFx0dGltZXN0YW1wOiBudW1iZXI7XHJcblx0XHRvcHRpb25zOiBhbnk7XHJcblx0XHR0aGVuOiBudW1iZXI7XHJcblx0fSkgPT4gdm9pZHxmYWxzZTtcclxuXHRhZnRlcj86ICh2YWx1ZToge1xyXG5cdFx0YWJvcnRlZDogYm9vbGVhbjtcclxuXHRcdGFib3J0X21ldGhvZDogdW5kZWZpbmVkfCdhYm9ydCd8J3VwZGF0ZSd8J2JlZ2luJ3wndGltZW91dCc7XHJcblx0XHRjb21wbGV0ZTogYm9vbGVhbjtcclxuXHRcdHBhdXNlX2R1cmF0aW9uOiBudW1iZXI7XHJcblx0XHR0b3RhbF9kdXJhdGlvbjogbnVtYmVyO1xyXG5cdH0pID0+IHZvaWQ7XHJcblx0ZWFzaW5nOiBFYXNpbmdzS2V5fEVhc2luZ0Z1bmN0aW9uO1xyXG5cdGR1cmF0aW9uOiBudW1iZXI7XHJcblx0ZGVsYXk/OiBudW1iZXI7XHJcblx0ZGVsYXllZD86IGJvb2xlYW47XHJcblx0ZnJvbT86IG51bWJlcjtcclxuXHR0bz86IG51bWJlcjtcclxuXHR0aW1lb3V0PzogbnVtYmVyO1xyXG5cdG1hbnVhbD86IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbmltYXRpb24gY29udHJvbCBpbnRlcmZhY2VcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUFuaW1hdGlvbiB7XHJcblx0X2RlYnVnOiBib29sZWFuO1xyXG5cdGJlZ3VuOiBib29sZWFuO1xyXG5cdHBhdXNlZDogYm9vbGVhbjtcclxuXHRkb25lOiBib29sZWFuO1xyXG5cdHBsYXk6IChyZXN0YXJ0OiBib29sZWFuKSA9PiBib29sZWFuO1xyXG5cdHBhdXNlOiAodG9nZ2xlOiBib29sZWFuKSA9PiBib29sZWFuO1xyXG5cdHJlc3VtZTogKCkgPT4gYm9vbGVhbjtcclxuXHRyZXN0YXJ0OiAoKSA9PiBib29sZWFuO1xyXG5cdGNhbmNlbDogKCkgPT4gYm9vbGVhbjtcclxuXHRhYm9ydDogKCkgPT4gYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSB0aW1lZCBhbmltYXRpb25cclxuICogXHJcbiAqIEBwYXJhbSBvcHRpb25zXHJcbiAqIEBwYXJhbSBfZGVidWdcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfYW5pbWF0ZSh0aGlzOiBhbnksIG9wdGlvbnM6IElBbmltYXRlT3B0aW9ucywgX2RlYnVnOiBib29sZWFuID0gZmFsc2UpOiBJQW5pbWF0aW9uIHtcclxuXHRsZXQge1xyXG5cdFx0dXBkYXRlOiBfdXBkYXRlLFxyXG5cdFx0YmVmb3JlOiBfYmVmb3JlLFxyXG5cdFx0YWZ0ZXI6IF9hZnRlcixcclxuXHRcdGVhc2luZzogX2Vhc2luZyA9IERFRkFVTFRfRUFTSU5HLFxyXG5cdFx0ZHVyYXRpb246IF9kdXJhdGlvbiA9IDEwMDAsXHJcblx0XHRkZWxheTogX2RlbGF5LFxyXG5cdFx0ZGVsYXllZDogX2RlbGF5ZWQgPSBmYWxzZSxcclxuXHRcdGZyb206IF9mcm9tLFxyXG5cdFx0dG86IF90byxcclxuXHRcdHRpbWVvdXQ6IF90aW1lb3V0LFxyXG5cdFx0bWFudWFsOiBfbWFudWFsID0gZmFsc2UsXHJcblx0fSA9IG9wdGlvbnM7XHJcblx0Y29uc3Qgc2VsZiA9IHRoaXM7XHJcblx0Y29uc3QgY29udGV4dCA9ICdvYmplY3QnID09PSB0eXBlb2Ygc2VsZiAmJiBzZWxmID8gc2VsZiA6IG51bGw7XHJcblx0Y29uc3QgdXBkYXRlID0gX2lzRnVuYyhfdXBkYXRlKSA/IF91cGRhdGUgOiB1bmRlZmluZWQ7XHJcblx0Y29uc3QgYmVmb3JlID0gX2lzRnVuYyhfYmVmb3JlKSA/IF9iZWZvcmUgOiB1bmRlZmluZWQ7XHJcblx0Y29uc3QgYWZ0ZXIgPSBfaXNGdW5jKF9hZnRlcikgPyBfYWZ0ZXIgOiB1bmRlZmluZWQ7XHJcblx0aWYgKCF1cGRhdGUpe1xyXG5cdFx0bGV0IGVyciA9ICdUaGUgdXBkYXRlIGNhbGxiYWNrIGlzIG5vdCBkZWZpbmVkIGluIGBfYW5pbWF0ZWAgb3B0aW9ucyEnO1xyXG5cdFx0Y29uc29sZS5lcnJvcihlcnIsIG9wdGlvbnMpO1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKGVycik7XHJcblx0fVxyXG5cdGNvbnN0IGVhc2luZzogRWFzaW5nRnVuY3Rpb24gPSAoKCk9PntcclxuXHRcdGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIF9lYXNpbmcgJiYgRWFzaW5ncy5oYXNPd25Qcm9wZXJ0eShfZWFzaW5nKSkgX2Vhc2luZyA9IEVhc2luZ3NbX2Vhc2luZ107XHJcblx0XHRyZXR1cm4gJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIF9lYXNpbmcgPyBfZWFzaW5nIDogREVGQVVMVF9FQVNJTkc7XHJcblx0fSkoKTtcclxuXHRjb25zdCBkdXJhdGlvbiA9IF9wb3NJbnQoX2R1cmF0aW9uLCAwKSA/PyBERUZBVUxUX0RVUkFUSU9OO1xyXG5cdGNvbnN0IGRlbGF5ID0gX3Bvc0ludChfZGVsYXksIDApID8/IDA7XHJcblx0Y29uc3QgZGVsYXllZCA9IEJvb2xlYW4oX2RlbGF5ZWQpO1xyXG5cdGNvbnN0IG1hbnVhbCA9IEJvb2xlYW4oX21hbnVhbCk7XHJcblx0Y29uc3QgdGltZW91dCA9IF9wb3NJbnQoX3RpbWVvdXQsIDApID8/IDA7XHJcblx0Y29uc3QgZnJvbSA9IF9udW0oX2Zyb20sIDApO1xyXG5cdGNvbnN0IHRvID0gX251bShfdG8sIDApO1xyXG5cdGNvbnN0IGRpZmYgPSB0byAtIGZyb207XHJcblxyXG5cdGxldCBpZDogbnVtYmVyfHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuXHRsZXQgc3RhcnQ6IG51bWJlcnx1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcblx0bGV0IGlzX2RvbmU6IG51bWJlcnx1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcblx0bGV0IGlzX3BhdXNlZDogYm9vbGVhbnx1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcblx0bGV0IHByZXY6IG51bWJlcnx1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcblx0bGV0IHQ6IG51bWJlcnx1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcblx0bGV0IGQ6IG51bWJlciA9IDA7XHJcblx0bGV0IHA6IG51bWJlciA9IDA7XHJcblx0bGV0IHB0OiBudW1iZXIgPSAwO1xyXG5cdGxldCBldDogbnVtYmVyID0gMDtcclxuXHRsZXQgZWxhcHNlZDogbnVtYmVyID0gMDtcclxuXHRsZXQgaW5kZXg6IG51bWJlciA9IC0xO1xyXG5cdGxldCB0aGVuOiBudW1iZXIgPSBEYXRlLm5vdygpO1xyXG5cclxuXHQvL3Jlc2V0XHJcblx0Y29uc3QgcmVzZXQgPSAoKTogdm9pZCA9PiB7XHJcblx0XHRpZiAodCkgY2xlYXJUaW1lb3V0KHQpO1xyXG5cdFx0aWYgKGlkKSBjYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XHJcblx0XHRpZCA9IHQgPSBzdGFydCA9IGlzX2RvbmUgPSBpc19wYXVzZWQgPSBwcmV2ID0gdW5kZWZpbmVkO1xyXG5cdFx0ZCA9IHAgPSBldCA9IHB0ID0gZWxhcHNlZCA9IDA7XHJcblx0XHRpbmRleCA9IC0xO1xyXG5cdFx0dGhlbiA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG5cdH07XHJcblxyXG5cdC8vZnJhbWVcclxuXHRjb25zdCBmcmFtZSA9ICh0aW1lOiBudW1iZXIpOiB2b2lkID0+IHtcclxuXHRcdGlmICh0aW1lID09PSBwcmV2IHx8IGlzX2RvbmUpIHJldHVybjtcclxuXHRcdHByZXYgPSB0aW1lO1xyXG5cdFx0aW5kZXggKz0gMTtcclxuXHRcdGxldCBkZWx0YSA9ICFkdXJhdGlvbiA/IDAgOiBlYXNpbmcuY2FsbChjb250ZXh0LCB0aW1lLCAwLCAxLCBkdXJhdGlvbik7XHJcblx0XHRsZXQgcG9zID0gMDtcclxuXHRcdGlmIChkaWZmKXtcclxuXHRcdFx0cG9zID0gTWF0aC5taW4oZGVsdGEgKiBNYXRoLmFicyhkaWZmKSwgTWF0aC5hYnMoZGlmZikpO1xyXG5cdFx0XHRwb3MgPSBmcm9tICsgKHBvcyAqIChkaWZmIDwgMCA/IC0xIDogMSkpO1xyXG5cdFx0fVxyXG5cdFx0bGV0IHJlcyA9IHVwZGF0ZS5jYWxsKGNvbnRleHQsIHtpbmRleCwgZGVsdGEsIHBvcywgdGltZX0pO1xyXG5cdFx0aWYgKHRpbWUgPj0gZHVyYXRpb24pIGlzX2RvbmUgPSAxO1xyXG5cdFx0ZWxzZSBpZiAocmVzID09PSBmYWxzZSkgaXNfZG9uZSA9IC0xO1xyXG5cdH07XHJcblxyXG5cdC8vZmluaXNoXHJcblx0Y29uc3QgZmluaXNoID0gKHRpbWVzdGFtcDogbnVtYmVyKTogdm9pZCA9PiB7XHJcblx0XHRpZiAodCkgY2xlYXJUaW1lb3V0KHQpO1xyXG5cdFx0aWYgKHB0KXtcclxuXHRcdFx0cCArPSAodGltZXN0YW1wIC0gcHQpO1xyXG5cdFx0XHRwdCA9IDA7XHJcblx0XHR9XHJcblx0XHRsZXQgcGF1c2VfZHVyYXRpb24gPSBwO1xyXG5cdFx0bGV0IHRvdGFsX2R1cmF0aW9uID0gTWF0aC5tYXgoRGF0ZS5ub3coKSAtIHRoZW4sIGVsYXBzZWQgKyBldCk7XHJcblx0XHRsZXQgYWJvcnRfbWV0aG9kOiB1bmRlZmluZWR8J2Fib3J0J3wndXBkYXRlJ3wnYmVnaW4nfCd0aW1lb3V0JztcclxuXHRcdGxldCBhYm9ydGVkOiBib29sZWFuID0gZmFsc2U7XHJcblx0XHRsZXQgY29tcGxldGU6IGJvb2xlYW4gPSAhYWJvcnRlZDtcclxuXHRcdGlmIChpc19kb25lICYmIGlzX2RvbmUgPCAwKXtcclxuXHRcdFx0YWJvcnRlZCA9IHRydWU7XHJcblx0XHRcdHN3aXRjaCAoaXNfZG9uZSkge1xyXG5cdFx0XHRcdGNhc2UgLTE6XHJcblx0XHRcdFx0XHRhYm9ydF9tZXRob2QgPSAndXBkYXRlJztcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgLTI6XHJcblx0XHRcdFx0XHRhYm9ydF9tZXRob2QgPSAnYmVnaW4nO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAtNDpcclxuXHRcdFx0XHRcdGFib3J0X21ldGhvZCA9ICd0aW1lb3V0JztcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRhYm9ydF9tZXRob2QgPSAnYWJvcnQnO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGlmIChhZnRlcikgYWZ0ZXIuY2FsbChjb250ZXh0LCB7YWJvcnRlZCwgYWJvcnRfbWV0aG9kLCBjb21wbGV0ZSwgcGF1c2VfZHVyYXRpb24sIHRvdGFsX2R1cmF0aW9ufSk7XHJcblx0XHRpZCA9IHVuZGVmaW5lZDtcclxuXHR9O1xyXG5cclxuXHQvL2JlZ2luXHJcblx0Y29uc3QgYmVnaW4gPSAodGltZXN0YW1wOiBudW1iZXIpOiB2b2lkID0+IHtcclxuXHRcdGlmICh0aW1lb3V0KSB0ID0gc2V0VGltZW91dCgoKSA9PiAoaXNfZG9uZSA9IC00KSwgdGltZW91dCkgYXMgYW55O1xyXG5cdFx0aWYgKGJlZm9yZSl7XHJcblx0XHRcdGxldCByZXMgPSBiZWZvcmUuY2FsbChjb250ZXh0LCB7dGltZXN0YW1wLCBvcHRpb25zLCB0aGVufSk7XHJcblx0XHRcdGlmIChyZXMgPT09IGZhbHNlKSBpc19kb25lID0gLTI7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0Ly9zdGVwXHJcblx0Y29uc3Qgc3RlcCA9ICh0aW1lc3RhbXA6IG51bWJlcik6IHZvaWQgPT4ge1xyXG5cdFx0aWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIGJlZ2luKHRpbWVzdGFtcCk7XHJcblx0XHRpZiAoIXN0YXJ0KSBzdGFydCA9IHRpbWVzdGFtcDtcclxuXHRcdGVsYXBzZWQgPSAodGltZXN0YW1wIC0gc3RhcnQpICsgZXQ7XHJcblx0XHRpZiAoaXNfZG9uZSkgcmV0dXJuIGZpbmlzaCh0aW1lc3RhbXApO1xyXG5cdFx0aWYgKGlzX3BhdXNlZCl7XHJcblx0XHRcdGlkID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRldCA9IGVsYXBzZWQ7XHJcblx0XHRcdHB0ID0gdGltZXN0YW1wO1xyXG5cdFx0XHRzdGFydCA9IDA7XHJcblx0XHRcdGVsYXBzZWQgPSAwO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmIChwdCl7XHJcblx0XHRcdHAgKz0gKHRpbWVzdGFtcCAtIHB0KTtcclxuXHRcdFx0cHQgPSAwO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCFkIHx8IChkIC0gK2VsYXBzZWQudG9GaXhlZCgyKSkgPD0gMC4xKXtcclxuXHRcdFx0aWYgKCEoIWVsYXBzZWQgJiYgZGVsYXllZCkpIGZyYW1lKE1hdGgubWluKCtlbGFwc2VkLnRvRml4ZWQoMSksIGQgPyBkIDogZHVyYXRpb24pKTtcclxuXHRcdFx0ZCArPSBkZWxheTtcclxuXHRcdH1cclxuXHRcdGlmICghaXNfZG9uZSAmJiBlbGFwc2VkID49IGR1cmF0aW9uKSBpc19kb25lID0gMTtcclxuXHRcdGlmIChpc19kb25lKSByZXR1cm4gZmluaXNoKHRpbWVzdGFtcCk7XHJcblx0XHRlbHNlIGlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApO1xyXG5cdH07XHJcblxyXG5cdC8vYWJvcnRcclxuXHRjb25zdCBhYm9ydCA9ICgpOiBib29sZWFuID0+IHtcclxuXHRcdGlmIChpc19kb25lKSByZXR1cm4gZmFsc2U7XHJcblx0XHRpc19kb25lID0gLTM7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9O1xyXG5cclxuXHQvL3BsYXlcclxuXHRjb25zdCBwbGF5ID0gKHJlc3RhcnQ6IGJvb2xlYW4gPSBmYWxzZSk6IGJvb2xlYW4gPT4ge1xyXG5cdFx0aWYgKF9kZWJ1ZykgY29uc29sZS5kZWJ1ZyhgW19hbmltYXRlXSAke2lzX3BhdXNlZCA/ICdyZXN1bWUnIDogJ3BsYXknfS5gLCB7cmVzdGFydCwgaXNfcGF1c2VkLCBpc19kb25lLCBkdXJhdGlvbiwgZnJvbSwgdG8sIGRpZmYsIGVhc2luZ30pO1xyXG5cdFx0aWYgKHJlc3RhcnQpIHJlc2V0KCk7XHJcblx0XHRpZiAoaXNfZG9uZSkgcmV0dXJuIGZhbHNlO1xyXG5cdFx0aXNfcGF1c2VkID0gdW5kZWZpbmVkO1xyXG5cdFx0aWYgKGlkKSBjYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XHJcblx0XHRpZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwKTtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH07XHJcblxyXG5cdC8vcGF1c2VcclxuXHRjb25zdCBwYXVzZSA9ICh0b2dnbGU6IGJvb2xlYW4gPSB0cnVlKTogYm9vbGVhbiA9PiB7XHJcblx0XHRpZiAodG9nZ2xlID09PSBudWxsKSB0b2dnbGUgPSAhaXNfcGF1c2VkO1xyXG5cdFx0ZWxzZSB0b2dnbGUgPSBCb29sZWFuKHRvZ2dsZSk7XHJcblx0XHRpZiAoX2RlYnVnKSBjb25zb2xlLmRlYnVnKGBbX2FuaW1hdGVdICR7dG9nZ2xlID8gJ3BhdXNlJyA6ICd1bnBhdXNlJ30uYCwge3RvZ2dsZSwgaXNfcGF1c2VkLCBpc19kb25lfSk7XHJcblx0XHRpZiAoaXNfZG9uZSkgcmV0dXJuIGZhbHNlO1xyXG5cdFx0aWYgKHRvZ2dsZSA9PT0gaXNfcGF1c2VkKSByZXR1cm4gaXNfcGF1c2VkO1xyXG5cdFx0cmV0dXJuIHRvZ2dsZSA/IChpc19wYXVzZWQgPSB0b2dnbGUpIDogcGxheSgpO1xyXG5cdH07XHJcblxyXG5cdC8vcmVzdW1lXHJcblx0Y29uc3QgcmVzdW1lID0gKCk6IGJvb2xlYW4gPT4gaXNfcGF1c2VkID8gcGF1c2UoZmFsc2UpIDogZmFsc2U7XHJcblx0XHJcblx0Ly9yZXN0YXJ0XHJcblx0Y29uc3QgcmVzdGFydCA9ICgpOiBib29sZWFuID0+IHBsYXkodHJ1ZSk7XHJcblx0XHJcblx0Ly9jYW5jZWxcclxuXHRjb25zdCBjYW5jZWwgPSAoKTogYm9vbGVhbiA9PiB7XHJcblx0XHRyZXNldCgpO1xyXG5cdFx0aWYgKF9kZWJ1ZykgY29uc29sZS5kZWJ1ZygnW19hbmltYXRlXSBjYW5jZWxsZWQuJyk7XHJcblx0XHRyZXR1cm4gIWlzX2RvbmU7XHJcblx0fTtcclxuXHJcblx0Ly9hdXRvcGxheVxyXG5cdGlmICghbWFudWFsKSBwbGF5KCk7XHJcblx0XHJcblx0Ly9yZXN1bHQgLSBhbmltYXRpb25cclxuXHRyZXR1cm4ge1xyXG5cdFx0Z2V0IF9kZWJ1Zygpe1xyXG5cdFx0XHRyZXR1cm4gX2RlYnVnO1xyXG5cdFx0fSxcclxuXHRcdGdldCBiZWd1bigpe1xyXG5cdFx0XHRyZXR1cm4gc3RhcnQgIT09IHVuZGVmaW5lZDtcclxuXHRcdH0sXHJcblx0XHRnZXQgcGF1c2VkKCl7XHJcblx0XHRcdHJldHVybiBCb29sZWFuKGlzX3BhdXNlZCk7XHJcblx0XHR9LFxyXG5cdFx0Z2V0IGRvbmUoKXtcclxuXHRcdFx0cmV0dXJuIEJvb2xlYW4oaXNfZG9uZSk7XHJcblx0XHR9LFxyXG5cdFx0cGxheSxcclxuXHRcdHBhdXNlLFxyXG5cdFx0cmVzdW1lLFxyXG5cdFx0cmVzdGFydCxcclxuXHRcdGNhbmNlbCxcclxuXHRcdGFib3J0LFxyXG5cdH07XHJcbn0iLCIvKipcclxuICogRXhwb3J0IHBvbHlmaWxsIC0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSwgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgW3JlcXVlc3RBbmltYXRpb25GcmFtZSwgY2FuY2VsQW5pbWF0aW9uRnJhbWVdID0gKCgpID0+IHtcclxuXHRsZXQgX3JlcXVlc3RBbmltYXRpb25GcmFtZTogYW55ID0gdW5kZWZpbmVkO1xyXG5cdGxldCBfY2FuY2VsQW5pbWF0aW9uRnJhbWU6IGFueSA9IHVuZGVmaW5lZDtcclxuXHRpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiB3aW5kb3cpe1xyXG5cdFx0Y29uc3QgdmVuZG9ycyA9IFsnbXMnLCAnbW96JywgJ3dlYmtpdCcsICdvJ107XHJcblx0XHRfcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTtcclxuXHRcdF9jYW5jZWxBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdmVuZG9ycy5sZW5ndGggJiYgIV9yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7IGkgKyspe1xyXG5cdFx0XHRjb25zdCB2ZW5kb3I6IGFueSA9IHZlbmRvcnNbaV07XHJcblx0XHRcdF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbYCR7dmVuZG9yfVJlcXVlc3RBbmltYXRpb25GcmFtZWAgYXMgYW55XTtcclxuXHRcdFx0X2NhbmNlbEFuaW1hdGlvbkZyYW1lID0gd2luZG93W2Ake3ZlbmRvcn1DYW5jZWxBbmltYXRpb25GcmFtZWAgYXMgYW55XSB8fCB3aW5kb3dbYCR7dmVuZG9yfUNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZWAgYXMgYW55XTtcclxuXHRcdH1cclxuXHR9XHJcblx0bGV0IHJlcXVlc3RBbmltYXRpb25GcmFtZTogKGNhbGxiYWNrOiAoKHRpbWU6IG51bWJlcik9PnZvaWQpKSA9PiBudW1iZXI7XHJcblx0aWYgKF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgYXMgKChjYWxsYmFjazogKCh0aW1lOiBudW1iZXIpPT52b2lkKSkgPT4gbnVtYmVyKTtcclxuXHRlbHNlIHtcclxuXHRcdGxldCBwcmV2ID0gMDtcclxuXHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrOiAoKHRpbWU6IG51bWJlcik9PnZvaWQpKXtcclxuXHRcdFx0bGV0IGN1cnIgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcclxuXHRcdFx0dGltZW91dCA9IE1hdGgubWF4KDAsIDE2IC0gKGN1cnIgLSBwcmV2KSksXHJcblx0XHRcdHRpbWUgPSBjdXJyICsgdGltZW91dDtcclxuXHRcdFx0bGV0IGlkOiBudW1iZXIgPSBzZXRUaW1lb3V0KCgpID0+ICdmdW5jdGlvbicgPT09IHR5cGVvZiBjYWxsYmFjayA/IGNhbGxiYWNrKHRpbWUpIDogbnVsbCwgdGltZW91dCkgYXMgYW55O1xyXG5cdFx0XHRwcmV2ID0gdGltZTtcclxuXHRcdFx0cmV0dXJuIGlkO1xyXG5cdFx0fTtcclxuXHR9XHJcblx0bGV0IGNhbmNlbEFuaW1hdGlvbkZyYW1lOiAoKGhhbmRsZTogbnVtYmVyKSA9PiB2b2lkKTtcclxuXHRpZiAoX2NhbmNlbEFuaW1hdGlvbkZyYW1lKSBjYW5jZWxBbmltYXRpb25GcmFtZSA9IF9jYW5jZWxBbmltYXRpb25GcmFtZSBhcyAoKGhhbmRsZTogbnVtYmVyKSA9PiB2b2lkKVxyXG5cdGVsc2UgY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihoYW5kbGU6IG51bWJlcil7XHJcblx0XHRjbGVhclRpbWVvdXQoaGFuZGxlKTtcclxuXHR9O1xyXG5cdGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIHdpbmRvdyl7XHJcblx0XHRpZiAoIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XHJcblx0XHRpZiAoIXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSkgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gY2FuY2VsQW5pbWF0aW9uRnJhbWU7XHJcblx0fVxyXG5cdHJldHVybiBbcmVxdWVzdEFuaW1hdGlvbkZyYW1lLCBjYW5jZWxBbmltYXRpb25GcmFtZV07XHJcbn0pKCk7IiwiZXhwb3J0IHR5cGUgRWFzaW5nRnVuY3Rpb24gPSAodGltZTogbnVtYmVyLCBiZWdpbjogbnVtYmVyLCBjaGFuZ2U6IG51bWJlciwgZHVyYXRpb246IG51bWJlcikgPT4gbnVtYmVyO1xyXG5cclxuZXhwb3J0IGNvbnN0IGVhc2VMaW5lYXI6RWFzaW5nRnVuY3Rpb24gPSAodGltZTogbnVtYmVyLCBiZWdpbjogbnVtYmVyLCBjaGFuZ2U6IG51bWJlciwgZHVyYXRpb246IG51bWJlcik6IG51bWJlciA9PiBjaGFuZ2UgKiB0aW1lIC8gZHVyYXRpb24gKyBiZWdpbjtcclxuXHJcbmV4cG9ydCBjb25zdCBlYXNlSW5RdWFkOkVhc2luZ0Z1bmN0aW9uID0gKHRpbWU6IG51bWJlciwgYmVnaW46IG51bWJlciwgY2hhbmdlOiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIpOiBudW1iZXIgPT4gY2hhbmdlICogKHRpbWUgLz0gZHVyYXRpb24pICogdGltZSArIGJlZ2luO1xyXG5cclxuZXhwb3J0IGNvbnN0IGVhc2VPdXRRdWFkOkVhc2luZ0Z1bmN0aW9uID0gKHRpbWU6IG51bWJlciwgYmVnaW46IG51bWJlciwgY2hhbmdlOiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIpOiBudW1iZXIgPT4gLWNoYW5nZSAqICh0aW1lIC89IGR1cmF0aW9uKSAqICh0aW1lIC0gMikgKyBiZWdpbjtcclxuXHJcbmV4cG9ydCBjb25zdCBlYXNlSW5PdXRRdWFkOkVhc2luZ0Z1bmN0aW9uID0gKHRpbWU6IG51bWJlciwgYmVnaW46IG51bWJlciwgY2hhbmdlOiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIpOiBudW1iZXIgPT4ge1xyXG5cdGlmICgodGltZSAvPSBkdXJhdGlvbiAvIDIpIDwgMSkgcmV0dXJuIGNoYW5nZSAvIDIgKiB0aW1lICogdGltZSArIGJlZ2luO1xyXG5cdHJldHVybiAtY2hhbmdlIC8gMiAqICgoLS10aW1lKSAqICh0aW1lIC0gMikgLSAxKSArIGJlZ2luO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGVhc2VJblNpbmU6RWFzaW5nRnVuY3Rpb24gPSAodGltZTogbnVtYmVyLCBiZWdpbjogbnVtYmVyLCBjaGFuZ2U6IG51bWJlciwgZHVyYXRpb246IG51bWJlcik6IG51bWJlciA9PiAtY2hhbmdlICogTWF0aC5jb3ModGltZSAvIGR1cmF0aW9uICogKE1hdGguUEkgLyAyKSkgKyBjaGFuZ2UgKyBiZWdpbjtcclxuXHJcbmV4cG9ydCBjb25zdCBlYXNlT3V0U2luZTpFYXNpbmdGdW5jdGlvbiA9ICh0aW1lOiBudW1iZXIsIGJlZ2luOiBudW1iZXIsIGNoYW5nZTogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyKTogbnVtYmVyID0+IGNoYW5nZSAqIE1hdGguc2luKHRpbWUgLyBkdXJhdGlvbiAqIChNYXRoLlBJIC8gMikpICsgYmVnaW47XHJcblxyXG5leHBvcnQgY29uc3QgZWFzZUluT3V0U2luZTpFYXNpbmdGdW5jdGlvbiA9ICh0aW1lOiBudW1iZXIsIGJlZ2luOiBudW1iZXIsIGNoYW5nZTogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyKTogbnVtYmVyID0+IC1jaGFuZ2UgLyAyICogKE1hdGguY29zKE1hdGguUEkgKiB0aW1lIC8gZHVyYXRpb24pIC0gMSkgKyBiZWdpbjtcclxuXHJcbmV4cG9ydCBjb25zdCBlYXNlSW5FeHBvOkVhc2luZ0Z1bmN0aW9uID0gKHRpbWU6IG51bWJlciwgYmVnaW46IG51bWJlciwgY2hhbmdlOiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIpOiBudW1iZXIgPT4gKHRpbWUgPT09IDApID8gYmVnaW4gOiBjaGFuZ2UgKiBNYXRoLnBvdygyLCAxMCAqICh0aW1lIC8gZHVyYXRpb24gLSAxKSkgKyBiZWdpbjtcclxuXHJcbmV4cG9ydCBjb25zdCBlYXNlT3V0RXhwbzpFYXNpbmdGdW5jdGlvbiA9ICh0aW1lOiBudW1iZXIsIGJlZ2luOiBudW1iZXIsIGNoYW5nZTogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyKTogbnVtYmVyID0+ICh0aW1lID09PSBkdXJhdGlvbikgPyBiZWdpbiArIGNoYW5nZSA6IGNoYW5nZSAqICgtTWF0aC5wb3coMiwgLTEwICogdGltZSAvIGR1cmF0aW9uKSArIDEpICsgYmVnaW47XHJcblxyXG5leHBvcnQgY29uc3QgZWFzZUluT3V0RXhwbzpFYXNpbmdGdW5jdGlvbiA9ICh0aW1lOiBudW1iZXIsIGJlZ2luOiBudW1iZXIsIGNoYW5nZTogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyKTogbnVtYmVyID0+IHtcclxuXHRpZiAodGltZSA9PT0gMCkgcmV0dXJuIGJlZ2luO1xyXG5cdGlmICh0aW1lID09PSBkdXJhdGlvbikgcmV0dXJuIGJlZ2luICsgY2hhbmdlO1xyXG5cdGlmICgodGltZSAvPSBkdXJhdGlvbiAvIDIpIDwgMSkgcmV0dXJuIGNoYW5nZSAvIDIgKiBNYXRoLnBvdygyLCAxMCAqICh0aW1lIC0gMSkpICsgYmVnaW47XHJcblx0cmV0dXJuIGNoYW5nZSAvIDIgKiAoLU1hdGgucG93KDIsIC0xMCAqIC0tdGltZSkgKyAyKSArIGJlZ2luO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGVhc2VJbkNpcmM6RWFzaW5nRnVuY3Rpb24gPSAodGltZTogbnVtYmVyLCBiZWdpbjogbnVtYmVyLCBjaGFuZ2U6IG51bWJlciwgZHVyYXRpb246IG51bWJlcik6IG51bWJlciA9PiAtY2hhbmdlICogKE1hdGguc3FydCgxIC0gKHRpbWUgLz0gZHVyYXRpb24pICogdGltZSkgLSAxKSArIGJlZ2luO1xyXG5cclxuZXhwb3J0IGNvbnN0IGVhc2VPdXRDaXJjOkVhc2luZ0Z1bmN0aW9uID0gKHRpbWU6IG51bWJlciwgYmVnaW46IG51bWJlciwgY2hhbmdlOiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIpOiBudW1iZXIgPT4gY2hhbmdlICogTWF0aC5zcXJ0KDEgLSAodGltZSA9IHRpbWUgLyBkdXJhdGlvbiAtIDEpICogdGltZSkgKyBiZWdpbjtcclxuXHJcbmV4cG9ydCBjb25zdCBlYXNlSW5PdXRDaXJjOkVhc2luZ0Z1bmN0aW9uID0gKHRpbWU6IG51bWJlciwgYmVnaW46IG51bWJlciwgY2hhbmdlOiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIpOiBudW1iZXIgPT4ge1xyXG5cdGlmICgodGltZSAvPSBkdXJhdGlvbiAvIDIpIDwgMSkgcmV0dXJuIC1jaGFuZ2UgLyAyICogKE1hdGguc3FydCgxIC0gdGltZSAqIHRpbWUpIC0gMSkgKyBiZWdpbjtcclxuXHRyZXR1cm4gY2hhbmdlIC8gMiAqIChNYXRoLnNxcnQoMSAtICh0aW1lIC09IDIpICogdGltZSkgKyAxKSArIGJlZ2luO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGVhc2VJbkN1YmljOkVhc2luZ0Z1bmN0aW9uID0gKHRpbWU6IG51bWJlciwgYmVnaW46IG51bWJlciwgY2hhbmdlOiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIpOiBudW1iZXIgPT4gY2hhbmdlICogKHRpbWUgLz0gZHVyYXRpb24pICogdGltZSAqIHRpbWUgKyBiZWdpbjtcclxuXHJcbmV4cG9ydCBjb25zdCBlYXNlT3V0Q3ViaWM6RWFzaW5nRnVuY3Rpb24gPSAodGltZTogbnVtYmVyLCBiZWdpbjogbnVtYmVyLCBjaGFuZ2U6IG51bWJlciwgZHVyYXRpb246IG51bWJlcik6IG51bWJlciA9PiBjaGFuZ2UgKiAoKHRpbWUgPSB0aW1lIC8gZHVyYXRpb24gLSAxKSAqIHRpbWUgKiB0aW1lICsgMSkgKyBiZWdpbjtcclxuXHJcbmV4cG9ydCBjb25zdCBlYXNlSW5PdXRDdWJpYzpFYXNpbmdGdW5jdGlvbiA9ICh0aW1lOiBudW1iZXIsIGJlZ2luOiBudW1iZXIsIGNoYW5nZTogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyKTogbnVtYmVyID0+IHtcclxuXHRpZiAoKHRpbWUgLz0gZHVyYXRpb24gLyAyKSA8IDEpIHJldHVybiBjaGFuZ2UgLyAyICogdGltZSAqIHRpbWUgKiB0aW1lICsgYmVnaW47XHJcblx0cmV0dXJuIGNoYW5nZSAvIDIgKiAoKHRpbWUgLT0gMikgKiB0aW1lICogdGltZSArIDIpICsgYmVnaW47XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZWFzZUluUXVhcnQ6RWFzaW5nRnVuY3Rpb24gPSAodGltZTogbnVtYmVyLCBiZWdpbjogbnVtYmVyLCBjaGFuZ2U6IG51bWJlciwgZHVyYXRpb246IG51bWJlcik6IG51bWJlciA9PiBjaGFuZ2UgKiAodGltZSAvPSBkdXJhdGlvbikgKiB0aW1lICogdGltZSAqIHRpbWUgKyBiZWdpbjtcclxuXHJcbmV4cG9ydCBjb25zdCBlYXNlT3V0UXVhcnQ6RWFzaW5nRnVuY3Rpb24gPSAodGltZTogbnVtYmVyLCBiZWdpbjogbnVtYmVyLCBjaGFuZ2U6IG51bWJlciwgZHVyYXRpb246IG51bWJlcik6IG51bWJlciA9PiAtY2hhbmdlICogKCh0aW1lID0gdGltZSAvIGR1cmF0aW9uIC0gMSkgKiB0aW1lICogdGltZSAqIHRpbWUgLSAxKSArIGJlZ2luO1xyXG5cclxuZXhwb3J0IGNvbnN0IGVhc2VJbk91dFF1YXJ0OkVhc2luZ0Z1bmN0aW9uID0gKHRpbWU6IG51bWJlciwgYmVnaW46IG51bWJlciwgY2hhbmdlOiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIpOiBudW1iZXIgPT4ge1xyXG5cdGlmICgodGltZSAvPSBkdXJhdGlvbiAvIDIpIDwgMSkgcmV0dXJuIGNoYW5nZSAvIDIgKiB0aW1lICogdGltZSAqIHRpbWUgKiB0aW1lICsgYmVnaW47XHJcblx0cmV0dXJuIC1jaGFuZ2UgLyAyICogKCh0aW1lIC09IDIpICogdGltZSAqIHRpbWUgKiB0aW1lIC0gMikgKyBiZWdpbjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBlYXNlSW5RdWludDpFYXNpbmdGdW5jdGlvbiA9ICh0aW1lOiBudW1iZXIsIGJlZ2luOiBudW1iZXIsIGNoYW5nZTogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyKTogbnVtYmVyID0+IGNoYW5nZSAqICh0aW1lIC89IGR1cmF0aW9uKSAqIHRpbWUgKiB0aW1lICogdGltZSAqIHRpbWUgKyBiZWdpbjtcclxuXHJcbmV4cG9ydCBjb25zdCBlYXNlT3V0UXVpbnQ6RWFzaW5nRnVuY3Rpb24gPSAodGltZTogbnVtYmVyLCBiZWdpbjogbnVtYmVyLCBjaGFuZ2U6IG51bWJlciwgZHVyYXRpb246IG51bWJlcik6IG51bWJlciA9PiBjaGFuZ2UgKiAoKHRpbWUgPSB0aW1lIC8gZHVyYXRpb24gLSAxKSAqIHRpbWUgKiB0aW1lICogdGltZSAqIHRpbWUgKyAxKSArIGJlZ2luO1xyXG5cclxuZXhwb3J0IGNvbnN0IGVhc2VJbk91dFF1aW50OkVhc2luZ0Z1bmN0aW9uID0gKHRpbWU6IG51bWJlciwgYmVnaW46IG51bWJlciwgY2hhbmdlOiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIpOiBudW1iZXIgPT4ge1xyXG5cdGlmICgodGltZSAvPSBkdXJhdGlvbiAvIDIpIDwgMSkgcmV0dXJuIGNoYW5nZSAvIDIgKiB0aW1lICogdGltZSAqIHRpbWUgKiB0aW1lICogdGltZSArIGJlZ2luO1xyXG5cdHJldHVybiBjaGFuZ2UgLyAyICogKCh0aW1lIC09IDIpICogdGltZSAqIHRpbWUgKiB0aW1lICogdGltZSArIDIpICsgYmVnaW47XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZWFzZUluRWxhc3RpYzpFYXNpbmdGdW5jdGlvbiA9ICh0aW1lOiBudW1iZXIsIGJlZ2luOiBudW1iZXIsIGNoYW5nZTogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyKTogbnVtYmVyID0+IHtcclxuXHRsZXQgcyA9IDEuNzAxNTg7XHJcblx0bGV0IHAgPSAwO1xyXG5cdGxldCBhID0gY2hhbmdlO1xyXG5cdGlmICh0aW1lID09PSAwKSByZXR1cm4gYmVnaW47XHJcblx0aWYgKCh0aW1lIC89IGR1cmF0aW9uKSA9PT0gMSkgcmV0dXJuIGJlZ2luICsgY2hhbmdlO1xyXG5cdGlmICghcCkgcCA9IGR1cmF0aW9uICogLjM7XHJcblx0aWYgKGEgPCBNYXRoLmFicyhjaGFuZ2UpKXtcclxuXHRcdGEgPSBjaGFuZ2U7XHJcblx0XHRzID0gcCAvIDQ7XHJcblx0fVxyXG5cdGVsc2UgcyA9IHAgLyAoMiAqIE1hdGguUEkpICogTWF0aC5hc2luKGNoYW5nZSAvIGEpO1xyXG5cdHJldHVybiAtKGEgKiBNYXRoLnBvdygyLCAxMCAqICh0aW1lIC09IDEpKSAqIE1hdGguc2luKCh0aW1lICogZHVyYXRpb24gLSBzKSAqICgyICogTWF0aC5QSSkgLyBwKSkgKyBiZWdpbjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBlYXNlT3V0RWxhc3RpYzpFYXNpbmdGdW5jdGlvbiA9ICh0aW1lOiBudW1iZXIsIGJlZ2luOiBudW1iZXIsIGNoYW5nZTogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyKTogbnVtYmVyID0+IHtcclxuXHRsZXQgcyA9IDEuNzAxNTg7XHJcblx0bGV0IHAgPSAwO1xyXG5cdGxldCBhID0gY2hhbmdlO1xyXG5cdGlmICh0aW1lID09PSAwKSByZXR1cm4gYmVnaW47XHJcblx0aWYgKCh0aW1lIC89IGR1cmF0aW9uKSA9PT0gMSkgcmV0dXJuIGJlZ2luICsgY2hhbmdlO1xyXG5cdGlmICghcCkgcCA9IGR1cmF0aW9uICogLjM7XHJcblx0aWYgKGEgPCBNYXRoLmFicyhjaGFuZ2UpKSB7XHJcblx0XHRhID0gY2hhbmdlO1xyXG5cdFx0cyA9IHAgLyA0O1xyXG5cdH1cclxuXHRlbHNlIHMgPSBwIC8gKDIgKiBNYXRoLlBJKSAqIE1hdGguYXNpbihjaGFuZ2UgLyBhKTtcclxuXHRyZXR1cm4gYSAqIE1hdGgucG93KDIsIC0xMCAqIHRpbWUpICogTWF0aC5zaW4oKHRpbWUgKiBkdXJhdGlvbiAtIHMpICogKDIgKiBNYXRoLlBJKSAvIHApICsgY2hhbmdlICsgYmVnaW47XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZWFzZUluT3V0RWxhc3RpYzpFYXNpbmdGdW5jdGlvbiA9ICh0aW1lOiBudW1iZXIsIGJlZ2luOiBudW1iZXIsIGNoYW5nZTogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyKTogbnVtYmVyID0+IHtcclxuXHRsZXQgcyA9IDEuNzAxNTg7XHJcblx0bGV0IHAgPSAwO1xyXG5cdGxldCBhID0gY2hhbmdlO1xyXG5cdGlmICh0aW1lID09PSAwKSByZXR1cm4gYmVnaW47XHJcblx0aWYgKCh0aW1lIC89IGR1cmF0aW9uIC8gMikgPT09IDIpIHJldHVybiBiZWdpbiArIGNoYW5nZTtcclxuXHRpZiAoIXApIHAgPSBkdXJhdGlvbiAqICguMyAqIDEuNSk7XHJcblx0aWYgKGEgPCBNYXRoLmFicyhjaGFuZ2UpKSB7XHJcblx0XHRhID0gY2hhbmdlO1xyXG5cdFx0cyA9IHAgLyA0O1xyXG5cdH1cclxuXHRlbHNlIHMgPSBwIC8gKDIgKiBNYXRoLlBJKSAqIE1hdGguYXNpbihjaGFuZ2UgLyBhKTtcclxuXHRpZiAodGltZSA8IDEpIHJldHVybiAtLjUgKiAoYSAqIE1hdGgucG93KDIsIDEwICogKHRpbWUgLT0gMSkpICogTWF0aC5zaW4oKHRpbWUgKiBkdXJhdGlvbiAtIHMpICogKDIgKiBNYXRoLlBJKSAvIHApKSArIGJlZ2luO1xyXG5cdHJldHVybiBhICogTWF0aC5wb3coMiwgLTEwICogKHRpbWUgLT0gMSkpICogTWF0aC5zaW4oKHRpbWUgKiBkdXJhdGlvbiAtIHMpICogKDIgKiBNYXRoLlBJKSAvIHApICogLjUgKyBjaGFuZ2UgKyBiZWdpbjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBlYXNlSW5CYWNrOkVhc2luZ0Z1bmN0aW9uID0gKHRpbWU6IG51bWJlciwgYmVnaW46IG51bWJlciwgY2hhbmdlOiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIpOiBudW1iZXIgPT4ge1xyXG5cdGxldCBzO1xyXG5cdGlmIChzID09PSB1bmRlZmluZWQpIHMgPSAxLjcwMTU4O1xyXG5cdHJldHVybiBjaGFuZ2UgKiAodGltZSAvPSBkdXJhdGlvbikgKiB0aW1lICogKChzICsgMSkgKiB0aW1lIC0gcykgKyBiZWdpbjtcclxufTsiLCJpbXBvcnQgdHlwZSB7IEVhc2luZ0Z1bmN0aW9uIGFzIF9FYXNpbmdGdW5jdGlvbiB9IGZyb20gJy4vX2Vhc2luZ3MnO1xyXG5pbXBvcnQge1xyXG5cdGVhc2VMaW5lYXIsXHJcblx0ZWFzZUluUXVhZCxcclxuXHRlYXNlT3V0UXVhZCxcclxuXHRlYXNlSW5PdXRRdWFkLFxyXG5cdGVhc2VJblNpbmUsXHJcblx0ZWFzZU91dFNpbmUsXHJcblx0ZWFzZUluT3V0U2luZSxcclxuXHRlYXNlSW5FeHBvLFxyXG5cdGVhc2VPdXRFeHBvLFxyXG5cdGVhc2VJbk91dEV4cG8sXHJcblx0ZWFzZUluQ2lyYyxcclxuXHRlYXNlT3V0Q2lyYyxcclxuXHRlYXNlSW5PdXRDaXJjLFxyXG5cdGVhc2VJbkN1YmljLFxyXG5cdGVhc2VPdXRDdWJpYyxcclxuXHRlYXNlSW5PdXRDdWJpYyxcclxuXHRlYXNlSW5RdWFydCxcclxuXHRlYXNlT3V0UXVhcnQsXHJcblx0ZWFzZUluT3V0UXVhcnQsXHJcblx0ZWFzZUluUXVpbnQsXHJcblx0ZWFzZU91dFF1aW50LFxyXG5cdGVhc2VJbk91dFF1aW50LFxyXG5cdGVhc2VJbkVsYXN0aWMsXHJcblx0ZWFzZU91dEVsYXN0aWMsXHJcblx0ZWFzZUluT3V0RWxhc3RpYyxcclxuXHRlYXNlSW5CYWNrLFxyXG59IGZyb20gJy4vX2Vhc2luZ3MnO1xyXG5leHBvcnQgdHlwZSBFYXNpbmdGdW5jdGlvbiA9IF9FYXNpbmdGdW5jdGlvbjtcclxuZXhwb3J0IGludGVyZmFjZSBJRWFzaW5ncyB7XHJcblx0ZWFzZUxpbmVhcjogRWFzaW5nRnVuY3Rpb247XHJcblx0ZWFzZUluUXVhZDogRWFzaW5nRnVuY3Rpb247XHJcblx0ZWFzZU91dFF1YWQ6IEVhc2luZ0Z1bmN0aW9uO1xyXG5cdGVhc2VJbk91dFF1YWQ6IEVhc2luZ0Z1bmN0aW9uO1xyXG5cdGVhc2VJblNpbmU6IEVhc2luZ0Z1bmN0aW9uO1xyXG5cdGVhc2VPdXRTaW5lOiBFYXNpbmdGdW5jdGlvbjtcclxuXHRlYXNlSW5PdXRTaW5lOiBFYXNpbmdGdW5jdGlvbjtcclxuXHRlYXNlSW5FeHBvOiBFYXNpbmdGdW5jdGlvbjtcclxuXHRlYXNlT3V0RXhwbzogRWFzaW5nRnVuY3Rpb247XHJcblx0ZWFzZUluT3V0RXhwbzogRWFzaW5nRnVuY3Rpb247XHJcblx0ZWFzZUluQ2lyYzogRWFzaW5nRnVuY3Rpb247XHJcblx0ZWFzZU91dENpcmM6IEVhc2luZ0Z1bmN0aW9uO1xyXG5cdGVhc2VJbk91dENpcmM6IEVhc2luZ0Z1bmN0aW9uO1xyXG5cdGVhc2VJbkN1YmljOiBFYXNpbmdGdW5jdGlvbjtcclxuXHRlYXNlT3V0Q3ViaWM6IEVhc2luZ0Z1bmN0aW9uO1xyXG5cdGVhc2VJbk91dEN1YmljOiBFYXNpbmdGdW5jdGlvbjtcclxuXHRlYXNlSW5RdWFydDogRWFzaW5nRnVuY3Rpb247XHJcblx0ZWFzZU91dFF1YXJ0OiBFYXNpbmdGdW5jdGlvbjtcclxuXHRlYXNlSW5PdXRRdWFydDogRWFzaW5nRnVuY3Rpb247XHJcblx0ZWFzZUluUXVpbnQ6IEVhc2luZ0Z1bmN0aW9uO1xyXG5cdGVhc2VPdXRRdWludDogRWFzaW5nRnVuY3Rpb247XHJcblx0ZWFzZUluT3V0UXVpbnQ6IEVhc2luZ0Z1bmN0aW9uO1xyXG5cdGVhc2VJbkVsYXN0aWM6IEVhc2luZ0Z1bmN0aW9uO1xyXG5cdGVhc2VPdXRFbGFzdGljOiBFYXNpbmdGdW5jdGlvbjtcclxuXHRlYXNlSW5PdXRFbGFzdGljOiBFYXNpbmdGdW5jdGlvbjtcclxuXHRlYXNlSW5CYWNrOiBFYXNpbmdGdW5jdGlvbjtcclxufTtcclxuZXhwb3J0IHR5cGUgRWFzaW5nc0tleSA9IGtleW9mIElFYXNpbmdzO1xyXG5leHBvcnQgY29uc3QgRWFzaW5nczogSUVhc2luZ3MgPSB7XHJcblx0ZWFzZUxpbmVhcixcclxuXHRlYXNlSW5RdWFkLFxyXG5cdGVhc2VPdXRRdWFkLFxyXG5cdGVhc2VJbk91dFF1YWQsXHJcblx0ZWFzZUluU2luZSxcclxuXHRlYXNlT3V0U2luZSxcclxuXHRlYXNlSW5PdXRTaW5lLFxyXG5cdGVhc2VJbkV4cG8sXHJcblx0ZWFzZU91dEV4cG8sXHJcblx0ZWFzZUluT3V0RXhwbyxcclxuXHRlYXNlSW5DaXJjLFxyXG5cdGVhc2VPdXRDaXJjLFxyXG5cdGVhc2VJbk91dENpcmMsXHJcblx0ZWFzZUluQ3ViaWMsXHJcblx0ZWFzZU91dEN1YmljLFxyXG5cdGVhc2VJbk91dEN1YmljLFxyXG5cdGVhc2VJblF1YXJ0LFxyXG5cdGVhc2VPdXRRdWFydCxcclxuXHRlYXNlSW5PdXRRdWFydCxcclxuXHRlYXNlSW5RdWludCxcclxuXHRlYXNlT3V0UXVpbnQsXHJcblx0ZWFzZUluT3V0UXVpbnQsXHJcblx0ZWFzZUluRWxhc3RpYyxcclxuXHRlYXNlT3V0RWxhc3RpYyxcclxuXHRlYXNlSW5PdXRFbGFzdGljLFxyXG5cdGVhc2VJbkJhY2ssXHJcbn07IiwiZXhwb3J0ICogZnJvbSAnLi9lYXNpbmdzJztcclxuZXhwb3J0ICogZnJvbSAnLi9fcG9seWZpbGwnO1xyXG5leHBvcnQgKiBmcm9tICcuL19hbmltYXRlJzsiLCJpbXBvcnQgeyBfaXNEYXRlIH0gZnJvbSAnLi4vdXRpbHMvX2RhdGV0aW1lJztcclxuaW1wb3J0IHsgX3JvdW5kIH0gZnJvbSAnLi4vdXRpbHMvX251bWJlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgRWxhcHNlZFRpbWVcclxue1xyXG5cdC8vcHJvcHNcclxuXHRzdGFydF90aW1lOiBEYXRlfHVuZGVmaW5lZDtcclxuXHRzdG9wX3RpbWU6IERhdGV8dW5kZWZpbmVkO1xyXG5cdF9tczogbnVtYmVyfHVuZGVmaW5lZDtcclxuXHRcclxuXHQvKipcclxuXHQgKiBOZXcgaW5zdGFuY2VcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcigpe1xyXG5cdFx0dGhpcy5zdGFydF90aW1lID0gbmV3IERhdGUoKTtcclxuXHRcdHRoaXMuc3RvcF90aW1lID0gdW5kZWZpbmVkO1xyXG5cdFx0dGhpcy5fbXMgPSB1bmRlZmluZWQ7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTdGFydCB0aW1lIHRyYWNraW5nIChzZXRzIHN0YXJ0X3RpbWUgdG8gbm93IGFuZCByZXNldHMgb3RoZXIgcHJvcGVydGllcylcclxuXHQgKi9cclxuXHRzdGFydCgpOiBFbGFwc2VkVGltZSB7XHJcblx0XHRjb25zdCBfbm93ID0gbmV3IERhdGUoKTtcclxuXHRcdHRoaXMuc3RhcnRfdGltZSA9IF9pc0RhdGUodGhpcy5zdGFydF90aW1lKSA/IHRoaXMuc3RhcnRfdGltZSA6IF9ub3c7XHJcblx0XHR0aGlzLnN0b3BfdGltZSA9IHVuZGVmaW5lZDtcclxuXHRcdHRoaXMuX21zID0gdW5kZWZpbmVkO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBUcmFjayBjdXJyZW50IHRpbWUgKHNldHMgdGhpcy5fbXMgdG8gdGltZSBkaWZmZXJlbmNlIGJldHdlZW4gbGFzdCBzdGFydCBhbmQgbm93KVxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSB1cGRhdGVTdGFydCAgU2V0IHN0YXJ0IHRvIG5vd1xyXG5cdCAqL1xyXG5cdG5vdyh1cGRhdGVTdGFydDogYm9vbGVhbiA9IGZhbHNlKTogRWxhcHNlZFRpbWUge1xyXG5cdFx0Y29uc3QgX25vdyA9IG5ldyBEYXRlKCk7XHJcblx0XHRjb25zdCBfc3RhcnQ6IGFueSA9IF9pc0RhdGUodGhpcy5zdGFydF90aW1lKSA/IHRoaXMuc3RhcnRfdGltZSA6IHRoaXMuc3RhcnRfdGltZSA9IF9ub3c7XHJcblx0XHR0aGlzLl9tcyA9IF9ub3cuZ2V0VGltZSgpIC0gX3N0YXJ0LmdldFRpbWUoKTtcclxuXHRcdGlmICh1cGRhdGVTdGFydCkgdGhpcy5zdGFydF90aW1lID0gX25vdztcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU3RvcCB0aW1lIHRyYWNraW5nIChzZXRzIHRoaXMuX21zIHRvIHRpbWUgZGlmZmVyZW5jZSBiZXR3ZWVuIGxhc3Qgc3RhcnQgYW5kIGxhc3Qgc3RvcClcclxuXHQgKiBJZiBsYXN0IHN0b3AgaXMgbGVzcyB0aGFuIHN0YXJ0IHRpbWUsIHN0b3AgdGltZSBpcyB1cGRhdGVkIHRvIG5vdy5cclxuXHQgKi9cclxuXHRzdG9wKCk6IEVsYXBzZWRUaW1lIHtcclxuXHRcdGNvbnN0IF9ub3cgPSBuZXcgRGF0ZSgpO1xyXG5cdFx0Y29uc3QgX3N0YXJ0OiBhbnkgPSBfaXNEYXRlKHRoaXMuc3RhcnRfdGltZSkgPyB0aGlzLnN0YXJ0X3RpbWUgOiBfbm93LCB0ID0gX3N0YXJ0LmdldFRpbWUoKTtcclxuXHRcdGNvbnN0IF9zdG9wX3RpbWU6IGFueSA9IHRoaXMuc3RvcF90aW1lO1xyXG5cdFx0Y29uc3QgX3N0b3AgPSBfaXNEYXRlKF9zdG9wX3RpbWUpICYmIF9zdG9wX3RpbWUuZ2V0VGltZSgpID49IHQgPyBfc3RvcF90aW1lIDogdGhpcy5zdG9wX3RpbWUgPSBfbm93O1xyXG5cdFx0dGhpcy5fbXMgPSBfc3RvcC5nZXRUaW1lKCkgLSB0O1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBXaGV0aGVyIHRpbWUgdHJhY2tpbmcgd2FzIHN0YXJ0ZWRcclxuXHQgKi9cclxuXHRzdGFydGVkKCk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIF9pc0RhdGUodGhpcy5zdGFydF90aW1lKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFdoZXRoZXIgdGltZSB0cmFja2luZyB3YXMgc3RvcHBlZFxyXG5cdCAqL1xyXG5cdHN0b3BwZWQoKTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gX2lzRGF0ZSh0aGlzLnN0b3BfdGltZSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBHZXQgdHJhY2tlZCBlbGFwc2VkIHRpbWUgaW4gbWlsbGlzZWNvbmRzXHJcblx0ICogXHJcblx0ICogQHJldHVybnMgbWlsbGlzZWNvbmRzXHJcblx0ICovXHJcblx0bXMoKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiBwYXJzZUludCh0aGlzLl9tcyBhcyBhbnkpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0IHRyYWNrZWQgZWxhcHNlZCB0aW1lIGluIHNlY29uZHNcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gZGVjaW1hbFBsYWNlc1xyXG5cdCAqIEByZXR1cm5zIHNlY29uZHNcclxuXHQgKi9cclxuXHRzZWMoZGVjaW1hbFBsYWNlczogbnVtYmVyID0gMyk6IG51bWJlciB7XHJcblx0XHRyZXR1cm4gX3JvdW5kKHRoaXMubXMoKS8xMDAwLCBkZWNpbWFsUGxhY2VzKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCB0cmFja2VkIGVsYXBzZWQgdGltZSBpbiBtaW51dGVzXHJcblx0ICogXHJcblx0ICogQHBhcmFtIGRlY2ltYWxQbGFjZXNcclxuXHQgKiBAcmV0dXJucyBtaW51dGVzXHJcblx0ICovXHJcblx0bWluKGRlY2ltYWxQbGFjZXM6IG51bWJlciA9IDMpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIF9yb3VuZCh0aGlzLm1zKCkvNjAwMDAsIGRlY2ltYWxQbGFjZXMpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0IHRyYWNraW5nIGRhdGEgKHRoaXMgd2lsbCBzdG9wIHRyYWNraW5nKVxyXG5cdCAqL1xyXG5cdGRhdGEoKToge3N0YXJ0X3RpbWU6IERhdGV8dW5kZWZpbmVkOyBzdG9wX3RpbWU6IERhdGV8dW5kZWZpbmVkOyBlbGFwc2VkX21zOiBudW1iZXI7fXtcclxuXHRcdHRoaXMuc3RvcCgpO1xyXG5cdFx0Y29uc3Qgc3RhcnRfdGltZSA9IF9pc0RhdGUodGhpcy5zdGFydF90aW1lKSA/IHRoaXMuc3RhcnRfdGltZSA6IHVuZGVmaW5lZDtcclxuXHRcdGNvbnN0IHN0b3BfdGltZSA9IF9pc0RhdGUodGhpcy5zdG9wX3RpbWUpID8gdGhpcy5zdG9wX3RpbWUgOiB1bmRlZmluZWQ7XHJcblx0XHRjb25zdCBlbGFwc2VkX21zID0gdGhpcy5tcygpO1xyXG5cdFx0cmV0dXJuIHtzdGFydF90aW1lLCBzdG9wX3RpbWUsIGVsYXBzZWRfbXN9O1xyXG5cdH1cclxufSIsImV4cG9ydCAqIGZyb20gJy4vX0VsYXBzZWRUaW1lJzsiLCIvKipcclxuICogRW1pdHRlZCBldmVudCBpbnRlcmZhY2VcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUV2ZW50PFQgPSBhbnk+IHtcclxuXHR0eXBlOiBzdHJpbmc7XHJcblx0dGltZTogbnVtYmVyO1xyXG5cdGRhdGE6IFQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWZhdWx0IG1heCBsaXN0ZW5lciBjb3VudFxyXG4gKi9cclxubGV0IERFRkFVTFRfTUFYX0xJU1RFTkVSUzogbnVtYmVyID0gMTA7XHJcblxyXG4vKipcclxuICogUHJpdmF0ZSBwcm9wcyBgU3ltYm9sYCBrZXkgbmFtZVxyXG4gKi9cclxuY29uc3QgUFJPUFMgPSBTeW1ib2woYF9fcHJpdmF0ZV9wcm9wc18ke0RhdGUubm93KCl9X19gKTtcclxuXHJcbi8qKlxyXG4gKiBAY2xhc3MgRXZlbnRFbWl0dGVyXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRXZlbnRFbWl0dGVyXHJcbntcclxuXHQvKipcclxuXHQgKiBFdmVudEVtaXR0ZXIgZ2xvYmFsIG1heCBsaXN0ZW5lcnNcclxuXHQgKiAtIHdhcm5zIGlmIGV4Y2VlZGVkIChoZWxwcyBmaW5kIG1lbW9yeSBsZWFrcylcclxuXHQgKi9cclxuXHRzdGF0aWMgZ2V0IG1heF9saXN0ZW5lcnMoKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiBERUZBVUxUX01BWF9MSVNURU5FUlM7XHJcblx0fVxyXG5cdHN0YXRpYyBzZXQgbWF4X2xpc3RlbmVycyh2YWx1ZTogYW55KXtcclxuXHRcdERFRkFVTFRfTUFYX0xJU1RFTkVSUyA9ICFpc05hTih2YWx1ZSA9IHBhcnNlSW50KHZhbHVlKSkgJiYgTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPj0gMSA/IHZhbHVlIDogMTA7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBJbnN0YW5jZSBcInByaXZhdGVcIiBwcm9wc1xyXG5cdCAqL1xyXG5cdFtQUk9QU106IHtcclxuXHRcdF9ldmVudHM6IHtbdHlwZTogc3RyaW5nXTogYW55fTtcclxuXHRcdF9tYXhfbGlzdGVuZXJzOiBudW1iZXJ8dW5kZWZpbmVkO1xyXG5cdH0gPSB7fSBhcyBhbnk7XHJcblxyXG5cdC8qKlxyXG5cdCAqIE1heCBsaXN0ZW5lcnMgY291bnQgKGRlZmF1bHQ6IGB1bmRlZmllbmRgIH4gYEV2ZW50RW1pdHRlci5tYXhfbGlzdGVuZXJzYClcclxuXHQgKiAtIEFjY2VwdHMgcG9zaXRpdmUgaW50ZWdlciBgbnVtYmVyYFxyXG5cdCAqIC0gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZFxyXG5cdCAqL1xyXG5cdGdldCBtYXhfbGlzdGVuZXJzKCk6IG51bWJlcnx1bmRlZmluZWQge1xyXG5cdFx0cmV0dXJuIHRoaXNbUFJPUFNdLl9tYXhfbGlzdGVuZXJzO1xyXG5cdH1cclxuXHRzZXQgbWF4X2xpc3RlbmVycyh2YWx1ZTogYW55KXtcclxuXHRcdHRoaXNbUFJPUFNdLl9tYXhfbGlzdGVuZXJzID0gIWlzTmFOKHZhbHVlID0gcGFyc2VJbnQodmFsdWUpKSAmJiBOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSAmJiB2YWx1ZSA+PSAwID8gdmFsdWUgOiBFdmVudEVtaXR0ZXIubWF4X2xpc3RlbmVycztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZSBuZXcgaW5zdGFuY2VcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcigpe1xyXG5cdFx0dGhpc1tQUk9QU10gPSB7XHJcblx0XHRcdF9ldmVudHM6IHt9LFxyXG5cdFx0XHRfbWF4X2xpc3RlbmVyczogdW5kZWZpbmVkLFxyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCB2YWxpZCBldmVudCB0eXBlXHJcblx0ICogXHJcblx0ICogQHBhcmFtIHR5cGUgLSBldmVudCB0eXBlL25hbWVcclxuXHQgKiBAcGFyYW0gdGhyb3dhYmxlIC0gZW5hYmxlIHRocm93aW5nIGVycm9yIHdoZW4gdHlwZSBpcyBpbnZhbGlkXHJcblx0ICogQHJldHVybnMgYHN0cmluZ2AgbG93ZXJjYXNlIGV2ZW50IG5hbWUgfiBgJydgIG9uIGVycm9yXHJcblx0ICovXHJcblx0c3RhdGljIHR5cGUodHlwZTogYW55LCB0aHJvd2FibGU6IGJvb2xlYW4gPSBmYWxzZSk6IHN0cmluZyB7XHJcblx0XHRsZXQgX3R5cGU6IHN0cmluZyA9ICcnO1xyXG5cdFx0aWYgKCEoJ3N0cmluZycgPT09IHR5cGVvZiB0eXBlICYmIChfdHlwZSA9IHR5cGUudHJpbSgpKSkpe1xyXG5cdFx0XHRjb25zdCBlcnJvciA9ICdJbnZhbGlkIGV2ZW50IHR5cGUuJztcclxuXHRcdFx0Y29uc29sZS53YXJuKGVycm9yLCB7dHlwZX0pO1xyXG5cdFx0XHRpZiAodGhyb3dhYmxlKSB0aHJvdyBuZXcgVHlwZUVycm9yKGVycm9yKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBfdHlwZTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCB2YWxpZCBldmVudCBsaXN0ZW5lciBjYWxsYmFjayBmdW5jdGlvbi5cclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gbGlzdGVuZXIgLSBldmVudCBsaXN0ZW5lclxyXG5cdCAqIEBwYXJhbSB0aHJvd2FibGUgLSBlbmFibGUgdGhyb3dpbmcgZXJyb3Igd2hlbiBsaXN0ZW5lciBpcyBpbnZhbGlkIFxyXG5cdCAqIEByZXR1cm5zIGAoZXZlbnQ6SUV2ZW50KT0+dm9pZGAgZXZlbnQgaGFuZGxlciB8IGB1bmRlZmluZWRgIG9uIGVycm9yXHJcblx0ICovXHJcblx0c3RhdGljIGxpc3RlbmVyKGxpc3RlbmVyOiAoZXZlbnQ6SUV2ZW50KT0+dm9pZCwgdGhyb3dhYmxlOiBib29sZWFuID0gZmFsc2UpOiAoKGV2ZW50OklFdmVudCk9PnZvaWQpfHVuZGVmaW5lZCB7XHJcblx0XHRsZXQgX2xpc3RlbmVyOiAoKGV2ZW50OklFdmVudCk9PnZvaWQpfHVuZGVmaW5lZDtcclxuXHRcdGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgbGlzdGVuZXIpIF9saXN0ZW5lciA9IGxpc3RlbmVyO1xyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdGNvbnN0IGVycm9yID0gJ0ludmFsaWQgZXZlbnQgbGlzdGVuZXIgY2FsbGJhY2sgZnVuY3Rpb24uJztcclxuXHRcdFx0Y29uc29sZS53YXJuKGVycm9yLCB7bGlzdGVuZXJ9KTtcclxuXHRcdFx0aWYgKHRocm93YWJsZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihlcnJvcik7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gX2xpc3RlbmVyO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0IGV2ZW50IGxpc3RlbmVyc1xyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSB0eXBlIC0gZXZlbnQgdHlwZS9uYW1lXHJcblx0ICogQHJldHVybnMgYCgoZXZlbnQ6SUV2ZW50KT0+dm9pZClbXWAgZXZlbnQgaGFuZGxlcnNcclxuXHQgKi9cclxuXHRsaXN0ZW5lcnModHlwZTogc3RyaW5nKTogKChldmVudDpJRXZlbnQpPT52b2lkKVtdIHtcclxuXHRcdGNvbnN0IHByb3BzID0gdGhpc1tQUk9QU10sIGxpc3RlbmVyczogKChldmVudDpJRXZlbnQpPT52b2lkKVtdID0gW107XHJcblx0XHRpZiAoKHR5cGUgPSBFdmVudEVtaXR0ZXIudHlwZSh0eXBlKSkgJiYgcHJvcHMuX2V2ZW50cy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSl7XHJcblx0XHRcdGNvbnN0IGxpc3RlbmVyOiBhbnkgPSBwcm9wcy5fZXZlbnRzW3R5cGVdO1xyXG5cdFx0XHRpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGxpc3RlbmVyKSBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XHJcblx0XHRcdGVsc2UgaWYgKEFycmF5LmlzQXJyYXkobGlzdGVuZXIpICYmIGxpc3RlbmVyLmxlbmd0aCl7XHJcblx0XHRcdFx0Zm9yIChjb25zdCB2YWwgb2YgbGlzdGVuZXIpe1xyXG5cdFx0XHRcdFx0aWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiB2YWwpIGxpc3RlbmVycy5wdXNoKHZhbCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbGlzdGVuZXJzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQ2hlY2sgaWYgZXZlbnQgbGlzdGVuZXIgZXhpc3RzXHJcblx0ICogXHJcblx0ICogQHBhcmFtIHR5cGUgLSBldmVudCB0eXBlL25hbWVcclxuXHQgKiBAcGFyYW0gbGlzdGVuZXIgLSBldmVudCBsaXN0ZW5lclxyXG5cdCAqIEByZXR1cm5zIGAoKGV2ZW50OklFdmVudCk9PnZvaWQpW11gIGV2ZW50IGhhbmRsZXJzXHJcblx0ICovXHJcblx0aGFzTGlzdGVuZXIodHlwZTogc3RyaW5nLCBsaXN0ZW5lcjogKGV2ZW50OklFdmVudCk9PnZvaWQpOiBib29sZWFuIHtcclxuXHRcdHJldHVybiB0aGlzLmxpc3RlbmVycyh0eXBlKS5maW5kSW5kZXgodiA9PiB2ID09PSBsaXN0ZW5lcikgPiAtMTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEVtaXQgZXZlbnRcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gdHlwZSAtIGV2ZW50IHR5cGUvbmFtZVxyXG5cdCAqIEBwYXJhbSBkYXRhIC0gZXZlbnQgZGF0YVxyXG5cdCAqIEByZXR1cm5zIGBib29sZWFuYCBjYXVnaHRcclxuXHQgKi9cclxuXHRlbWl0KHR5cGU6IHN0cmluZywgZGF0YT86IGFueSk6IGJvb2xlYW4ge1xyXG5cdFx0Y29uc3QgZXZlbnQgPSB7dHlwZSwgZGF0YSwgdGltZTogRGF0ZS5ub3coKX07XHJcblx0XHRjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycyh0eXBlID0gRXZlbnRFbWl0dGVyLnR5cGUodHlwZSwgdHJ1ZSkpO1xyXG5cdFx0aWYgKGxpc3RlbmVycy5sZW5ndGgpe1xyXG5cdFx0XHRmb3IgKGNvbnN0IGZuIG9mIGxpc3RlbmVycykgZm4uY2FsbCh0aGlzLCBldmVudCk7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAodHlwZSA9PT0gJ2Vycm9yJyl7XHJcblx0XHRcdGlmIChkYXRhIGluc3RhbmNlb2YgRXJyb3IpIHRocm93IGRhdGE7XHJcblx0XHRcdGNvbnN0IGVycm9yID0gJ1VuY2F1Z2h0LCB1bnNwZWNpZmllZCBcImVycm9yXCIgZXZlbnQuJztcclxuXHRcdFx0Y29uc29sZS53YXJuKGVycm9yLCB7ZXZlbnR9KTtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGVycm9yKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEFkZCBldmVudCBsaXN0ZW5lciB+IGVtaXRzICduZXdMaXN0ZW5lcicgZXZlbnQgaWYgYWRkZWQgKGFsaWFzIGBlbWl0dGVyLmFkZExpc3RlbmVyYClcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gdHlwZSAtIGV2ZW50IHR5cGUvbmFtZVxyXG5cdCAqIEBwYXJhbSBsaXN0ZW5lciAtIGV2ZW50IGxpc3RlbmVyIGNhbGxiYWNrIGZ1bmN0aW9uXHJcblx0ICogQHBhcmFtIG9uY2UgLSBvbmUgdGltZSBjYWxsYmFja1xyXG5cdCAqIEByZXR1cm5zIGBFdmVudEVtaXR0ZXJgIC0gYHRoaXNgIGluc3RhbmNlXHJcblx0ICovXHJcblx0b24odHlwZTogc3RyaW5nLCBsaXN0ZW5lcjogKGV2ZW50OklFdmVudCk9PnZvaWQsIG9uY2U6IGJvb2xlYW4gPSBmYWxzZSk6IEV2ZW50RW1pdHRlciB7XHJcblx0XHRyZXR1cm4gdGhpcy5hZGRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb25jZSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEFkZCBvbmUgdGltZSBldmVudCBsaXN0ZW5lciB+IGVtaXRzICduZXdMaXN0ZW5lcicgZXZlbnQgaWYgYWRkZWRcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gdHlwZSAtIGV2ZW50IHR5cGUvbmFtZVxyXG5cdCAqIEBwYXJhbSBsaXN0ZW5lciAtIGV2ZW50IGxpc3RlbmVyIGNhbGxiYWNrIGZ1bmN0aW9uXHJcblx0ICogQHJldHVybnMgYEV2ZW50RW1pdHRlcmAgLSBgdGhpc2AgaW5zdGFuY2VcclxuXHQgKi9cclxuXHRvbmNlKHR5cGU6IHN0cmluZywgbGlzdGVuZXI6IChldmVudDpJRXZlbnQpPT52b2lkKTogRXZlbnRFbWl0dGVyIHtcclxuXHRcdHJldHVybiB0aGlzLmFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEFkZCBldmVudCBzdWJzY3JpYmVyXHJcblx0ICogXHJcblx0ICogQHBhcmFtIHR5cGUgLSBldmVudCB0eXBlL25hbWVcclxuXHQgKiBAcGFyYW0gbGlzdGVuZXIgLSBldmVudCBjYWxsYmFjayBoYW5kbGVyXHJcblx0ICogQHJldHVybnMgYCgoKT0+dm9pZClgIHVuc3Vic2NyaWJlIGNhbGxiYWNrXHJcblx0ICovXHJcblx0c3Vic2NyaWJlKHR5cGU6IHN0cmluZywgbGlzdGVuZXI6IChldmVudDpJRXZlbnQpPT52b2lkKTogKCk9PnZvaWQge1xyXG5cdFx0dHlwZSA9IEV2ZW50RW1pdHRlci50eXBlKHR5cGUsIHRydWUpO1xyXG5cdFx0bGlzdGVuZXIgPSBFdmVudEVtaXR0ZXIubGlzdGVuZXIobGlzdGVuZXIsIHRydWUpIGFzIChldmVudDpJRXZlbnQpPT52b2lkO1xyXG5cdFx0dGhpcy5hZGRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcik7XHJcblx0XHRyZXR1cm4gKCk6IHZvaWQgPT4gdm9pZCB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEFkZCBldmVudCBsaXN0ZW5lciB+IGVtaXRzICduZXdMaXN0ZW5lcicgZXZlbnQgaWYgYWRkZWRcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gdHlwZSAtIGV2ZW50IHR5cGUvbmFtZVxyXG5cdCAqIEBwYXJhbSBsaXN0ZW5lciAtIGV2ZW50IGxpc3RlbmVyIGNhbGxiYWNrIGZ1bmN0aW9uXHJcblx0ICogQHBhcmFtIG9uY2UgLSBvbmUgdGltZSBjYWxsYmFja1xyXG5cdCAqIEByZXR1cm5zIGBFdmVudEVtaXR0ZXJgIC0gYHRoaXNgIGluc3RhbmNlXHJcblx0ICovXHJcblx0YWRkTGlzdGVuZXIodHlwZTogc3RyaW5nLCBsaXN0ZW5lcjogKGV2ZW50OklFdmVudCk9PnZvaWQsIG9uY2U6IGJvb2xlYW4gPSBmYWxzZSk6IEV2ZW50RW1pdHRlciB7XHJcblx0XHR0eXBlID0gRXZlbnRFbWl0dGVyLnR5cGUodHlwZSwgdHJ1ZSk7XHJcblx0XHRsZXQgaGFuZGxlciA9IChsaXN0ZW5lciA9IEV2ZW50RW1pdHRlci5saXN0ZW5lcihsaXN0ZW5lciwgdHJ1ZSkgYXMgKGV2ZW50OklFdmVudCk9PnZvaWQpO1xyXG5cclxuXHRcdC8vb25lIHRpbWUgbGlzdGVuZXJcclxuXHRcdGlmIChvbmNlKXtcclxuXHRcdFx0bGV0IGZpcmVkOiBib29sZWFuID0gZmFsc2U7XHJcblx0XHRcdGhhbmRsZXIgPSAoZXZlbnQ6IElFdmVudCk6IHZvaWQgPT4ge1xyXG5cdFx0XHRcdGlmIChmaXJlZCkgcmV0dXJuO1xyXG5cdFx0XHRcdGZpcmVkID0gdHJ1ZTtcclxuXHRcdFx0XHRsaXN0ZW5lci5jYWxsKHRoaXMsIGV2ZW50KTtcclxuXHRcdFx0XHR0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGhhbmRsZXIpO1xyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHQvL0FkZCBldmVudCBsaXN0ZW5lciBpZiBuZXdcclxuXHRcdGNvbnN0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzKHR5cGUpO1xyXG5cdFx0aWYgKGxpc3RlbmVycy5maW5kSW5kZXgodiA9PiB2ID09PSBoYW5kbGVyKSA8IDApe1xyXG5cdFx0XHRjb25zdCBwcm9wcyA9IHRoaXNbUFJPUFNdO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcclxuICBcdFx0Ly8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxyXG5cdFx0XHRpZiAocHJvcHMuX2V2ZW50cy5uZXdMaXN0ZW5lcikgdGhpcy5lbWl0KCduZXdMaXN0ZW5lcicsIHt0eXBlLCBoYW5kbGVyfSk7XHJcblxyXG5cdFx0XHQvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIGRvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cclxuXHRcdFx0cHJvcHMuX2V2ZW50c1t0eXBlXSA9IGxpc3RlbmVycy5sZW5ndGggPyBbLi4ubGlzdGVuZXJzLCBoYW5kbGVyXSA6IGhhbmRsZXI7XHJcblxyXG5cdFx0XHQvLyBNYXggbGlzdGVuZXJzIGxlYWsgd2FybmluZ1xyXG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheShwcm9wcy5fZXZlbnRzW3R5cGVdKSl7XHJcblx0XHRcdFx0Y29uc3QgbGVuID0gcHJvcHMuX2V2ZW50c1t0eXBlXS5sZW5ndGg7XHJcblx0XHRcdFx0Y29uc3QgbWF4ID0gJ251bWJlcicgPT09IHR5cGVvZiBwcm9wcy5fbWF4X2xpc3RlbmVycyA/IHByb3BzLl9tYXhfbGlzdGVuZXJzIDogRXZlbnRFbWl0dGVyLm1heF9saXN0ZW5lcnM7XHJcblx0XHRcdFx0aWYgKCdudW1iZXInID09PSB0eXBlb2YgbWF4ICYmIG1heCA+IDAgJiYgbGVuID4gbWF4KXtcclxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoYEV2ZW50RW1pdHRlciBwb3NzaWJsZSBtZW1vcnkgbGVhayBkZXRlY3RlZCAtICR7bGVufSBcIiR7dHlwZX1cIiBldmVudCBsaXN0ZW5lcnMgYWRkZWQsIG1heCBjb3VudCBpcyAke21heH0uYCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRlbHNlIGNvbnNvbGUud2FybihgVGhpcyBcIiR7dHlwZX1cIiBldmVudCBsaXN0ZW5lciBpcyBhbHJlYWR5IGFkZGVkLmApO1xyXG5cdFx0XHJcblx0XHQvL3Jlc3VsdFxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXIgfiBlbWl0cyAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmIHJlbW92ZWRcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gdHlwZSAtIGV2ZW50IHR5cGUvbmFtZVxyXG5cdCAqIEBwYXJhbSBsaXN0ZW5lciAtIGV2ZW50IGxpc3RlbmVyIGNhbGxiYWNrIGZ1bmN0aW9uXHJcblx0ICogQHJldHVybnMgYEV2ZW50RW1pdHRlcmAgLSBgdGhpc2AgaW5zdGFuY2VcclxuXHQgKi9cclxuXHRyZW1vdmVMaXN0ZW5lcih0eXBlOiBzdHJpbmcsIGxpc3RlbmVyOiAoZXZlbnQ6SUV2ZW50KT0+dm9pZCk6IEV2ZW50RW1pdHRlciB7XHJcblx0XHRpZiAoISh0eXBlID0gRXZlbnRFbWl0dGVyLnR5cGUodHlwZSkpKSByZXR1cm4gdGhpcztcclxuXHRcdGNvbnN0IHByb3BzID0gdGhpc1tQUk9QU107XHJcblx0XHRpZiAoIShwcm9wcy5fZXZlbnRzLmhhc093blByb3BlcnR5KHR5cGUpKSkgcmV0dXJuIHRoaXM7XHJcblx0XHRsZXQgcmVtb3ZlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkocHJvcHMuX2V2ZW50c1t0eXBlXSkpe1xyXG5cdFx0XHRjb25zdCBfbGlzdGVuZXJzID0gcHJvcHMuX2V2ZW50c1t0eXBlXSBhcyAoKGV2ZW50OklFdmVudCk9PnZvaWQpW107XHJcblx0XHRcdGNvbnN0IGluZGV4ID0gX2xpc3RlbmVycy5maW5kSW5kZXgodiA9PiB2ID09PSBsaXN0ZW5lcik7XHJcblx0XHRcdF9saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuXHRcdFx0cmVtb3ZlZCA9IHRydWU7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmIChwcm9wcy5fZXZlbnRzW3R5cGVdID09PSBsaXN0ZW5lcil7XHJcblx0XHRcdGRlbGV0ZSBwcm9wcy5fZXZlbnRzW3R5cGVdO1xyXG5cdFx0XHRyZW1vdmVkID0gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdGlmIChyZW1vdmVkKXtcclxuXHRcdFx0aWYgKCF0aGlzLmxpc3RlbmVycyh0eXBlKS5sZW5ndGgpIGRlbGV0ZSBwcm9wcy5fZXZlbnRzW3R5cGVdO1xyXG5cdFx0XHRpZiAocHJvcHMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcikgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHt0eXBlLCBsaXN0ZW5lcn0pO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBSZW1vdmUgYWxsIGxpc3RlbmVycyB+IGVtaXRzICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgZm9yIGVhY2ggcmVtb3ZlZCBsaXN0ZW5lclxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSB0eXBlIC0gZXZlbnQgdHlwZS9uYW1lIFxyXG5cdCAqIEByZXR1cm5zIGBFdmVudEVtaXR0ZXJgIC0gYHRoaXNgIGluc3RhbmNlXHJcblx0ICovXHJcblx0cmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGU6IHN0cmluZyk6IEV2ZW50RW1pdHRlciB7XHJcblx0XHRpZiAoISh0eXBlID0gRXZlbnRFbWl0dGVyLnR5cGUodHlwZSkpKSByZXR1cm4gdGhpcztcclxuXHRcdGNvbnN0IHByb3BzID0gdGhpc1tQUk9QU107XHJcblx0XHRpZiAoIShwcm9wcy5fZXZlbnRzLmhhc093blByb3BlcnR5KHR5cGUpKSkgcmV0dXJuIHRoaXM7XHJcblx0XHRjb25zdCBlbWl0X3JlbW92ZV9saXN0ZW5lciA9IHR5cGUgIT09ICdyZW1vdmVMaXN0ZW5lcicgJiYgcHJvcHMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcjtcclxuXHRcdGNvbnN0IGxpc3RlbmVycyA9IGVtaXRfcmVtb3ZlX2xpc3RlbmVyID8gdGhpcy5saXN0ZW5lcnModHlwZSkgOiBbXTtcclxuXHRcdGRlbGV0ZSBwcm9wcy5fZXZlbnRzW3R5cGVdO1xyXG5cdFx0aWYgKGVtaXRfcmVtb3ZlX2xpc3RlbmVyICYmIGxpc3RlbmVycy5sZW5ndGgpe1xyXG5cdFx0XHRmb3IgKGNvbnN0IGxpc3RlbmVyIG9mIGxpc3RlbmVycykgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHt0eXBlLCBsaXN0ZW5lcn0pO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG59IiwiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnLi9fRXZlbnRFbWl0dGVyJztcclxuXHJcbi8qKlxyXG4gKiBHbG9iYWwgZXZlbnRzIGVtaXR0ZXJcclxuICovXHJcbmV4cG9ydCBjb25zdCBFdmVudHMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7IiwiZXhwb3J0ICogZnJvbSAnLi9fRXZlbnRFbWl0dGVyJztcclxuZXhwb3J0ICogZnJvbSAnLi9fRXZlbnRzJzsiLCIvKipcclxuICogRXhjZXB0aW9uIGVycm9yIGludGVyZmFjZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJRXhjZXB0aW9uRXJyb3Ige1xyXG5cdG1lc3NhZ2U6IHN0cmluZztcclxuXHRuYW1lOiBzdHJpbmc7XHJcblx0Y29kZTogc3RyaW5nfG51bWJlcjtcclxuXHRkYXRhOiBhbnk7XHJcblx0dGltZTogbnVtYmVyO1xyXG5cdHRvU3RyaW5nOiAoKSA9PiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgU3ltYm9sYCBwcml2YXRlIHByb3BzIGtleSBuYW1lXHJcbiAqL1xyXG5jb25zdCBQUk9QUyA9IFN5bWJvbChgX19wcml2YXRlX3Byb3BzXyR7RGF0ZS5ub3coKX1fX2ApO1xyXG5cclxuLyoqXHJcbiAqIGBFeGNlcHRpb25gIGV4dGVuZHMgYEVycm9yYCB+IGxpa2UgYERPTUV4Y2VwdGlvbmBcclxuICogXHJcbiAqIC0gbWVzc2FnZTogYHN0cmluZ2BcclxuICogLSBuYW1lOiBgc3RyaW5nYFxyXG4gKiAtIGNvZGU6IGBudW1iZXJgXHJcbiAqIC0gdG9TdHJpbmc6IGAoKT0+c3RyaW5nYFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEV4Y2VwdGlvbiBleHRlbmRzIEVycm9yIGltcGxlbWVudHMgSUV4Y2VwdGlvbkVycm9yXHJcbntcclxuXHQvKipcclxuXHQgKiBQcml2YXRlIHByb3BzXHJcblx0ICovXHJcblx0W1BST1BTXToge1xyXG5cdFx0bWVzc2FnZTogc3RyaW5nO1xyXG5cdFx0bmFtZTogc3RyaW5nO1xyXG5cdFx0Y29kZTogc3RyaW5nfG51bWJlcjtcclxuXHRcdGRhdGE6IGFueTtcclxuXHRcdHRpbWU6IG51bWJlcjtcclxuXHR9ID0ge30gYXMgYW55O1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEVycm9yIG1lc3NhZ2UgKGRlZmF1bHQ6IGAnVW5zcGVjaWZpZWQgZXhjZXB0aW9uIG1lc3NhZ2UuJ2ApXHJcblx0ICovXHJcblx0Z2V0IG1lc3NhZ2UoKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiB0aGlzW1BST1BTXS5tZXNzYWdlO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRXJyb3IgbmFtZSAoZGVmYXVsdDogYCdFeGNlcHRpb24nYClcclxuXHQgKi9cclxuXHRnZXQgbmFtZSgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIHRoaXNbUFJPUFNdLm5hbWU7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBFcnJvciBjb2RlIC0gYHN0cmluZ2AgfCBmaW5pdGUvcGFyc2VkIGBpbnRlZ2VyYCAoZGVmYXVsdDogYDBgKVxyXG5cdCAqL1xyXG5cdGdldCBjb2RlKCk6IHN0cmluZ3xudW1iZXIge1xyXG5cdFx0cmV0dXJuIHRoaXNbUFJPUFNdLmNvZGU7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEVycm9yIGRhdGFcclxuXHQgKi9cclxuXHRnZXQgZGF0YSgpOiBhbnkge1xyXG5cdFx0cmV0dXJuIHRoaXNbUFJPUFNdLmRhdGE7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEVycm9yIGRhdGFcclxuXHQgKi9cclxuXHRnZXQgdGltZSgpOiBhbnkge1xyXG5cdFx0cmV0dXJuIHRoaXNbUFJPUFNdLnRpbWU7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBOZXcgYElFeGNlcHRpb25FcnJvcmAgaW5zdGFuY2VcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gbWVzc2FnZSAtIGVycm9yIG1lc3NhZ2UgKGRlZmF1bHQ6IGAnVW5zcGVjaWZpZWQgZXhjZXB0aW9uIG1lc3NhZ2UuJ2ApXHJcblx0ICogQHBhcmFtIG5hbWUgLSBlcnJvciBuYW1lIChkZWZhdWx0OiBgJ0V4Y2VwdGlvbidgKVxyXG5cdCAqIEBwYXJhbSBjb2RlIC0gZXJyb3IgY29kZSAtIGBzdHJpbmdgIHwgZmluaXRlL3BhcnNlZCBgaW50ZWdlcmAgKGRlZmF1bHQ6IGAwYClcclxuXHQgKiBAcGFyYW0gZGF0YSAtIGVycm9yIGRhdGFcclxuXHQgKiBAcGFyYW0gdGltZSAtIGVycm9yIHRpbWVzdGFtcCBtaWxsaXNlY29uZHMgKGRlZmF1bHQ6IGBEYXRlLm5vdygpYClcclxuXHQgKiBAcmV0dXJucyBgSUV4Y2VwdGlvbkVycm9yYFxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcsIG5hbWU/OiBzdHJpbmcsIGNvZGU/OiBzdHJpbmd8bnVtYmVyLCBkYXRhPzogYW55LCB0aW1lPzogbnVtYmVyKXtcclxuXHRcdGNvbnN0IF90aW1lID0gRGF0ZS5ub3coKTtcclxuXHRcdHN1cGVyKG1lc3NhZ2UgPSBtZXNzYWdlICYmICdzdHJpbmcnID09PSB0eXBlb2YgbWVzc2FnZSAmJiAobWVzc2FnZSA9IG1lc3NhZ2UudHJpbSgpKSA/IG1lc3NhZ2UgOiAnVW5zcGVjaWZpZWQgZXhjZXB0aW9uIG1lc3NhZ2UuJyk7XHJcblx0XHRpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBjb2RlKSBjb2RlID0gKGNvZGUgPSBjb2RlLnRyaW0oKSkgPyBjb2RlIDogMDtcclxuXHRcdGVsc2UgaWYgKCEoJ251bWJlcicgPT09IHR5cGVvZiBjb2RlICYmICFpc05hTihjb2RlID0gcGFyc2VJbnQoYCR7Y29kZX1gKSkgJiYgTnVtYmVyLmlzSW50ZWdlcihjb2RlKSAmJiBOdW1iZXIuaXNGaW5pdGUoY29kZSkpKSBjb2RlID0gMDtcclxuXHRcdHRoaXNbUFJPUFNdID0ge1xyXG5cdFx0XHRtZXNzYWdlLFxyXG5cdFx0XHRuYW1lOiBuYW1lICYmICdzdHJpbmcnID09PSB0eXBlb2YgbmFtZSAmJiAobmFtZSA9IG5hbWUudHJpbSgpKSA/IG5hbWUgOiAnRXhjZXB0aW9uJyxcclxuXHRcdFx0Y29kZSxcclxuXHRcdFx0ZGF0YSxcclxuXHRcdFx0dGltZTogdGltZSAmJiAhaXNOYU4odGltZSA9IHBhcnNlSW50KHRpbWUgYXMgYW55KSkgJiYgTnVtYmVyLmlzSW50ZWdlcih0aW1lKSAmJiBOdW1iZXIuaXNGaW5pdGUodGltZSkgJiYgdGltZSA+PSAwID8gdGltZSA6IF90aW1lLFxyXG5cdFx0fTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogR2V0IGVycm9yIGBzdHJpbmdgXHJcblx0ICovXHJcblx0dG9TdHJpbmcoKTogc3RyaW5nIHtcclxuXHRcdGNvbnN0IHttZXNzYWdlLCBuYW1lLCBjb2RlfSA9IHRoaXM7XHJcblx0XHRsZXQgdGV4dCA9IG5hbWUgKyAnOic7XHJcblx0XHRpZiAoY29kZSAhPT0gMCkgdGV4dCArPSAnIFsnICsgY29kZSArICddJztcclxuXHRcdHRleHQgKz0gJyAnICsgbWVzc2FnZTtcclxuXHRcdHJldHVybiB0ZXh0O1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlIG5ldyBgRXhjZXB0aW9uYFxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBtZXNzYWdlIC0gZXJyb3IgbWVzc2FnZSAoZGVmYXVsdDogYCdVbnNwZWNpZmllZCBleGNlcHRpb24gbWVzc2FnZS4nYClcclxuXHQgKiBAcGFyYW0gbmFtZSAtIGVycm9yIG5hbWUgKGRlZmF1bHQ6IGAnRXhjZXB0aW9uJ2ApXHJcblx0ICogQHBhcmFtIGNvZGUgLSBlcnJvciBjb2RlIC0gYHN0cmluZ2AgfCBmaW5pdGUvcGFyc2VkIGBpbnRlZ2VyYCAoZGVmYXVsdDogYDBgKVxyXG5cdCAqIEBwYXJhbSBkYXRhIC0gZXJyb3IgZGF0YVxyXG5cdCAqIEBwYXJhbSB0aW1lIC0gZXJyb3IgdGltZXN0YW1wIG1pbGxpc2Vjb25kcyAoZGVmYXVsdDogYERhdGUubm93KClgKVxyXG5cdCAqIEByZXR1cm5zIGBJRXhjZXB0aW9uRXJyb3JgXHJcblx0ICovXHJcblx0c3RhdGljIGVycm9yKG1lc3NhZ2U/OiBzdHJpbmcsIG5hbWU/OiBzdHJpbmcsIGNvZGU/OiBzdHJpbmd8bnVtYmVyLCBkYXRhPzogYW55LCB0aW1lPzogbnVtYmVyKTogSUV4Y2VwdGlvbkVycm9yIHtcclxuXHRcdHJldHVybiBuZXcgRXhjZXB0aW9uKG1lc3NhZ2UsIG5hbWUsIGNvZGUsIGRhdGEsIHRpbWUpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBDcmVhdGUgbmV3IGBFeGNlcHRpb25gIGZyb20gcGFyc2VkIGVycm9yXHJcblx0ICogXHJcblx0ICogQHBhcmFtIGVycm9yIC0gcGFyc2UgZXJyb3IgdmFsdWUgKGkuZS4gYHN0cmluZ2AgbWVzc2FnZSBvciBFcnJvci9vYmplY3QvdmFsdWVzIHttZXNzYWdlOiBgc3RyaW5nYCwgbmFtZTogYHN0cmluZ3x1bmRlZmluZWRgLCBjb2RlOiBgc3RyaW5nfG51bWJlcnx1bmRlZmluZWRgLCBkYXRhOiBgYW55YCwgdGltZTogYG51bWJlcmAgPz8gYERhdGUubm93KClgfSlcclxuXHQgKiBAcmV0dXJucyBgSUV4Y2VwdGlvbkVycm9yYFxyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShlcnJvcj86IGFueSk6IElFeGNlcHRpb25FcnJvciB7XHJcblx0XHRjb25zdCB0aW1lID0gRGF0ZS5ub3coKTtcclxuXHRcdGNvbnN0IF9lcnJvcjoge1xyXG5cdFx0XHRtZXNzYWdlOiBzdHJpbmd8dW5kZWZpbmVkLFxyXG5cdFx0XHRuYW1lOiBzdHJpbmd8dW5kZWZpbmVkLFxyXG5cdFx0XHRjb2RlOiBzdHJpbmd8bnVtYmVyfHVuZGVmaW5lZCxcclxuXHRcdFx0ZGF0YTogYW55fHVuZGVmaW5lZCxcclxuXHRcdFx0dGltZTogbnVtYmVyfHVuZGVmaW5lZCxcclxuXHRcdH0gPSB7fSBhcyBhbnk7XHJcblx0XHRjb25zdCBfZ2V0X3N0ciA9ICh2YWw6IGFueSk6IHN0cmluZ3x1bmRlZmluZWQgPT4gJ3N0cmluZycgPT09IHR5cGVvZiB2YWwgJiYgKHZhbCA9IHZhbC50cmltKCkpID8gdmFsIDogdW5kZWZpbmVkO1xyXG5cdFx0Y29uc3QgX2dldF9pbnQgPSAodmFsOiBhbnkpOiBudW1iZXJ8dW5kZWZpbmVkID0+ICFpc05hTih2YWwgPSBwYXJzZUludCh2YWwpKSAmJiBOdW1iZXIuaXNJbnRlZ2VyKHZhbCkgJiYgTnVtYmVyLmlzRmluaXRlKHZhbCkgJiYgdmFsID49IDAgPyB2YWwgOiB1bmRlZmluZWQ7XHJcblx0XHRjb25zdCBfZ2V0X2NvZGUgPSAodmFsOiBhbnkpOiBzdHJpbmd8bnVtYmVyfHVuZGVmaW5lZCA9PiB7XHJcblx0XHRcdGxldCB0bXA6IHN0cmluZ3xudW1iZXJ8dW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRpZiAoKHRtcCA9IF9nZXRfaW50KHZhbCkpICE9PSB1bmRlZmluZWQpIHJldHVybiB0bXA7XHJcblx0XHRcdGlmICgodG1wID0gX2dldF9zdHIodmFsKSkgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHRtcDtcclxuXHRcdFx0cmV0dXJuIHRtcDtcclxuXHRcdH07XHJcblx0XHRpZiAoZXJyb3IgJiYgJ29iamVjdCcgPT09IHR5cGVvZiBlcnJvcil7XHJcblx0XHRcdGxldCBwYXJzZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoZXJyb3IpKXtcclxuXHRcdFx0XHRjb25zdCBpdCA9IGVycm9yW1N5bWJvbC5pdGVyYXRvcl07XHJcblx0XHRcdFx0aWYgKFsndmFsdWVzJywgJ2VudHJpZXMnXS5pbmNsdWRlcyhpdD8ubmFtZSkgfHwgJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGl0KSBlcnJvciA9IFsuLi5lcnJvcl07XHJcblx0XHRcdFx0aWYgKGVycm9yLmxlbmd0aCl7XHJcblx0XHRcdFx0XHRfZXJyb3IubWVzc2FnZSA9IF9nZXRfc3RyKGVycm9yWzBdKTtcclxuXHRcdFx0XHRcdF9lcnJvci5uYW1lID0gX2dldF9zdHIoZXJyb3JbMV0pO1xyXG5cdFx0XHRcdFx0X2Vycm9yLmNvZGUgPSBfZ2V0X2NvZGUoZXJyb3JbMl0pO1xyXG5cdFx0XHRcdFx0X2Vycm9yLmRhdGEgPSBlcnJvclszXTtcclxuXHRcdFx0XHRcdF9lcnJvci50aW1lID0gX2dldF9pbnQoZXJyb3JbNF0pO1xyXG5cdFx0XHRcdFx0cGFyc2VkID0gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCFwYXJzZWQgJiYgZXJyb3IgaW5zdGFuY2VvZiBFcnJvcil7XHJcblx0XHRcdFx0Y29uc3QgZXJyOiBhbnkgPSBlcnJvcjtcclxuXHRcdFx0XHRfZXJyb3IubWVzc2FnZSA9IF9nZXRfc3RyKGVyci5tZXNzYWdlKTtcclxuXHRcdFx0XHRfZXJyb3IubmFtZSA9IF9nZXRfc3RyKGVyci5uYW1lKTtcclxuXHRcdFx0XHRfZXJyb3IuY29kZSA9IF9nZXRfY29kZShlcnIuY29kZSk7XHJcblx0XHRcdFx0X2Vycm9yLmRhdGEgPSBlcnIuZGF0YTtcclxuXHRcdFx0XHRfZXJyb3IudGltZSA9IF9nZXRfaW50KGVyci50aW1lKTtcclxuXHRcdFx0XHRwYXJzZWQgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICghcGFyc2VkKXtcclxuXHRcdFx0XHRfZXJyb3IubWVzc2FnZSA9IF9nZXRfc3RyKGVycm9yLm1lc3NhZ2UpO1xyXG5cdFx0XHRcdF9lcnJvci5uYW1lID0gX2dldF9zdHIoZXJyb3IubmFtZSk7XHJcblx0XHRcdFx0X2Vycm9yLmNvZGUgPSBfZ2V0X2NvZGUoZXJyb3IuY29kZSk7XHJcblx0XHRcdFx0X2Vycm9yLmRhdGEgPSBlcnJvci5kYXRhO1xyXG5cdFx0XHRcdF9lcnJvci50aW1lID0gX2dldF9pbnQoZXJyb3IudGltZSk7XHJcblx0XHRcdFx0cGFyc2VkID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0ZWxzZSBfZXJyb3IubWVzc2FnZSA9IF9nZXRfc3RyKGVycm9yKTtcclxuXHRcdHJldHVybiBuZXcgRXhjZXB0aW9uKFxyXG5cdFx0XHRfZXJyb3IubWVzc2FnZSA/PyAnVW5rbm93biBleGNlcHRpb24gZXJyb3IuJyxcclxuXHRcdFx0X2Vycm9yLm5hbWUgPz8gJ0Vycm9yJyxcclxuXHRcdFx0X2Vycm9yLmNvZGUsXHJcblx0XHRcdF9lcnJvci5kYXRhLFxyXG5cdFx0XHRfZXJyb3IudGltZSA/PyB0aW1lLFxyXG5cdFx0KTtcclxuXHR9XHJcbn0iLCJleHBvcnQgKiBmcm9tICcuL19FeGNlcHRpb24nOyIsImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSUV2ZW50IH0gZnJvbSAnLi4vRXZlbnRFbWl0dGVyJztcclxuXHJcbi8qKlxyXG4gKiBUYXNrIHN0YXR1cyB0eXBlXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUU3RhdHVzID0gJ25ldycgfCAncnVubmluZycgfCAnc3RvcHBlZCcgfCAnZmFpbGVkJyB8ICdkb25lJztcclxuXHJcbi8qKlxyXG4gKiBUYXNrIHN0YXR1c2VzIGxpc3RcclxuICovXHJcbmV4cG9ydCBjb25zdCBUQVNLX1NUQVRVU0VTOiBUU3RhdHVzW10gPSBbJ25ldycsICdydW5uaW5nJywgJ3N0b3BwZWQnLCAnZmFpbGVkJywgJ2RvbmUnXTtcclxuXHJcbi8qKlxyXG4gKiBUYXNrIGludGVyZmFjZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJVGFzayB7XHJcblx0bmFtZTogc3RyaW5nO1xyXG5cdGxhYmVsOiBzdHJpbmc7XHJcblx0bGlua2VkOiBib29sZWFuO1xyXG5cdHByZWNpc2lvbjogbnVtYmVyO1xyXG5cdGV2ZW50X2RlYm91bmNlOiBudW1iZXI7XHJcblx0cHJvZ3Jlc3M6IG51bWJlcjtcclxuXHR0b3RhbDogbnVtYmVyO1xyXG5cdHZhbHVlOiBudW1iZXI7XHJcblx0ZXJyb3I6IHN0cmluZztcclxuXHRzdGF0dXM6IFRTdGF0dXM7XHJcblx0c3RhcnRUaW1lOiBudW1iZXI7XHJcblx0c3RvcFRpbWU6IG51bWJlcjtcclxuXHRlbGFwc2VkVGltZTogbnVtYmVyO1xyXG5cdGNvbXBsZXRlOiBib29sZWFuO1xyXG5cdGl0ZW06IGFueTtcclxufVxyXG5cclxuLyoqXHJcbiAqIERlZmF1bHQgZXZlbnQgZGVib3VuY2UgbWlsbGlzZWNvbmRzXHJcbiAqL1xyXG5sZXQgREVGQVVMVF9FVkVOVF9ERUJPVU5DRTogbnVtYmVyID0gMjAwO1xyXG5cclxuLyoqXHJcbiAqIERlZmF1bHQgcHJlY2lzaW9uIH4gcm91bmQgZGVjaW1hbCBwbGFjZXNcclxuICovXHJcbmxldCBERUZBVUxUX1BSRUNJU0lPTjogbnVtYmVyID0gMjtcclxuXHJcbi8qKlxyXG4gKiBIZWxwZXIgLSBwYXJzZSBwb3NpdGl2ZSBudW1iZXJcclxuICogXHJcbiAqIEBwYXJhbSB2YWxcclxuICogQHBhcmFtIF9kZWZhdWx0XHJcbiAqIEBwYXJhbSBfYmxhbmtcclxuICogQHJldHVybnMgYG51bWJlcmBcclxuICovXHJcbmNvbnN0IF9wb3NfbnVtID0gKHZhbDogYW55LCBfZGVmYXVsdDogbnVtYmVyID0gMCwgX2JsYW5rOiBudW1iZXIgPSAwKTogbnVtYmVyID0+IHtcclxuXHRpZiAoW3VuZGVmaW5lZCwgbnVsbF0uaW5jbHVkZXModmFsKSB8fCAnc3RyaW5nJyA9PT0gdHlwZW9mIHZhbCAmJiAhKHZhbCA9IHZhbC50cmltKCkpKSByZXR1cm4gX2JsYW5rO1xyXG5cdGlmICghaXNOYU4odmFsID0gcGFyc2VGbG9hdCh2YWwpKSAmJiBOdW1iZXIuaXNGaW5pdGUodmFsKSAmJiB2YWwgPj0gMCkgcmV0dXJuIHZhbDtcclxuXHRyZXR1cm4gX2RlZmF1bHQ7XHJcbn07XHJcblxyXG4vKipcclxuICogSGVscGVyIC0gcGFyc2UgcG9zaXRpdmUgaW50ZWdlclxyXG4gKiBcclxuICogQHBhcmFtIHZhbFxyXG4gKiBAcGFyYW0gX2RlZmF1bHRcclxuICogQHBhcmFtIF9ibGFua1xyXG4gKiBAcmV0dXJucyBgbnVtYmVyYCBpbnRlZ2VyXHJcbiAqL1xyXG5jb25zdCBfcG9zX2ludCA9ICh2YWw6IGFueSwgX2RlZmF1bHQ6IG51bWJlciA9IDAsIF9ibGFuazogbnVtYmVyID0gMCk6IG51bWJlciA9PiBwYXJzZUludChfcG9zX251bSh2YWwsIF9kZWZhdWx0LCBfYmxhbmspICsgJycpO1xyXG5cclxuLyoqXHJcbiAqIEhlbHBlciAtIHJvdW5kIG51bWJlclxyXG4gKiBcclxuICogQHBhcmFtIHZhbCAtIHJvdW5kIHZhbHVlXHJcbiAqIEBwYXJhbSBwbGFjZXMgLSBwcmVjaXNpb24gZGVjaW1hbCBwbGFjZXMgW2RlZmF1bHQ6IGBERUZBVUxUX1BSRUNJU0lPTmBdXHJcbiAqIEByZXR1cm5zIGBudW1iZXJgIHJvdW5kZWRcclxuICovXHJcbmNvbnN0IF9yb3VuZCA9ICh2YWw6IG51bWJlciwgcGxhY2VzPzogbnVtYmVyKTogbnVtYmVyID0+IHtcclxuXHRjb25zdCBwID0gMTAgKiogX3Bvc19pbnQocGxhY2VzLCBERUZBVUxUX1BSRUNJU0lPTiwgREVGQVVMVF9QUkVDSVNJT04pO1xyXG5cdHJldHVybiBNYXRoLnJvdW5kKCh2YWwgKyBOdW1iZXIuRVBTSUxPTikgKiBwKSAvIHA7XHJcbn07XHJcblxyXG4vKipcclxuICogSGVscGVyIC0gY3VzdG9tIGBKU09OLnN0cmluZ2lmeWAgd2hpY2ggaWdub3JlcyBzZWxmIHJlZmVyZW5jZXMgfiByZXR1cm5zIGAnbnVsbCdgIGZvciBgdW5kZWZpbmVkYCB2YWx1ZVxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlXHJcbiAqIEByZXR1cm5zIGBzdHJpbmdgIGpzb25cclxuICovXHJcbmNvbnN0IF9qc29uX3N0ciA9ICh2YWx1ZTogYW55KTogc3RyaW5nID0+IHtcclxuXHRpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgdmFsdWUgPSBudWxsO1xyXG5cdGNvbnN0IHNlZW46IGFueVtdID0gW107XHJcblx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlLCBmdW5jdGlvbihfLCB2YWwpe1xyXG5cdFx0aWYgKHZhbCAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIHZhbCl7XHJcblx0XHRcdGlmIChzZWVuLmluZGV4T2YodmFsKSA+IC0xKSByZXR1cm47XHJcblx0XHRcdHNlZW4ucHVzaCh2YWwpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHZhbDtcclxuXHR9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBIZWxwZXIgLSBwYXJzZSBub3JtYWxpemVkIHN0cmluZyB2YWx1ZVxyXG4gKiBcclxuICogQHBhcmFtIHZhbFxyXG4gKiBAcmV0dXJucyBgc3RyaW5nYCBub3JtYWxpemVkIGFuZCB0cmltbWVkXHJcbiAqL1xyXG5jb25zdCBfZ2V0X3N0ciA9ICh2YWw6IGFueSk6IHN0cmluZyA9PiB7XHJcblx0aWYgKFt1bmRlZmluZWQsIG51bGxdLmluY2x1ZGVzKHZhbCkpIHJldHVybiAnJztcclxuXHRsZXQgdmFsdWU6IHN0cmluZyA9ICcnO1xyXG5cdHRyeSB7XHJcblx0XHRpZiAoT2JqZWN0KHZhbCkgPT09IHZhbCAmJiB2YWxbU3ltYm9sLml0ZXJhdG9yXSkgdmFsID0gX2pzb25fc3RyKFsuLi52YWxdKTtcclxuXHRcdHZhbHVlID0gU3RyaW5nKHZhbCk7XHJcblx0fVxyXG5cdGNhdGNoIChlKXtcclxuXHRcdHZhbHVlID0gJyc7XHJcblx0fVxyXG5cdGlmIChPYmplY3QodmFsKSA9PT0gdmFsICYmICghdmFsdWUgfHwgL1xcW29iamVjdCBcXHcrXFxdLy50ZXN0KHZhbHVlKSkpIHZhbHVlID0gX2pzb25fc3RyKHZhbCkucmVwbGFjZSgvXlwifFwiJC9nLCAnJyk7XHJcblx0cmV0dXJuIHZhbHVlLnRyaW0oKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBIZWxwZXIgLSBwYXJzZSBub3JtYWxpemVkIGVycm9yIHZhbHVlXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsXHJcbiAqIEByZXR1cm5zIGBzdHJpbmdgIGVycm9yXHJcbiAqL1xyXG5jb25zdCBfZ2V0X2Vycm9yID0gKHZhbDogYW55KTogc3RyaW5nID0+IHtcclxuXHRpZiAoT2JqZWN0KHZhbCkgPT09IHZhbCAmJiAhKHZhbCBpbnN0YW5jZW9mIEVycm9yKSl7XHJcblx0XHRpZiAodmFsLmVycm9yIGluc3RhbmNlb2YgRXJyb3IgfHwgJ3N0cmluZycgPT09IHR5cGVvZiB2YWwuZXJyb3IgJiYgISF2YWwuZXJyb3IudHJpbSgpKSB2YWwgPSB2YWwuZXJyb3I7XHJcblx0XHRlbHNlIGlmICh2YWwucmVhc29uIGluc3RhbmNlb2YgRXJyb3IgfHwgJ3N0cmluZycgPT09IHR5cGVvZiB2YWwucmVhc29uICYmICEhdmFsLnJlYXNvbi50cmltKCkpIHZhbCA9IHZhbC5lcnJvcjtcclxuXHRcdGVsc2UgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdmFsLm1lc3NhZ2UgJiYgISF2YWwubWVzc2FnZS50cmltKCkpIHZhbCA9IHZhbC5tZXNzYWdlO1xyXG5cdH1cclxuXHRyZXR1cm4gX2dldF9zdHIodmFsKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBIZWxwZXIgLSBkZWJvdW5jZWQgY2FsbGJhY2tcclxuICogXHJcbiAqIEBwYXJhbSBjYWxsYmFjayAtIGNhbGxiYWNrIGhhbmRsZXJcclxuICogQHBhcmFtIHRpbWVvdXQgLSB0aW1lb3V0IG1pbGxpc2Vjb25kc1xyXG4gKiBAcmV0dXJucyBgKCk9PnZvaWRgIGRlYm91bmNlZCBjYWxsYmFja1xyXG4gKi9cclxuY29uc3QgX2RlYm91bmNlID0gKGNhbGxiYWNrOiAoKT0+dm9pZCwgdGltZW91dDogbnVtYmVyID0gMCk6ICgpID0+IHZvaWQgPT4ge1xyXG5cdGxldCB0aW1lcjogYW55LCBtYXhfd2FpdDogYW55O1xyXG5cdGNvbnN0IF9oYW5kbGVyID0gKCkgPT4ge1xyXG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVyKTtcclxuXHRcdGNsZWFyVGltZW91dChtYXhfd2FpdCk7XHJcblx0XHRtYXhfd2FpdCA9IHVuZGVmaW5lZDtcclxuXHRcdGNhbGxiYWNrKCk7XHJcblx0fTtcclxuXHRyZXR1cm4gKCkgPT4ge1xyXG5cdFx0aWYgKCF0aW1lb3V0KSByZXR1cm4gY2FsbGJhY2soKTtcclxuXHRcdGNsZWFyVGltZW91dCh0aW1lcik7XHJcblx0XHR0aW1lciA9IHNldFRpbWVvdXQoX2hhbmRsZXIsIHRpbWVvdXQpO1xyXG5cdFx0aWYgKCFtYXhfd2FpdCkgbWF4X3dhaXQgPSBzZXRUaW1lb3V0KF9oYW5kbGVyLCBNYXRoLmZsb29yKHRpbWVvdXQgKiAxLjUpKTtcclxuXHR9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGBTeW1ib2xgIHByaXZhdGUgcHJvcHMga2V5IG5hbWVcclxuICovXHJcbmNvbnN0IFBST1BTID0gU3ltYm9sKGBfX3ByaXZhdGVfcHJvcHNfJHtEYXRlLm5vdygpfV9fYCk7XHJcblxyXG4vKipcclxuICogQGNsYXNzIFRhc2tcclxuICovXHJcbmV4cG9ydCBjbGFzcyBUYXNrIGltcGxlbWVudHMgSVRhc2tcclxue1xyXG5cdC8qKlxyXG5cdCAqIFRhc2sgZ2xvYmFsIGV2ZW50IGRlYm91bmNlIG1pbGxpc2Vjb25kc1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBnZXQgZXZlbnRfZGVib3VuY2UoKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiBERUZBVUxUX0VWRU5UX0RFQk9VTkNFO1xyXG5cdH1cclxuXHRzdGF0aWMgc2V0IGV2ZW50X2RlYm91bmNlKHZhbHVlOiBhbnkpe1xyXG5cdFx0REVGQVVMVF9FVkVOVF9ERUJPVU5DRSA9IF9wb3NfaW50KHZhbHVlLCBERUZBVUxUX0VWRU5UX0RFQk9VTkNFLCAwKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRhc2sgZ2xvYmFsIHByZWNpc2lvbiB+IHJvdW5kIGRlY2ltYWwgcGxhY2VzXHJcblx0ICovXHJcblx0c3RhdGljIGdldCBkZWNpbWFsX3ByZWNpc2lvbigpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIERFRkFVTFRfUFJFQ0lTSU9OO1xyXG5cdH1cclxuXHRzdGF0aWMgc2V0IGRlY2ltYWxfcHJlY2lzaW9uKHZhbHVlOiBhbnkpe1xyXG5cdFx0REVGQVVMVF9QUkVDSVNJT04gPSBfcG9zX2ludCh2YWx1ZSwgREVGQVVMVF9QUkVDSVNJT04sIDIpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogSW5zdGFuY2UgXCJwcml2YXRlXCIgcHJvcHNcclxuXHQgKi9cclxuXHRbUFJPUFNdOiB7XHJcblx0XHRuYW1lOiBzdHJpbmc7XHJcblx0XHRsYWJlbDogc3RyaW5nO1xyXG5cdFx0bGlua2VkOiBib29sZWFuO1xyXG5cdFx0cHJlY2lzaW9uOiBudW1iZXI7XHJcblx0XHRldmVudF9kZWJvdW5jZTogbnVtYmVyO1xyXG5cdFx0cHJvZ3Jlc3M6IG51bWJlcjtcclxuXHRcdHRvdGFsOiBudW1iZXI7XHJcblx0XHR2YWx1ZTogbnVtYmVyO1xyXG5cdFx0ZXJyb3I6IHN0cmluZztcclxuXHRcdHN0YXR1czogVFN0YXR1cztcclxuXHRcdHN0YXJ0VGltZTogbnVtYmVyO1xyXG5cdFx0c3RvcFRpbWU6IG51bWJlcjtcclxuXHRcdGNvbXBsZXRlOiBib29sZWFuO1xyXG5cdFx0aXRlbTogYW55O1xyXG5cdFx0X2RvbmU6IGJvb2xlYW47XHJcblx0XHRfcm91bmQ6ICh2YWw6IG51bWJlcikgPT4gbnVtYmVyO1xyXG5cdFx0X2VtaXR0ZXI6IEV2ZW50RW1pdHRlcjtcclxuXHRcdF9kZWJvdW5jZWRfdXBkYXRlOiAoKT0+dm9pZDtcclxuXHR9ID0ge30gYXMgYW55O1xyXG5cclxuXHQvKipcclxuXHQgKiBUYXNrIG5hbWVcclxuXHQgKi9cclxuXHRnZXQgbmFtZSgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIHRoaXNbUFJPUFNdLm5hbWU7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBUYXNrIGxhYmVsXHJcblx0ICovXHJcblx0Z2V0IGxhYmVsKCk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gdGhpc1tQUk9QU10ubGFiZWw7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBUYXNrIGxpbmtlZCAtIHZhbHVlL3RvdGFsL3Byb2dyZXNzIChyZWNhbGN1bGF0ZSBvbiBjaGFuZ2UpXHJcblx0ICovXHJcblx0Z2V0IGxpbmtlZCgpOiBib29sZWFuIHtcclxuXHRcdHJldHVybiB0aGlzW1BST1BTXS5saW5rZWQ7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBUYXNrIHByZWNpc2lvbiAtIGBpbnRlZ2VyYCBkZWNpbWFsIHBsYWNlc1xyXG5cdCAqL1xyXG5cdGdldCBwcmVjaXNpb24oKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiB0aGlzW1BST1BTXS5wcmVjaXNpb247XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFRhc2sgZXZlbnQgZGVib3VuY2UgbWlsbGlzZWNvbmRzIChkZWZhdWx0OiBgVGFza3MuZXZlbnRfZGVib3VuY2VgKVxyXG5cdCAqL1xyXG5cdGdldCBldmVudF9kZWJvdW5jZSgpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIHRoaXNbUFJPUFNdLmV2ZW50X2RlYm91bmNlO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogVGFzayBwcm9ncmVzc1xyXG5cdCAqL1xyXG5cdGdldCBwcm9ncmVzcygpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIHRoaXNbUFJPUFNdLnByb2dyZXNzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogVGFzayB0b3RhbFxyXG5cdCAqL1xyXG5cdGdldCB0b3RhbCgpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIHRoaXNbUFJPUFNdLnRvdGFsO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogVGFzayB2YWx1ZVxyXG5cdCAqL1xyXG5cdGdldCB2YWx1ZSgpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIHRoaXNbUFJPUFNdLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogVGFzayBlcnJvclxyXG5cdCAqL1xyXG5cdGdldCBlcnJvcigpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIHRoaXNbUFJPUFNdLmVycm9yO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogVGFzayBzdGF0dXNcclxuXHQgKi9cclxuXHRnZXQgc3RhdHVzKCk6IFRTdGF0dXMge1xyXG5cdFx0cmV0dXJuIHRoaXNbUFJPUFNdLnN0YXR1cztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRhc2sgc3RhcnRUaW1lIC0gdGltZXN0YW1wIG1pbGxpc2Vjb25kcyAoaS5lLiBgRGF0ZS5ub3coKWApXHJcblx0ICovXHJcblx0Z2V0IHN0YXJ0VGltZSgpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIHRoaXNbUFJPUFNdLnN0YXJ0VGltZTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRhc2sgc3RvcFRpbWUgLSB0aW1lc3RhbXAgbWlsbGlzZWNvbmRzIChpLmUuIGBEYXRlLm5vdygpYClcclxuXHQgKi9cclxuXHRnZXQgc3RvcFRpbWUoKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiB0aGlzW1BST1BTXS5zdG9wVGltZTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRhc2sgZWxhcHNlZFRpbWUgLSBtaWxsaXNlY29uZCB0aW1lc3RhbXBzIGRpZmZlcmVuY2UgKGkuZS4gYHN0b3BUaW1lIC0gc3RhcnRUaW1lYClcclxuXHQgKi9cclxuXHRnZXQgZWxhcHNlZFRpbWUoKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiB0aGlzLnN0b3BUaW1lID8gdGhpcy5zdG9wVGltZSAtIHRoaXMuc3RhcnRUaW1lIDogMDtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRhc2sgY29tcGxldGVcclxuXHQgKi9cclxuXHRnZXQgY29tcGxldGUoKTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gdGhpc1tQUk9QU10uY29tcGxldGU7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFRhc2sgaXRlbVxyXG5cdCAqL1xyXG5cdGdldCBpdGVtKCk6IGFueSB7XHJcblx0XHRyZXR1cm4gdGhpc1tQUk9QU10uaXRlbTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZSBuZXcgaW5zdGFuY2VcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gbmFtZSAtIHRhc2sgbmFtZVxyXG5cdCAqIEBwYXJhbSBsaW5rZWQgLSB0YXNrIHZhbHVlL3RvdGFsL3Byb2dyZXNzIGxpbmtlZCB+IHJlY2FsY3VsYXRlIG9uIGNoYW5nZVxyXG5cdCAqIEBwYXJhbSBwcmVjaXNpb24gLSBkZWNpbWFsIHBsYWNlcyAoZGVmYXVsdDogYFRhc2suZGVjaW1hbF9wcmVjaXNpb25gKVxyXG5cdCAqIEBwYXJhbSBldmVudF9kZWJvdW5jZSAtIGV2ZW50IGRlYm91bmNlIG1pbGxpc2Vjb25kcyAoZGVmYXVsdDogYFRhc2suZXZlbnRfZGVib3VuY2VgKVxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgbGlua2VkOiBib29sZWFuID0gZmFsc2UsIHByZWNpc2lvbjogbnVtYmVyID0gVGFzay5kZWNpbWFsX3ByZWNpc2lvbiwgZXZlbnRfZGVib3VuY2U6IG51bWJlciA9IFRhc2suZXZlbnRfZGVib3VuY2Upe1xyXG5cdFx0aWYgKCEobmFtZSA9IF9nZXRfc3RyKG5hbWUpKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBuZXcgdGFzayBuYW1lLicpO1xyXG5cdFx0cHJlY2lzaW9uID0gX3Bvc19pbnQocHJlY2lzaW9uLCBUYXNrLmRlY2ltYWxfcHJlY2lzaW9uLCBUYXNrLmRlY2ltYWxfcHJlY2lzaW9uKTtcclxuXHRcdGV2ZW50X2RlYm91bmNlID0gX3Bvc19pbnQoZXZlbnRfZGVib3VuY2UsIFRhc2suZXZlbnRfZGVib3VuY2UsIFRhc2suZXZlbnRfZGVib3VuY2UpO1xyXG5cdFx0dGhpc1tQUk9QU10gPSB7XHJcblx0XHRcdG5hbWUsXHJcblx0XHRcdGxhYmVsOiAnJyxcclxuXHRcdFx0bGlua2VkLFxyXG5cdFx0XHRwcmVjaXNpb24sXHJcblx0XHRcdGV2ZW50X2RlYm91bmNlLFxyXG5cdFx0XHRwcm9ncmVzczogMCxcclxuXHRcdFx0dG90YWw6IDAsXHJcblx0XHRcdHZhbHVlOiAwLFxyXG5cdFx0XHRlcnJvcjogJycsXHJcblx0XHRcdHN0YXR1czogJ25ldycsXHJcblx0XHRcdHN0YXJ0VGltZTogMCxcclxuXHRcdFx0c3RvcFRpbWU6IDAsXHJcblx0XHRcdGNvbXBsZXRlOiBmYWxzZSxcclxuXHRcdFx0aXRlbTogdW5kZWZpbmVkLFxyXG5cdFx0XHRfZG9uZTogZmFsc2UsXHJcblx0XHRcdF9yb3VuZDogKHZhbDogbnVtYmVyKTogbnVtYmVyID0+IF9yb3VuZCh2YWwsIHRoaXNbUFJPUFNdLnByZWNpc2lvbiksXHJcblx0XHRcdF9lbWl0dGVyOiBuZXcgRXZlbnRFbWl0dGVyKCksXHJcblx0XHRcdF9kZWJvdW5jZWRfdXBkYXRlOiBfZGVib3VuY2UoKCkgPT4ge1xyXG5cdFx0XHRcdGNvbnN0IHByb3BzID0gdGhpc1tQUk9QU107XHJcblx0XHRcdFx0aWYgKHByb3BzLl9kb25lKSByZXR1cm47XHJcblx0XHRcdFx0cHJvcHMuX2VtaXR0ZXIuZW1pdCgndXBkYXRlJywgdGhpcy5kYXRhKCkpO1xyXG5cdFx0XHR9LCBldmVudF9kZWJvdW5jZSksXHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0IHRhc2sgZGF0YVxyXG5cdCAqIFxyXG5cdCAqIEByZXR1cm5zIGBJVGFza2Agb3B0aW9ucyB+IGkuZS4gYHtuYW1lLCBsYWJlbCwgbGlua2VkLCBwcmVjaXNpb24sIGV2ZW50X2RlYm91bmNlLCBwcm9ncmVzcywgdG90YWwsIHZhbHVlLCBlcnJvciwgc3RhdHVzLCBzdGFydFRpbWUsIHN0b3BUaW1lLCBjb21wbGV0ZSwgaXRlbX1gXHJcblx0ICovXHJcblx0Z2V0IGRhdGEoKTogKCk9PklUYXNrIHtcclxuXHRcdHJldHVybiAoKTogSVRhc2sgPT4ge1xyXG5cdFx0XHRjb25zdCB7IG5hbWUsIGxhYmVsLCBsaW5rZWQsIHByZWNpc2lvbiwgZXZlbnRfZGVib3VuY2UsIHByb2dyZXNzLCB0b3RhbCwgdmFsdWUsIGVycm9yLCBzdGF0dXMsIHN0YXJ0VGltZSwgc3RvcFRpbWUsIGVsYXBzZWRUaW1lLCBjb21wbGV0ZSwgaXRlbSB9ID0gdGhpcztcclxuXHRcdFx0cmV0dXJuIHtuYW1lLCBsYWJlbCwgbGlua2VkLCBwcmVjaXNpb24sIGV2ZW50X2RlYm91bmNlLCBwcm9ncmVzcywgdG90YWwsIHZhbHVlLCBlcnJvciwgc3RhdHVzLCBzdGFydFRpbWUsIHN0b3BUaW1lLCBlbGFwc2VkVGltZSwgY29tcGxldGUsIGl0ZW19O1xyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFVwZGF0ZSBldmVudCB0cmlnZ2VyXHJcblx0ICogXHJcblx0ICogQHJldHVybnMgYFRhc2tgIGluc3RhbmNlXHJcblx0ICovXHJcblx0Z2V0IHVwZGF0ZSgpOiAoKT0+VGFzayB7XHJcblx0XHRyZXR1cm4gKCk6IFRhc2sgPT4ge1xyXG5cdFx0XHR0aGlzW1BST1BTXS5fZGVib3VuY2VkX3VwZGF0ZSgpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBBZGQgdXBkYXRlIGV2ZW50IHN1YnNjcmliZXIgfiBgZXZlbnQgPSB7dHlwZTogJ3VwZGF0ZScsIGRhdGE6IElUYXNrfWBcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gbGlzdGVuZXIgLSBldmVudCBjYWxsYmFjayBsaXN0ZW5lclxyXG5cdCAqIEByZXR1cm5zIGAoKCk9PnZvaWQpYCB1bnN1YnNjcmliZSBjYWxsYmFja1xyXG5cdCAqL1xyXG5cdHN1YnNjcmliZShsaXN0ZW5lcjogKGV2ZW50OklFdmVudCk9PnZvaWQpOiAoKT0+dm9pZCB7XHJcblx0XHRyZXR1cm4gdGhpc1tQUk9QU10uX2VtaXR0ZXIuc3Vic2NyaWJlKCd1cGRhdGUnLCBsaXN0ZW5lcik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBUYXNrIHN0YXJ0XHJcblx0ICogXHJcblx0ICogQHJldHVybnMgYFRhc2tgIGluc3RhbmNlXHJcblx0ICovXHJcblx0c3RhcnQocmVzdGFydDogYm9vbGVhbiA9IGZhbHNlKTogVGFzayB7XHJcblx0XHRjb25zdCBwcm9wcyA9IHRoaXNbUFJPUFNdO1xyXG5cdFx0bGV0IGNoYW5nZXMgPSAwO1xyXG5cclxuXHRcdC8vcmVzdGFydCBjaGVja1xyXG5cdFx0aWYgKHByb3BzLmNvbXBsZXRlICYmICFyZXN0YXJ0KXtcclxuXHRcdFx0Y29uc29sZS53YXJuKCdUYXNrIFxcYHN0YXJ0XFxgIHdoaWxlIGNvbXBsZXRlIGlnbm9yZWQhIFRyeSB1c2luZyBgdGFzay5zdGFydChyZXN0YXJ0PXRydWUpYCB0byBvdmVycmlkZS4nKTtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdC8vLS0gY29tcGxldGUgPSBmYWxzZVxyXG5cdFx0aWYgKHByb3BzLmNvbXBsZXRlKXtcclxuXHRcdFx0Y2hhbmdlcyArKztcclxuXHRcdFx0cHJvcHMuY29tcGxldGUgPSBmYWxzZTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0Ly8tLSBzdGF0dXMgPSBydW5uaW5nXHJcblx0XHRpZiAocHJvcHMuc3RhdHVzICE9PSAncnVubmluZycpe1xyXG5cdFx0XHRjaGFuZ2VzICsrO1xyXG5cdFx0XHRwcm9wcy5zdGF0dXMgPSAncnVubmluZyc7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8tLSBzdGFydFRpbWVcclxuXHRcdGlmICghcHJvcHMuc3RhcnRUaW1lIHx8IHJlc3RhcnQpe1xyXG5cdFx0XHRjaGFuZ2VzICsrO1xyXG5cdFx0XHRwcm9wcy5zdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLS0gc3RvcFRpbWVcclxuXHRcdGlmIChwcm9wcy5zdG9wVGltZSl7XHJcblx0XHRcdGNoYW5nZXMgKys7XHJcblx0XHRcdHByb3BzLnN0b3BUaW1lID0gMDtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0Ly8tLSBlcnJvclxyXG5cdFx0aWYgKHByb3BzLmVycm9yKXtcclxuXHRcdFx0Y2hhbmdlcyArKztcclxuXHRcdFx0cHJvcHMuZXJyb3IgPSAnJztcclxuXHRcdH1cclxuXHJcblx0XHQvL2NoYW5nZXMgLSB1cGRhdGVcclxuXHRcdGlmIChjaGFuZ2VzKSB0aGlzLnVwZGF0ZSgpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBUYXNrIHN0b3BcclxuXHQgKiBcclxuXHQgKiBAcmV0dXJucyBgVGFza2AgaW5zdGFuY2VcclxuXHQgKi9cclxuXHRzdG9wKCk6IFRhc2sge1xyXG5cdFx0Y29uc3QgcHJvcHMgPSB0aGlzW1BST1BTXTtcclxuXHRcdGxldCBjaGFuZ2VzID0gMDtcclxuXHJcblx0XHQvLy0tIHN0YXR1cyA9IHN0b3BwZWRcclxuXHRcdGlmIChwcm9wcy5zdGF0dXMgPT09ICdydW5uaW5nJyl7XHJcblx0XHRcdGNoYW5nZXMgKys7XHJcblx0XHRcdHByb3BzLnN0YXR1cyA9ICdzdG9wcGVkJztcclxuXHRcdH1cclxuXHJcblx0XHQvLy0tIHN0b3BUaW1lLCBzdGFydFRpbWVcclxuXHRcdGlmICghcHJvcHMuc3RvcFRpbWUpe1xyXG5cdFx0XHRjaGFuZ2VzICsrO1xyXG5cdFx0XHRwcm9wcy5zdG9wVGltZSA9IERhdGUubm93KCk7XHJcblx0XHRcdGlmICghcHJvcHMuc3RhcnRUaW1lKSBwcm9wcy5zdGFydFRpbWUgPSBwcm9wcy5zdG9wVGltZTtcclxuXHRcdH1cclxuXHJcblx0XHQvL2NoYW5nZXMgLSB1cGRhdGVcclxuXHRcdGlmIChjaGFuZ2VzKSB0aGlzLnVwZGF0ZSgpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBUYXNrIGZhaWxlZFxyXG5cdCAqIFxyXG5cdCAqIEByZXR1cm5zIGBUYXNrYCBpbnN0YW5jZVxyXG5cdCAqL1xyXG5cdGZhaWx1cmUoZXJyb3I/OiBhbnkpOiBUYXNrIHtcclxuXHRcdGVycm9yID0gKGVycm9yID0gX2dldF9lcnJvcihlcnJvcikpID8gZXJyb3IgOiAnVW5rbm93biB0YXNrIGVycm9yLic7XHJcblx0XHRjb25zdCBwcm9wcyA9IHRoaXNbUFJPUFNdO1xyXG5cdFx0bGV0IGNoYW5nZXMgPSAwO1xyXG5cdFx0XHJcblx0XHQvLy0tIGVycm9yXHJcblx0XHRpZiAocHJvcHMuZXJyb3IgIT09IGVycm9yKXtcclxuXHRcdFx0Y2hhbmdlcyArKztcclxuXHRcdFx0cHJvcHMuZXJyb3IgPSBlcnJvcjtcclxuXHRcdH1cclxuXHJcblx0XHQvLy0tIHN0YXR1c1xyXG5cdFx0aWYgKHByb3BzLnN0YXR1cyAhPT0gJ2ZhaWxlZCcpe1xyXG5cdFx0XHRjaGFuZ2VzICsrO1xyXG5cdFx0XHRwcm9wcy5zdGF0dXMgPSAnZmFpbGVkJztcclxuXHRcdH1cclxuXHJcblx0XHQvLy0tIHN0b3BUaW1lLCBzdGFydFRpbWVcclxuXHRcdGlmICghcHJvcHMuc3RvcFRpbWUpe1xyXG5cdFx0XHRjaGFuZ2VzICsrO1xyXG5cdFx0XHRwcm9wcy5zdG9wVGltZSA9IERhdGUubm93KCk7XHJcblx0XHRcdGlmICghcHJvcHMuc3RhcnRUaW1lKSBwcm9wcy5zdGFydFRpbWUgPSBwcm9wcy5zdG9wVGltZTtcclxuXHRcdH1cclxuXHJcblx0XHQvL2NoYW5nZXMgLSB1cGRhdGVcclxuXHRcdGlmIChjaGFuZ2VzKSB0aGlzLnVwZGF0ZSgpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBUYXNrIGRvbmVcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gY29tcGxldGVQcm9ncmVzcyAtIHNldCBmdWxsIHByb2dyZXNzIH4gZW5hYmxlZCB3aGVuIGBsaW5rZWRgIChpLmUuIGBwcm9ncmVzcz0xMDBgIGFuZCBgdmFsdWU9dG90YWxgKVxyXG5cdCAqIEByZXR1cm5zIGBUYXNrYCBpbnN0YW5jZVxyXG5cdCAqL1xyXG5cdGRvbmUoY29tcGxldGVQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlKTogVGFzayB7XHJcblx0XHRjb25zdCBwcm9wcyA9IHRoaXNbUFJPUFNdO1xyXG5cdFx0bGV0IGNoYW5nZXMgPSAwO1xyXG5cclxuXHRcdC8vLS0gY29tcGxldGUgPSB0cnVlXHJcblx0XHRpZiAoIXByb3BzLmNvbXBsZXRlKXtcclxuXHRcdFx0Y2hhbmdlcyArKztcclxuXHRcdFx0cHJvcHMuY29tcGxldGUgPSB0cnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vbm90IHN0b3BwZWRcclxuXHRcdGlmIChwcm9wcy5zdGF0dXMgIT09ICdzdG9wcGVkJyl7XHJcblx0XHRcdFxyXG5cdFx0XHQvLy0tIHN0YXR1cyA9IGRvbmV8ZmFpbGVkXHJcblx0XHRcdGNvbnN0IHN0YXR1cyA9IHByb3BzLmVycm9yID8gJ2ZhaWxlZCcgOiAnZG9uZSc7XHJcblx0XHRcdGlmIChwcm9wcy5zdGF0dXMgIT09IHN0YXR1cyl7XHJcblx0XHRcdFx0Y2hhbmdlcyArKztcclxuXHRcdFx0XHRwcm9wcy5zdGF0dXMgPSBzdGF0dXM7XHJcblx0XHRcdH1cclxuXHRcclxuXHRcdFx0Ly8tLSBjb21wbGV0ZVByb2dyZXNzXHJcblx0XHRcdGlmIChwcm9wcy5saW5rZWQgfHwgY29tcGxldGVQcm9ncmVzcyl7XHJcblx0XHRcdFx0bGV0IHByb2dyZXNzID0gMTAwO1xyXG5cdFx0XHRcdGlmIChwcm9ncmVzcyAhPT0gcHJvcHMucHJvZ3Jlc3Mpe1xyXG5cdFx0XHRcdFx0Y2hhbmdlcyArKztcclxuXHRcdFx0XHRcdHByb3BzLnByb2dyZXNzID0gcHJvZ3Jlc3M7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmIChwcm9wcy50b3RhbCAmJiBwcm9wcy52YWx1ZSAhPT0gcHJvcHMudG90YWwpe1xyXG5cdFx0XHRcdFx0Y2hhbmdlcyArKztcclxuXHRcdFx0XHRcdHByb3BzLnZhbHVlID0gcHJvcHMudG90YWw7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8tLSBzdGFydFRpbWUsIHN0b3BUaW1lID0gbm93XHJcblx0XHRpZiAoIXByb3BzLnN0b3BUaW1lKXtcclxuXHRcdFx0Y2hhbmdlcyArKztcclxuXHRcdFx0cHJvcHMuc3RvcFRpbWUgPSBEYXRlLm5vdygpO1xyXG5cdFx0XHRpZiAoIXByb3BzLnN0YXJ0VGltZSkgcHJvcHMuc3RhcnRUaW1lID0gcHJvcHMuc3RvcFRpbWU7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly9kb25lIC0gZW1pdCBjaGFuZ2VzXHJcblx0XHRwcm9wcy5fZG9uZSA9IHRydWU7XHJcblx0XHRpZiAoY2hhbmdlcykgcHJvcHMuX2VtaXR0ZXIuZW1pdCgndXBkYXRlJywgdGhpcy5kYXRhKCkpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTZXQgcHJvZ3Jlc3NcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gcHJvZ3Jlc3MgLSB0YXNrIHBlcmNlbnRhZ2UgcHJvZ3Jlc3MgKGAwLTEwMGApXHJcblx0ICogQHBhcmFtIF92YWx1ZSAtIHVubGlua2VkIHRhc2sgYHZhbHVlYCB1cGRhdGUgfiBpZ25vcmVzIGB1bmRlZmluZWRgXHJcblx0ICogQHBhcmFtIF90b3RhbCAtIHVubGlua2VkIHRhc2sgYHRvdGFsYCB1cGRhdGUgfiBpZ25vcmVzIGB1bmRlZmluZWRgXHJcblx0ICogQHJldHVybnMgYFRhc2tgIGluc3RhbmNlXHJcblx0ICovXHJcblx0c2V0UHJvZ3Jlc3MocHJvZ3Jlc3M6IG51bWJlciwgX3ZhbHVlPzogbnVtYmVyLCBfdG90YWw/OiBudW1iZXIpOiBUYXNrIHtcclxuXHRcdGNvbnN0IHByb3BzID0gdGhpc1tQUk9QU107XHJcblxyXG5cdFx0Ly9kb25lIC0gaWdub3JlIHVwZGF0ZXNcclxuXHRcdGlmIChwcm9wcy5fZG9uZSl7XHJcblx0XHRcdGNvbnNvbGUud2FybignVGFzayBcXGBzZXRQcm9ncmVzc1xcYCB3aGlsZSBkb25lIGlnbm9yZWQuJyk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vcGFyc2UgcHJvZ3Jlc3MvYWRqdXN0XHJcblx0XHRsZXQgdG1wOiBudW1iZXIgPSBfcG9zX251bShwcm9ncmVzcywgLTEsIC0xKTtcclxuXHRcdGlmICh0bXAgPCAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIHNldCB0YXNrIFxcYHByb2dyZXNzXFxgIHZhbHVlICgke3Byb2dyZXNzfSkuYCk7XHJcblx0XHRpZiAoKHByb2dyZXNzID0gcHJvcHMuX3JvdW5kKHRtcCkpID4gMTAwKSBwcm9ncmVzcyA9IDEwMDtcclxuXHJcblx0XHQvL3RvdGFsL3ZhbHVlIC0gdW5saW5rZWQgdXBkYXRlL2xpbmtlZCByZWNhbGN1bGF0ZVxyXG5cdFx0bGV0IHZhbHVlID0gcHJvcHMudmFsdWU7XHJcblx0XHRsZXQgdG90YWwgPSBwcm9wcy50b3RhbDtcclxuXHRcdGlmICghcHJvcHMubGlua2VkKXtcclxuXHRcdFx0aWYgKChfdG90YWwgPSBfcG9zX251bShfdG90YWwsIC0xLCAtMSkpID49IDApIHRvdGFsID0gcHJvcHMuX3JvdW5kKF90b3RhbCk7XHJcblx0XHRcdGlmICgoX3ZhbHVlID0gX3Bvc19udW0oX3ZhbHVlLCAtMSwgLTEpKSA+PSAwKSB2YWx1ZSA9IHByb3BzLl9yb3VuZChfdmFsdWUpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAodG90YWwpe1xyXG5cdFx0XHRpZiAocHJvZ3Jlc3MgPT09IDEwMCkgdmFsdWUgPSB0b3RhbDtcclxuXHRcdFx0ZWxzZSB2YWx1ZSA9IHByb3BzLl9yb3VuZChwcm9ncmVzcy8xMDAgKiB0b3RhbCk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdC8vY2hhbmdlcyAtIHVwZGF0ZVxyXG5cdFx0bGV0IGNoYW5nZXMgPSAwO1xyXG5cdFx0aWYgKHByb2dyZXNzICE9PSBwcm9wcy5wcm9ncmVzcyl7XHJcblx0XHRcdGNoYW5nZXMgKys7XHJcblx0XHRcdHByb3BzLnByb2dyZXNzID0gcHJvZ3Jlc3M7XHJcblx0XHR9XHJcblx0XHRpZiAodmFsdWUgIT09IHByb3BzLnZhbHVlKXtcclxuXHRcdFx0Y2hhbmdlcyArKztcclxuXHRcdFx0cHJvcHMudmFsdWUgPSB2YWx1ZTtcclxuXHRcdH1cclxuXHRcdGlmICh0b3RhbCAhPT0gcHJvcHMudG90YWwpe1xyXG5cdFx0XHRjaGFuZ2VzICsrO1xyXG5cdFx0XHRwcm9wcy50b3RhbCA9IHRvdGFsO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGNoYW5nZXMpIHRoaXMudXBkYXRlKCk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogU2V0IHRvdGFsXHJcblx0ICogXHJcblx0ICogQHBhcmFtIHRvdGFsXHJcblx0ICogQHJldHVybnMgYFRhc2tgIGluc3RhbmNlXHJcblx0ICovXHJcblx0c2V0VG90YWwodG90YWw6IG51bWJlcik6IFRhc2sge1xyXG5cdFx0Y29uc3QgcHJvcHMgPSB0aGlzW1BST1BTXTtcclxuXHJcblx0XHQvL2RvbmUgLSBpZ25vcmUgdXBkYXRlc1xyXG5cdFx0aWYgKHByb3BzLl9kb25lKXtcclxuXHRcdFx0Y29uc29sZS53YXJuKCdUYXNrIFxcYHNldFRvdGFsXFxgIHdoaWxlIGRvbmUgaWdub3JlZC4nKTtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly9wYXJzZSB0b3RhbC9hZGp1c3RcclxuXHRcdGxldCB0bXA6IG51bWJlciA9IF9wb3NfbnVtKHRvdGFsLCAtMSwgLTEpO1xyXG5cdFx0aWYgKHRtcCA8IDApIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgc2V0IHRhc2sgXFxgdG90YWxcXGAgdmFsdWUgKCR7dG90YWx9KS5gKTtcclxuXHRcdHRvdGFsID0gcHJvcHMuX3JvdW5kKHRtcCk7XHJcblxyXG5cdFx0Ly9saW5rZWQgLSByZWNhbGN1bGF0ZSB2YWx1ZS9wcm9ncmVzc1xyXG5cdFx0bGV0IHByb2dyZXNzID0gcHJvcHMucHJvZ3Jlc3M7XHJcblx0XHRsZXQgdmFsdWUgPSBwcm9wcy52YWx1ZTtcclxuXHRcdGlmIChwcm9wcy5saW5rZWQpe1xyXG5cdFx0XHRpZiAoIXRvdGFsKXtcclxuXHRcdFx0XHR2YWx1ZSA9IDA7XHJcblx0XHRcdFx0cHJvZ3Jlc3MgPSAwO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYgKHZhbHVlKXtcclxuXHRcdFx0XHRpZiAodmFsdWUgPj0gdG90YWwpe1xyXG5cdFx0XHRcdFx0dmFsdWUgPSB0b3RhbDtcclxuXHRcdFx0XHRcdHByb2dyZXNzID0gMTAwO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIHByb2dyZXNzID0gcHJvcHMuX3JvdW5kKHZhbHVlL3RvdGFsICogMTAwKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmIChwcm9ncmVzcykgdmFsdWUgPSBwcm9wcy5fcm91bmQocHJvZ3Jlc3MvMTAwICogdG90YWwpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vY2hhbmdlcyAtIHVwZGF0ZVxyXG5cdFx0bGV0IGNoYW5nZXMgPSAwO1xyXG5cdFx0aWYgKHByb2dyZXNzICE9PSBwcm9wcy5wcm9ncmVzcyl7XHJcblx0XHRcdGNoYW5nZXMgKys7XHJcblx0XHRcdHByb3BzLnByb2dyZXNzID0gcHJvZ3Jlc3M7XHJcblx0XHR9XHJcblx0XHRpZiAodmFsdWUgIT09IHByb3BzLnZhbHVlKXtcclxuXHRcdFx0Y2hhbmdlcyArKztcclxuXHRcdFx0cHJvcHMudmFsdWUgPSB2YWx1ZTtcclxuXHRcdH1cclxuXHRcdGlmICh0b3RhbCAhPT0gcHJvcHMudG90YWwpe1xyXG5cdFx0XHRjaGFuZ2VzICsrO1xyXG5cdFx0XHRwcm9wcy50b3RhbCA9IHRvdGFsO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGNoYW5nZXMpIHRoaXMudXBkYXRlKCk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNldCB2YWx1ZVxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSB2YWx1ZVxyXG5cdCAqIEByZXR1cm5zIGBUYXNrYCBpbnN0YW5jZVxyXG5cdCAqL1xyXG5cdHNldFZhbHVlKHZhbHVlOiBudW1iZXIpOiBUYXNrIHtcclxuXHRcdGNvbnN0IHByb3BzID0gdGhpc1tQUk9QU107XHJcblx0XHRcclxuXHRcdC8vZG9uZSAtIGlnbm9yZSB1cGRhdGVzXHJcblx0XHRpZiAocHJvcHMuX2RvbmUpe1xyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1Rhc2sgXFxgc2V0VmFsdWVcXGAgd2hpbGUgZG9uZSBpZ25vcmVkLicpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHJcblx0XHQvL3BhcnNlIHZhbHVlL2FkanVzdFxyXG5cdFx0bGV0IHRtcDogbnVtYmVyID0gX3Bvc19udW0odmFsdWUsIC0xLCAtMSk7XHJcblx0XHRpZiAodG1wIDwgMCkgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBzZXQgdGFzayBcXGB2YWx1ZVxcYCB2YWx1ZSAoJHt2YWx1ZX0pLmApO1xyXG5cdFx0dmFsdWUgPSBwcm9wcy5fcm91bmQodG1wKTtcclxuXHJcblx0XHQvL2xpbmtlZCAtIHJlY2FsY3VsYXRlIHByb2dyZXNzXHJcblx0XHRsZXQgdG90YWwgPSBwcm9wcy50b3RhbDtcclxuXHRcdGxldCBwcm9ncmVzcyA9IHByb3BzLnByb2dyZXNzO1xyXG5cdFx0aWYgKHByb3BzLmxpbmtlZCl7XHJcblx0XHRcdGlmICghdmFsdWUpIHByb2dyZXNzID0gMDtcclxuXHRcdFx0ZWxzZSBpZiAodG90YWwpe1xyXG5cdFx0XHRcdGlmICh2YWx1ZSA+IHRvdGFsKXtcclxuXHRcdFx0XHRcdHRvdGFsID0gdmFsdWU7XHJcblx0XHRcdFx0XHRwcm9ncmVzcyA9IDEwMDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBwcm9ncmVzcyA9IHByb3BzLl9yb3VuZCh2YWx1ZS90b3RhbCAqIDEwMCk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiAocHJvZ3Jlc3MpIHRvdGFsID0gcHJvcHMuX3JvdW5kKDEwMC9wcm9ncmVzcyAqIHZhbHVlKTtcclxuXHRcdH1cclxuXHJcblx0XHQvL2NoYW5nZXMgLSB1cGRhdGVcclxuXHRcdGxldCBjaGFuZ2VzID0gMDtcclxuXHRcdGlmIChwcm9ncmVzcyAhPT0gcHJvcHMucHJvZ3Jlc3Mpe1xyXG5cdFx0XHRjaGFuZ2VzICsrO1xyXG5cdFx0XHRwcm9wcy5wcm9ncmVzcyA9IHByb2dyZXNzO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHZhbHVlICE9PSBwcm9wcy52YWx1ZSl7XHJcblx0XHRcdGNoYW5nZXMgKys7XHJcblx0XHRcdHByb3BzLnZhbHVlID0gdmFsdWU7XHJcblx0XHR9XHJcblx0XHRpZiAodG90YWwgIT09IHByb3BzLnRvdGFsKXtcclxuXHRcdFx0Y2hhbmdlcyArKztcclxuXHRcdFx0cHJvcHMudG90YWwgPSB0b3RhbDtcclxuXHRcdH1cclxuXHRcdGlmIChjaGFuZ2VzKSB0aGlzLnVwZGF0ZSgpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTZXQgaXRlbVxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBpdGVtXHJcblx0ICogQHJldHVybnMgYFRhc2tgIGluc3RhbmNlXHJcblx0ICovXHJcblx0c2V0SXRlbShpdGVtOiBhbnkpOiBUYXNrIHtcclxuXHRcdGNvbnN0IHByb3BzID0gdGhpc1tQUk9QU107XHJcblx0XHRcclxuXHRcdC8vZG9uZSAtIGlnbm9yZSB1cGRhdGVzXHJcblx0XHRpZiAocHJvcHMuX2RvbmUpe1xyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1Rhc2sgXFxgc2V0SXRlbVxcYCB3aGlsZSBkb25lIGlnbm9yZWQuJyk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHQvL3NldCBpdGVtXHJcblx0XHRwcm9wcy5pdGVtID0gaXRlbTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlIGluc3RhbmNlIGZyb20gZXhpc3RpbmcgdGFzayBvcHRpb25zXHJcblx0ICogXHJcblx0ICogQHBhcmFtIG9wdGlvbnMgLSBgSVRhc2tgIG9wdGlvbnMgfiBpLmUuIGB7bmFtZSwgbGFiZWwsIGxpbmtlZCwgcHJlY2lzaW9uLCBldmVudF9kZWJvdW5jZSwgcHJvZ3Jlc3MsIHRvdGFsLCB2YWx1ZSwgZXJyb3IsIHN0YXR1cywgc3RhcnRUaW1lLCBzdG9wVGltZSwgY29tcGxldGUsIGl0ZW19YFxyXG5cdCAqIEBwYXJhbSBwcmVjaXNpb24gLSBkZWNpbWFsIHBsYWNlcyAoZGVmYXVsdDogYFRhc2suZGVjaW1hbF9wcmVjaXNpb25gKVxyXG5cdCAqIEBwYXJhbSBldmVudF9kZWJvdW5jZSAtIGV2ZW50IGRlYm91bmNlIG1pbGxpc2Vjb25kcyAoZGVmYXVsdDogYFRhc2suZXZlbnRfZGVib3VuY2VgKVxyXG5cdCAqIEByZXR1cm5zIGBUYXNrYCBpbnN0YW5jZVxyXG5cdCAqIEB0aHJvd3MgdmFsaWRhdGlvbiBgRXJyb3JgXHJcblx0ICovXHJcblx0c3RhdGljIGNyZWF0ZShvcHRpb25zOiBJVGFzaywgcHJlY2lzaW9uPzogbnVtYmVyLCBldmVudF9kZWJvdW5jZT86IG51bWJlcik6IFRhc2sge1xyXG5cdFx0bGV0IHtcclxuXHRcdFx0bmFtZSxcclxuXHRcdFx0bGFiZWwsXHJcblx0XHRcdGxpbmtlZCxcclxuXHRcdFx0cHJlY2lzaW9uOiBfcHJlY2lzaW9uLFxyXG5cdFx0XHRldmVudF9kZWJvdW5jZTogX2V2ZW50X2RlYm91bmNlLFxyXG5cdFx0XHRwcm9ncmVzcyxcclxuXHRcdFx0dG90YWwsXHJcblx0XHRcdHZhbHVlLFxyXG5cdFx0XHRlcnJvcixcclxuXHRcdFx0c3RhdHVzLFxyXG5cdFx0XHRzdGFydFRpbWUsXHJcblx0XHRcdHN0b3BUaW1lLFxyXG5cdFx0XHRjb21wbGV0ZSxcclxuXHRcdFx0aXRlbSxcclxuXHRcdH0gPSBPYmplY3Qob3B0aW9ucyk7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRcclxuXHRcdFx0Ly9wYXJzZSBvcHRpb25zXHJcblx0XHRcdGxldCB0bXA6IGFueTtcclxuXHRcdFx0aWYgKCEodG1wID0gX2dldF9zdHIobmFtZSkpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHRhc2sgYG5hbWVgIHZhbHVlLicpO1xyXG5cdFx0XHRuYW1lID0gdG1wO1xyXG5cdFx0XHRsYWJlbCA9IF9nZXRfc3RyKGxhYmVsKTtcclxuXHRcdFx0bGlua2VkID0gISFsaW5rZWQ7XHJcblx0XHRcdFxyXG5cdFx0XHQvLy0tIHByZWNpc2lvblxyXG5cdFx0XHR0bXAgPSBfcG9zX2ludChfcHJlY2lzaW9uLCAtMSwgVGFzay5kZWNpbWFsX3ByZWNpc2lvbik7XHJcblx0XHRcdGlmICgodG1wID0gX3Bvc19pbnQocHJlY2lzaW9uLCAtMSwgdG1wKSkgPCAwKSBwcmVjaXNpb24gPSBUYXNrLmRlY2ltYWxfcHJlY2lzaW9uO1xyXG5cdFx0XHRlbHNlIHByZWNpc2lvbiA9IHRtcDtcclxuXHJcblx0XHRcdC8vLS0gZXZlbnRfZGVib3VuY2VcclxuXHRcdFx0dG1wID0gX3Bvc19pbnQoX2V2ZW50X2RlYm91bmNlLCAtMSwgVGFzay5ldmVudF9kZWJvdW5jZSk7XHJcblx0XHRcdGlmICgodG1wID0gX3Bvc19pbnQoZXZlbnRfZGVib3VuY2UsIC0xLCB0bXApKSA8IDApIGV2ZW50X2RlYm91bmNlID0gVGFzay5ldmVudF9kZWJvdW5jZTtcclxuXHRcdFx0ZWxzZSBldmVudF9kZWJvdW5jZSA9IHRtcDtcclxuXHJcblx0XHRcdC8vLS0gcHJlY2lzaW9uIHJvdW5kXHJcblx0XHRcdGNvbnN0IF9yb3VuZF9wID0gKHZhbDogbnVtYmVyKTogbnVtYmVyID0+IF9yb3VuZCh2YWwsIHByZWNpc2lvbik7XHJcblxyXG5cdFx0XHQvLy0tIHBhcnNlL2FkanVzdDogcHJvZ3Jlc3MsIHRvdGFsLCB2YWx1ZVxyXG5cdFx0XHRpZiAoKHRtcCA9IF9wb3NfbnVtKHByb2dyZXNzLCAtMSkpIDwgMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCB0YXNrIGBwcm9ncmVzc2AgdmFsdWUuJyk7XHJcblx0XHRcdGlmICgocHJvZ3Jlc3MgPSBfcm91bmRfcCh0bXApKSA+IDEwMCkgcHJvZ3Jlc3MgPSAxMDA7XHJcblx0XHRcdGlmICgodG1wID0gX3Bvc19udW0odG90YWwsIC0xKSkgPCAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHRhc2sgYHRvdGFsYCB2YWx1ZS4nKTtcclxuXHRcdFx0dG90YWwgPSBfcm91bmRfcCh0bXApO1xyXG5cdFx0XHRpZiAoKHRtcCA9IF9wb3NfbnVtKHZhbHVlLCAtMSkpIDwgMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCB0YXNrIGB2YWx1ZWAgdmFsdWUuJyk7XHJcblx0XHRcdHZhbHVlID0gX3JvdW5kX3AodG1wKTtcclxuXHRcdFx0aWYgKGxpbmtlZCl7XHJcblx0XHRcdFx0aWYgKCF2YWx1ZSkgcHJvZ3Jlc3MgPSAwO1xyXG5cdFx0XHRcdGVsc2UgaWYgKHRvdGFsKXtcclxuXHRcdFx0XHRcdGlmICh2YWx1ZSA+IHRvdGFsKXtcclxuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKGBUYXNrIGxpbmtlZCBcXGB2YWx1ZVxcYCAoJHt2YWx1ZX0pIGlzIGdyZWF0ZXIgdGhhbiBcXGB0b3RhbFxcYCAoJHt0b3RhbH0pLiBVc2luZyB2YWx1ZSBhcyBuZXcgdG90YWwke3Byb2dyZXNzICE9PSAxMDAgPyAnIC0gdXBkYXRpbmcgcHJvZ3Jlc3MnIDogJyd9LmApO1xyXG5cdFx0XHRcdFx0XHR0b3RhbCA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRwcm9ncmVzcyA9IDEwMDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRjb25zdCBwcm9nID0gX3JvdW5kX3AodmFsdWUvdG90YWwgKiAxMDApO1xyXG5cdFx0XHRcdFx0XHRpZiAocHJvZ3Jlc3MgIT09IHByb2cpe1xyXG5cdFx0XHRcdFx0XHRcdGlmIChwcm9ncmVzcykgY29uc29sZS53YXJuKGBUYXNrIGxpbmtlZCBcXGBwcm9ncmVzc1xcYCAoJHtwcm9ncmVzc30pIHJlY2FsY3VsYXRlZCB0byAoJHtwcm9nfSkgdXNpbmcgY3VycmVudCB2YWx1ZS90b3RhbCAoJHt2YWx1ZX0vJHt0b3RhbH0pICUuYCk7XHJcblx0XHRcdFx0XHRcdFx0cHJvZ3Jlc3MgPSBwcm9nO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYgKHByb2dyZXNzKSB0b3RhbCA9IF9yb3VuZF9wKDEwMC9wcm9ncmVzcyAqIHZhbHVlKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8tLSBwYXJzZS9hZGp1c3Q6IGVycm9yLCBzdGF0dXMsIHN0YXJ0VGltZSwgc3RvcFRpbWUsIGNvbXBsZXRlXHJcblx0XHRcdGNvbXBsZXRlID0gISFjb21wbGV0ZTtcclxuXHRcdFx0ZXJyb3IgPSBfZ2V0X2Vycm9yKGVycm9yKTtcclxuXHRcdFx0aWYgKCEoc3RhdHVzID0gX2dldF9zdHIoc3RhdHVzKS50b0xvd2VyQ2FzZSgpKSkgc3RhdHVzID0gJ25ldyc7XHJcblx0XHRcdGVsc2UgaWYgKCFUQVNLX1NUQVRVU0VTLmluY2x1ZGVzKHN0YXR1cykpIHN0YXR1cyA9ICduZXcnO1xyXG5cdFx0XHRpZiAoKHRtcCA9IF9wb3NfaW50KHN0YXJ0VGltZSwgLTEpKSA8IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgdGFzayBcXGBzdGFydFRpbWVcXGAgdmFsdWUuJyk7XHJcblx0XHRcdHN0YXJ0VGltZSA9IHRtcDtcclxuXHRcdFx0aWYgKCh0bXAgPSBfcG9zX2ludChzdG9wVGltZSwgLTEpKSA8IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgdGFzayBgc3RvcFRpbWVgIHZhbHVlLicpO1xyXG5cdFx0XHRzdG9wVGltZSA9IHRtcDtcclxuXHRcdFx0aWYgKCEoWydzdG9wcGVkJywgJ2ZhaWxlZCcsICdkb25lJ10uaW5jbHVkZXMoc3RhdHVzKSAmJiBzdGFydFRpbWUgJiYgc3RvcFRpbWUgJiYgc3RhcnRUaW1lIDwgc3RvcFRpbWUpKXtcclxuXHRcdFx0XHRzdGF0dXMgPSAnbmV3JztcclxuXHRcdFx0XHRzdGFydFRpbWUgPSAwO1xyXG5cdFx0XHRcdHN0b3BUaW1lID0gMDtcclxuXHRcdFx0XHRlcnJvciA9ICcnO1xyXG5cdFx0XHRcdGNvbXBsZXRlID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiAoZXJyb3IgJiYgc3RhdHVzICE9PSAnZmFpbGVkJykgc3RhdHVzID0gJ2ZhaWxlZCc7XHJcblx0XHRcdGVsc2UgaWYgKHN0YXR1cyA9PT0gJ2RvbmUnICYmICFjb21wbGV0ZSkgY29tcGxldGUgPSB0cnVlO1xyXG5cdFx0XHRpZiAoIVRBU0tfU1RBVFVTRVMuaW5jbHVkZXMoc3RhdHVzKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCB0YXNrIFxcYHN0YXR1c1xcYCB2YWx1ZS4nKTtcclxuXHJcblx0XHRcdC8vY3JlYXRlIHRhc2tcclxuXHRcdFx0Y29uc3QgdCA9IG5ldyBUYXNrKG5hbWUsIGxpbmtlZCwgcHJlY2lzaW9uLCBldmVudF9kZWJvdW5jZSk7XHJcblx0XHRcdGNvbnN0IHByb3BzID0gdFtQUk9QU107XHJcblx0XHRcdHByb3BzLm5hbWUgPSBuYW1lO1xyXG5cdFx0XHRwcm9wcy5sYWJlbCA9IGxhYmVsO1xyXG5cdFx0XHRwcm9wcy5saW5rZWQgPSBsaW5rZWQ7XHJcblx0XHRcdHByb3BzLnByZWNpc2lvbiA9IHByZWNpc2lvbiBhcyBudW1iZXI7XHJcblx0XHRcdHByb3BzLmV2ZW50X2RlYm91bmNlID0gZXZlbnRfZGVib3VuY2UgYXMgbnVtYmVyO1xyXG5cdFx0XHRwcm9wcy5wcm9ncmVzcyA9IHByb2dyZXNzO1xyXG5cdFx0XHRwcm9wcy50b3RhbCA9IHRvdGFsO1xyXG5cdFx0XHRwcm9wcy52YWx1ZSA9IHZhbHVlO1xyXG5cdFx0XHRwcm9wcy5lcnJvciA9IGVycm9yO1xyXG5cdFx0XHRwcm9wcy5zdGF0dXMgPSBzdGF0dXM7XHJcblx0XHRcdHByb3BzLnN0YXJ0VGltZSA9IHN0YXJ0VGltZTtcclxuXHRcdFx0cHJvcHMuc3RvcFRpbWUgPSBzdG9wVGltZTtcclxuXHRcdFx0cHJvcHMuY29tcGxldGUgPSBjb21wbGV0ZTtcclxuXHRcdFx0cHJvcHMuaXRlbSA9IGl0ZW07IC8vLS0gaXRlbVxyXG5cdFx0XHRwcm9wcy5fZGVib3VuY2VkX3VwZGF0ZSA9IF9kZWJvdW5jZSgoKSA9PiB7XHJcblx0XHRcdFx0aWYgKHByb3BzLl9kb25lKSByZXR1cm47XHJcblx0XHRcdFx0cHJvcHMuX2VtaXR0ZXIuZW1pdCgndXBkYXRlJywgdC5kYXRhKCkpO1xyXG5cdFx0XHR9LCB0LmV2ZW50X2RlYm91bmNlKTtcclxuXHRcdFx0cmV0dXJuIHQ7XHJcblx0XHR9XHJcblx0XHRjYXRjaCAoZTogYW55KXtcclxuXHRcdFx0Y29uc3QgZXJyb3IgPSBgQ3JlYXRlIFRhc2sgRmFpbHVyZSEgJHtlIGluc3RhbmNlb2YgRXJyb3IgPyBlLm1lc3NhZ2UgOiBlfWAudHJpbSgpO1xyXG5cdFx0XHRjb25zdCBfb3B0aW9ucyA9IHtuYW1lLCBsYWJlbCwgbGlua2VkLCBwcmVjaXNpb24sIGV2ZW50X2RlYm91bmNlLCBwcm9ncmVzcywgdG90YWwsIHZhbHVlLCBlcnJvciwgc3RhdHVzLCBzdGFydFRpbWUsIHN0b3BUaW1lLCBjb21wbGV0ZSwgaXRlbX07XHJcblx0XHRcdGNvbnNvbGUud2FybihlcnJvciwge19vcHRpb25zfSk7XHJcblx0XHRcdGlmIChlLm5hbWUgPT09ICdUeXBlRXJyb3InKSB0aHJvdyBuZXcgVHlwZUVycm9yKGVycm9yKTtcclxuXHRcdFx0ZWxzZSB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xyXG5cdFx0fVxyXG5cdH1cclxufSIsImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSUV2ZW50IH0gZnJvbSAnLi4vRXZlbnRFbWl0dGVyJztcclxuaW1wb3J0IHsgSVRhc2ssIFRhc2sgfSBmcm9tICcuL19UYXNrJztcclxuXHJcbi8qKlxyXG4gKiBUYXNrcyBkYXRhIGludGVyZmFjZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJVGFza3NEYXRhIHtcclxuXHRwcmVjaXNpb246IG51bWJlcjtcclxuXHRldmVudF9kZWJvdW5jZTogbnVtYmVyO1xyXG5cdHNpemU6IG51bWJlcjtcclxuXHRwcm9ncmVzczogbnVtYmVyO1xyXG5cdHJ1bm5pbmc6IGJvb2xlYW47XHJcblx0c3RhcnRlZDogYm9vbGVhbjtcclxuXHRjb21wbGV0ZTogYm9vbGVhbjtcclxuXHRzdGFydFRpbWU6IG51bWJlcjtcclxuXHRzdG9wVGltZTogbnVtYmVyO1xyXG5cdGVsYXBzZWRUaW1lOiBudW1iZXI7XHJcblx0dGFza3M6IHtbbmFtZTogc3RyaW5nXTogSVRhc2t9O1xyXG59XHJcblxyXG4vKipcclxuICogRGVmYXVsdCBldmVudCBkZWJvdW5jZSBtaWxsaXNlY29uZHNcclxuICovXHJcbmxldCBERUZBVUxUX0VWRU5UX0RFQk9VTkNFOiBudW1iZXIgPSAyMDA7XHJcblxyXG4vKipcclxuICogRGVmYXVsdCBwcmVjaXNpb24gfiByb3VuZCBkZWNpbWFsIHBsYWNlc1xyXG4gKi9cclxubGV0IERFRkFVTFRfUFJFQ0lTSU9OOiBudW1iZXIgPSAyO1xyXG5cclxuLyoqXHJcbiAqIEhlbHBlciAtIHBhcnNlIHBvc2l0aXZlIG51bWJlclxyXG4gKiBcclxuICogQHBhcmFtIHZhbFxyXG4gKiBAcGFyYW0gX2RlZmF1bHRcclxuICogQHBhcmFtIF9ibGFua1xyXG4gKiBAcmV0dXJucyBgbnVtYmVyYFxyXG4gKi9cclxuY29uc3QgX3Bvc19udW0gPSAodmFsOiBhbnksIF9kZWZhdWx0OiBudW1iZXIgPSAwLCBfYmxhbms6IG51bWJlciA9IDApOiBudW1iZXIgPT4ge1xyXG5cdGlmIChbdW5kZWZpbmVkLCBudWxsXS5pbmNsdWRlcyh2YWwpIHx8ICdzdHJpbmcnID09PSB0eXBlb2YgdmFsICYmICEodmFsID0gdmFsLnRyaW0oKSkpIHJldHVybiBfYmxhbms7XHJcblx0aWYgKCFpc05hTih2YWwgPSBwYXJzZUZsb2F0KHZhbCkpICYmIE51bWJlci5pc0Zpbml0ZSh2YWwpICYmIHZhbCA+PSAwKSByZXR1cm4gdmFsO1xyXG5cdHJldHVybiBfZGVmYXVsdDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBIZWxwZXIgLSBwYXJzZSBwb3NpdGl2ZSBpbnRlZ2VyXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsXHJcbiAqIEBwYXJhbSBfZGVmYXVsdFxyXG4gKiBAcGFyYW0gX2JsYW5rXHJcbiAqIEByZXR1cm5zIGBudW1iZXJgIGludGVnZXJcclxuICovXHJcbmNvbnN0IF9wb3NfaW50ID0gKHZhbDogYW55LCBfZGVmYXVsdDogbnVtYmVyID0gMCwgX2JsYW5rOiBudW1iZXIgPSAwKTogbnVtYmVyID0+IHBhcnNlSW50KF9wb3NfbnVtKHZhbCwgX2RlZmF1bHQsIF9ibGFuaykgKyAnJyk7XHJcblxyXG4vKipcclxuICogSGVscGVyIC0gcm91bmQgbnVtYmVyXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsIC0gcm91bmQgdmFsdWVcclxuICogQHBhcmFtIHBsYWNlcyAtIHByZWNpc2lvbiBkZWNpbWFsIHBsYWNlcyBbZGVmYXVsdDogYERFRkFVTFRfUFJFQ0lTSU9OYF1cclxuICogQHJldHVybnMgYG51bWJlcmAgcm91bmRlZFxyXG4gKi9cclxuY29uc3QgX3JvdW5kID0gKHZhbDogbnVtYmVyLCBwbGFjZXM/OiBudW1iZXIpOiBudW1iZXIgPT4ge1xyXG5cdGNvbnN0IHAgPSAxMCAqKiBfcG9zX2ludChwbGFjZXMsIERFRkFVTFRfUFJFQ0lTSU9OLCBERUZBVUxUX1BSRUNJU0lPTik7XHJcblx0cmV0dXJuIE1hdGgucm91bmQoKHZhbCArIE51bWJlci5FUFNJTE9OKSAqIHApIC8gcDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBIZWxwZXIgLSBkZWJvdW5jZWQgY2FsbGJhY2tcclxuICogXHJcbiAqIEBwYXJhbSBjYWxsYmFjayAtIGNhbGxiYWNrIGhhbmRsZXJcclxuICogQHBhcmFtIHRpbWVvdXQgLSB0aW1lb3V0IG1pbGxpc2Vjb25kc1xyXG4gKiBAcmV0dXJucyBgKCk9PnZvaWRgIGRlYm91bmNlZCBjYWxsYmFja1xyXG4gKi9cclxuY29uc3QgX2RlYm91bmNlID0gKGNhbGxiYWNrOiAoKT0+dm9pZCwgdGltZW91dDogbnVtYmVyID0gMCk6ICgpID0+IHZvaWQgPT4ge1xyXG5cdGxldCB0aW1lcjogYW55LCBtYXhfd2FpdDogYW55O1xyXG5cdGNvbnN0IF9oYW5kbGVyID0gKCkgPT4ge1xyXG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVyKTtcclxuXHRcdGNsZWFyVGltZW91dChtYXhfd2FpdCk7XHJcblx0XHRtYXhfd2FpdCA9IHVuZGVmaW5lZDtcclxuXHRcdGNhbGxiYWNrKCk7XHJcblx0fTtcclxuXHRyZXR1cm4gKCkgPT4ge1xyXG5cdFx0aWYgKCF0aW1lb3V0KSByZXR1cm4gY2FsbGJhY2soKTtcclxuXHRcdGNsZWFyVGltZW91dCh0aW1lcik7XHJcblx0XHR0aW1lciA9IHNldFRpbWVvdXQoX2hhbmRsZXIsIHRpbWVvdXQpO1xyXG5cdFx0aWYgKCFtYXhfd2FpdCkgbWF4X3dhaXQgPSBzZXRUaW1lb3V0KF9oYW5kbGVyLCBNYXRoLmZsb29yKHRpbWVvdXQgKiAxLjUpKTtcclxuXHR9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGBTeW1ib2xgIHByaXZhdGUgcHJvcHMga2V5IG5hbWVcclxuICovXHJcbmNvbnN0IFBST1BTID0gU3ltYm9sKGBfX3ByaXZhdGVfcHJvcHNfJHtEYXRlLm5vdygpfV9fYCk7XHJcblxyXG4vKipcclxuICogQGNsYXNzIFRhc2tzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVGFza3Ncclxue1xyXG5cdC8qKlxyXG5cdCAqIFRhc2tzIGdsb2JhbCBldmVudCBkZWJvdW5jZSBtaWxsaXNlY29uZHNcclxuXHQgKi9cclxuXHRzdGF0aWMgZ2V0IGV2ZW50X2RlYm91bmNlKCk6IG51bWJlciB7XHJcblx0XHRyZXR1cm4gREVGQVVMVF9FVkVOVF9ERUJPVU5DRTtcclxuXHR9XHJcblx0c3RhdGljIHNldCBldmVudF9kZWJvdW5jZSh2YWx1ZTogYW55KXtcclxuXHRcdERFRkFVTFRfRVZFTlRfREVCT1VOQ0UgPSBfcG9zX2ludCh2YWx1ZSwgREVGQVVMVF9FVkVOVF9ERUJPVU5DRSwgMCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBUYXNrIGdsb2JhbCBwcmVjaXNpb24gfiByb3VuZCBkZWNpbWFsIHBsYWNlc1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBnZXQgZGVjaW1hbF9wcmVjaXNpb24oKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiBERUZBVUxUX1BSRUNJU0lPTjtcclxuXHR9XHJcblx0c3RhdGljIHNldCBkZWNpbWFsX3ByZWNpc2lvbih2YWx1ZTogYW55KXtcclxuXHRcdERFRkFVTFRfUFJFQ0lTSU9OID0gX3Bvc19pbnQodmFsdWUsIERFRkFVTFRfUFJFQ0lTSU9OLCAyKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEluc3RhbmNlIFwicHJpdmF0ZVwiIHByb3BzXHJcblx0ICovXHJcblx0W1BST1BTXToge1xyXG5cdFx0cHJlY2lzaW9uOiBudW1iZXI7XHJcblx0XHRldmVudF9kZWJvdW5jZTogbnVtYmVyO1xyXG5cdFx0X3Rhc2tzOiBNYXA8c3RyaW5nLCBUYXNrPjtcclxuXHRcdF91bnN1YnNjcmliZTogTWFwPHN0cmluZywgKCk9PnZvaWQ+O1xyXG5cdFx0X2VtaXR0ZXI6IEV2ZW50RW1pdHRlcjtcclxuXHRcdF9kZWJvdW5jZWRfdXBkYXRlOiAoKT0+dm9pZDtcclxuXHR9ID0ge30gYXMgYW55O1xyXG5cclxuXHQvKipcclxuXHQgKiBUYXNrcyBjb3VudFxyXG5cdCAqL1xyXG5cdGdldCBzaXplKCk6IG51bWJlciB7XHJcblx0XHRyZXR1cm4gdGhpc1tQUk9QU10uX3Rhc2tzLnNpemU7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFRhc2sgcHJlY2lzaW9uIC0gYGludGVnZXJgIGRlY2ltYWwgcGxhY2VzXHJcblx0ICovXHJcblx0Z2V0IHByZWNpc2lvbigpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIHRoaXNbUFJPUFNdLnByZWNpc2lvbjtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRhc2sgZXZlbnQgZGVib3VuY2UgbWlsbGlzZWNvbmRzIChkZWZhdWx0OiBgVGFza3MuZXZlbnRfZGVib3VuY2VgKVxyXG5cdCAqL1xyXG5cdGdldCBldmVudF9kZWJvdW5jZSgpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIHRoaXNbUFJPUFNdLmV2ZW50X2RlYm91bmNlO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlIG5ldyBpbnN0YW5jZVxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBwcmVjaXNpb24gLSBkZWNpbWFsIHBsYWNlcyAoZGVmYXVsdDogYFRhc2tzLmRlY2ltYWxfcHJlY2lzaW9uYClcclxuXHQgKiBAcGFyYW0gZXZlbnRfZGVib3VuY2UgLSBldmVudCBkZWJvdW5jZSBtaWxsaXNlY29uZHMgKGRlZmF1bHQ6IGBUYXNrcy5ldmVudF9kZWJvdW5jZWApXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IocHJlY2lzaW9uOiBudW1iZXIgPSBUYXNrcy5kZWNpbWFsX3ByZWNpc2lvbiwgZXZlbnRfZGVib3VuY2U6IG51bWJlciA9IFRhc2tzLmV2ZW50X2RlYm91bmNlKXtcclxuXHRcdHByZWNpc2lvbiA9IF9wb3NfaW50KHByZWNpc2lvbiwgVGFza3MuZGVjaW1hbF9wcmVjaXNpb24sIFRhc2tzLmRlY2ltYWxfcHJlY2lzaW9uKTtcclxuXHRcdGV2ZW50X2RlYm91bmNlID0gX3Bvc19pbnQoZXZlbnRfZGVib3VuY2UsIFRhc2tzLmV2ZW50X2RlYm91bmNlLCBUYXNrcy5ldmVudF9kZWJvdW5jZSk7XHJcblx0XHR0aGlzW1BST1BTXSA9IHtcclxuXHRcdFx0cHJlY2lzaW9uOiBwcmVjaXNpb24sXHJcblx0XHRcdGV2ZW50X2RlYm91bmNlOiBldmVudF9kZWJvdW5jZSxcclxuXHRcdFx0X3Rhc2tzOiBuZXcgTWFwKCksXHJcblx0XHRcdF91bnN1YnNjcmliZTogbmV3IE1hcCgpLFxyXG5cdFx0XHRfZW1pdHRlcjogbmV3IEV2ZW50RW1pdHRlcigpLFxyXG5cdFx0XHRfZGVib3VuY2VkX3VwZGF0ZTogX2RlYm91bmNlKCgpID0+IHtcclxuXHRcdFx0XHRjb25zdCBwcm9wcyA9IHRoaXNbUFJPUFNdO1xyXG5cdFx0XHRcdHByb3BzLl9lbWl0dGVyLmVtaXQoJ3VwZGF0ZScsIHRoaXMuZGF0YSgpKTtcclxuXHRcdFx0fSwgZXZlbnRfZGVib3VuY2UpLFxyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCB0YXNrcyBkYXRhXHJcblx0ICogXHJcblx0ICogQHJldHVybnMgYElUYXNrc0RhdGFgIG9wdGlvbnMgfiBpLmUuIGB7cHJlY2lzaW9uLCBldmVudF9kZWJvdW5jZSwgc2l6ZSwgcHJvZ3Jlc3MsIHJ1bm5pbmcsIHN0YXJ0ZWQsIGNvbXBsZXRlLCBzdGFydFRpbWUsIHN0b3BUaW1lLCBlbGFwc2VkVGltZSwgdGFza3N9YFxyXG5cdCAqL1xyXG5cdGdldCBkYXRhKCk6ICgpPT5JVGFza3NEYXRhIHtcclxuXHRcdHJldHVybiAoKTogSVRhc2tzRGF0YSA9PiB7XHJcblx0XHRcdGNvbnN0IHByb3BzID0gdGhpc1tQUk9QU107XHJcblx0XHRcdGxldCBzaXplOiBudW1iZXIgPSAwO1xyXG5cdFx0XHRsZXQgc3RhcnRUaW1lOiBudW1iZXIgPSAwO1xyXG5cdFx0XHRsZXQgc3RvcFRpbWU6IG51bWJlciA9IDA7XHJcblx0XHRcdGxldCBhbGxfcHJvZ3Jlc3M6IG51bWJlciA9IDA7XHJcblx0XHRcdGxldCBmdWxsX3Byb2dyZXNzOiBudW1iZXIgPSAwO1xyXG5cdFx0XHRsZXQgaGFzX3J1bm5pbmc6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHRcdFx0bGV0IGhhc19zdGFydGVkOiBib29sZWFuID0gZmFsc2U7XHJcblx0XHRcdGxldCBoYXNfaW5jb21wbGV0ZTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuXHRcdFx0Ly9wYXJzZSB0YXNrcyBkYXRhXHJcblx0XHRcdGNvbnN0IHRhc2tfZW50cmllczogW25hbWU6IHN0cmluZywgdGFzazogSVRhc2tdW10gPSBbXTtcclxuXHRcdFx0Zm9yIChjb25zdCB0YXNrIG9mIFsuLi5wcm9wcy5fdGFza3MudmFsdWVzKCldKXtcclxuXHRcdFx0XHRjb25zdCBkYXRhID0gdGFzay5kYXRhKCk7XHJcblx0XHRcdFx0c2l6ZSArKztcclxuXHJcblx0XHRcdFx0Ly8tLSBwcm9ncmVzc1xyXG5cdFx0XHRcdGZ1bGxfcHJvZ3Jlc3MgKz0gMTAwO1xyXG5cdFx0XHRcdGFsbF9wcm9ncmVzcyArPSBkYXRhLnByb2dyZXNzO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdC8vLS0gY29tcGxldGVcclxuXHRcdFx0XHRpZiAoIWhhc19pbmNvbXBsZXRlICYmICFkYXRhLmNvbXBsZXRlKSBoYXNfaW5jb21wbGV0ZSA9IHRydWU7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Ly8tLSBzdGF0dXMgPSBydW5uaW5nL3N0YXJ0ZWRcclxuXHRcdFx0XHRpZiAoZGF0YS5zdGF0dXMgPT09ICdydW5uaW5nJyl7XHJcblx0XHRcdFx0XHRpZiAoIWhhc19ydW5uaW5nKSBoYXNfcnVubmluZyA9IHRydWU7XHJcblx0XHRcdFx0XHRpZiAoIWhhc19zdGFydGVkKSBoYXNfc3RhcnRlZCA9IHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYgKCFoYXNfc3RhcnRlZCAmJiBbJ2ZhaWxlZCcsICdkb25lJ10uaW5jbHVkZXMoZGF0YS5zdGF0dXMpKSBoYXNfc3RhcnRlZCA9IHRydWU7XHJcblxyXG5cdFx0XHRcdC8vLS0gc3RhcnRUaW1lXHJcblx0XHRcdFx0aWYgKGRhdGEuc3RhcnRUaW1lICYmICghc3RhcnRUaW1lICYmIGRhdGEuc3RhcnRUaW1lIDwgc3RhcnRUaW1lKSkgc3RhcnRUaW1lID0gZGF0YS5zdGFydFRpbWU7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Ly8tLSBzdG9wVGltZVxyXG5cdFx0XHRcdGlmIChkYXRhLnN0b3BUaW1lICYmICghc3RvcFRpbWUgJiYgZGF0YS5zdG9wVGltZSA+IHN0b3BUaW1lKSkgc3RvcFRpbWUgPSBkYXRhLnN0b3BUaW1lO1xyXG5cclxuXHRcdFx0XHQvL3Rhc2sgZW50cnlcclxuXHRcdFx0XHR0YXNrX2VudHJpZXMucHVzaChbdGFzay5uYW1lLCBkYXRhXSk7XHJcblx0XHRcdH1cclxuXHRcdFx0Y29uc3QgdGFza3M6IHtbbmFtZTogc3RyaW5nXTogSVRhc2t9ID0gT2JqZWN0LmZyb21FbnRyaWVzKHRhc2tfZW50cmllcyk7XHJcblx0XHRcdFxyXG5cdFx0XHQvL2NhbGMgZGF0YVxyXG5cdFx0XHRjb25zdCBwcm9ncmVzcyA9ICghYWxsX3Byb2dyZXNzIHx8ICFmdWxsX3Byb2dyZXNzKSA/IDAgOiAoKGFsbF9wcm9ncmVzcyA+PSBmdWxsX3Byb2dyZXNzKSA/IDEwMCA6ICBfcm91bmQoYWxsX3Byb2dyZXNzL2Z1bGxfcHJvZ3Jlc3MgKiAxMDAsIHByb3BzLnByZWNpc2lvbikpO1xyXG5cdFx0XHRjb25zdCBydW5uaW5nID0gaGFzX3J1bm5pbmc7XHJcblx0XHRcdGNvbnN0IHN0YXJ0ZWQgPSBoYXNfc3RhcnRlZDtcclxuXHRcdFx0Y29uc3QgY29tcGxldGUgPSBzdGFydGVkICYmICFoYXNfaW5jb21wbGV0ZTtcclxuXHRcdFx0bGV0IGVsYXBzZWRUaW1lID0gMDtcclxuXHRcdFx0aWYgKHN0b3BUaW1lICYmIHN0YXJ0VGltZSl7XHJcblx0XHRcdFx0aWYgKHN0b3BUaW1lIDwgc3RhcnRUaW1lKSBzdGFydFRpbWUgPSBzdG9wVGltZTtcclxuXHRcdFx0XHRlbGFwc2VkVGltZSA9IHN0b3BUaW1lIC0gc3RhcnRUaW1lO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvL2RhdGFcclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRwcmVjaXNpb246IHRoaXMucHJlY2lzaW9uLFxyXG5cdFx0XHRcdGV2ZW50X2RlYm91bmNlOiB0aGlzLmV2ZW50X2RlYm91bmNlLFxyXG5cdFx0XHRcdHNpemUsXHJcblx0XHRcdFx0cHJvZ3Jlc3MsXHJcblx0XHRcdFx0cnVubmluZyxcclxuXHRcdFx0XHRzdGFydGVkLFxyXG5cdFx0XHRcdGNvbXBsZXRlLFxyXG5cdFx0XHRcdHN0YXJ0VGltZSxcclxuXHRcdFx0XHRzdG9wVGltZSxcclxuXHRcdFx0XHRlbGFwc2VkVGltZSxcclxuXHRcdFx0XHR0YXNrcyxcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFVwZGF0ZSBldmVudCB0cmlnZ2VyXHJcblx0ICogXHJcblx0ICogQHJldHVybnMgYFRhc2tgIGluc3RhbmNlXHJcblx0ICovXHJcblx0Z2V0IHVwZGF0ZSgpOiAoKT0+VGFza3Mge1xyXG5cdFx0cmV0dXJuICgpOiBUYXNrcyA9PiB7XHJcblx0XHRcdHRoaXNbUFJPUFNdLl9kZWJvdW5jZWRfdXBkYXRlKCk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEFkZCB1cGRhdGUgZXZlbnQgc3Vic2NyaWJlciB+IGBldmVudCA9IHt0eXBlOiAndXBkYXRlJywgZGF0YTogSVRhc2t9YFxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBsaXN0ZW5lciAtIGV2ZW50IGNhbGxiYWNrIGxpc3RlbmVyXHJcblx0ICogQHJldHVybnMgYCgoKT0+dm9pZClgIHVuc3Vic2NyaWJlIGNhbGxiYWNrXHJcblx0ICovXHJcblx0c3Vic2NyaWJlKGxpc3RlbmVyOiAoZXZlbnQ6SUV2ZW50KT0+dm9pZCk6ICgpPT52b2lkIHtcclxuXHRcdHJldHVybiB0aGlzW1BST1BTXS5fZW1pdHRlci5zdWJzY3JpYmUoJ3VwZGF0ZScsIGxpc3RlbmVyKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENoZWNrIGlmIHRhc2sgbmFtZSBleGlzdHNcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gbmFtZVxyXG5cdCAqIEByZXR1cm5zIGBib29sZWFuYFxyXG5cdCAqL1xyXG5cdGhhcyhuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcclxuXHRcdHJldHVybiB0aGlzW1BST1BTXS5fdGFza3MuaGFzKG5hbWUpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0IHRhc2sgYnkgbmFtZVxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBuYW1lIC0gdGFzayBuYW1lXHJcblx0ICogQHJldHVybnMgYFRhc2tgXHJcblx0ICovXHJcblx0Z2V0KG5hbWU6IHN0cmluZyk6IFRhc2t8dW5kZWZpbmVkIHtcclxuXHRcdHJldHVybiB0aGlzW1BST1BTXS5fdGFza3MuZ2V0KG5hbWUpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQWRkIG5ldyB0YXNrXHJcblx0ICogXHJcblx0ICogQHBhcmFtIHRhc2sgLSBgc3RyaW5nYCB0YXNrIG5hbWUgfCBgSVRhc2tgIHRhc2sgZGF0YSB8IGBUYXNrYCBpbnN0YW5jZVxyXG5cdCAqIEBwYXJhbSBsaW5rZWQgLSB0YXNrIHZhbHVlL3RvdGFsL3Byb2dyZXNzIGxpbmtlZCB+IHJlY2FsY3VsYXRlIG9uIGNoYW5nZVxyXG5cdCAqIEBwYXJhbSBldmVudF9kZWJvdW5jZSAtIGV2ZW50IGRlYm91bmNlIG1pbGxpc2Vjb25kcyAoZGVmYXVsdDogYFRhc2suZXZlbnRfZGVib3VuY2VgKVxyXG5cdCAqIEByZXR1cm5zIGBUYXNrYFxyXG5cdCAqL1xyXG5cdGFkZCh0YXNrOiBzdHJpbmd8SVRhc2t8VGFzaywgbGlua2VkOiBib29sZWFuID0gZmFsc2UsIGV2ZW50X2RlYm91bmNlPzogbnVtYmVyKTogVGFzayB7XHJcblx0XHRjb25zdCBwcm9wcyA9IHRoaXNbUFJPUFNdO1xyXG5cdFx0ZXZlbnRfZGVib3VuY2UgPSAoZXZlbnRfZGVib3VuY2UgPSBfcG9zX2ludChldmVudF9kZWJvdW5jZSwgLTEsIC0xKSkgPj0gMCA/IGV2ZW50X2RlYm91bmNlIDogdW5kZWZpbmVkO1xyXG5cdFx0XHJcblx0XHQvL3Rhc2sgaW5zdGFuY2VcclxuXHRcdGxldCBfdGFzazogVGFzayA9IHVuZGVmaW5lZCBhcyBhbnk7XHJcblx0XHRpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB0YXNrKSBfdGFzayA9IG5ldyBUYXNrKHRhc2ssIGxpbmtlZCwgcHJvcHMucHJlY2lzaW9uLCBldmVudF9kZWJvdW5jZSk7XHJcblx0XHRlbHNlIGlmICh0YXNrIGluc3RhbmNlb2YgVGFzaykgX3Rhc2sgPSB0YXNrO1xyXG5cdFx0ZWxzZSBpZiAoJ29iamVjdCcgPT09IHR5cGVvZiB0YXNrICYmICdzdHJpbmcnID09PSB0eXBlb2YgdGFzaz8ubmFtZSkgX3Rhc2sgPSBUYXNrLmNyZWF0ZSh0YXNrLCBwcm9wcy5wcmVjaXNpb24sIGV2ZW50X2RlYm91bmNlKTtcclxuXHRcdGlmICghKF90YXNrIGluc3RhbmNlb2YgVGFzaykpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FkZCBcXGBUYXNrXFxgIG9iamVjdCBpcyBpbnZhbGlkLicpO1xyXG5cclxuXHRcdC8vdGFzayBleGlzdHMgLSByZXBsYWNlXHJcblx0XHRpZiAodGhpcy5oYXMoX3Rhc2submFtZSkpIGNvbnNvbGUud2FybihgRXhpc3RpbmcgdGFzayBuYW1lZCBcIiR7X3Rhc2submFtZX1cIiBoYXMgYmVlbiByZXBsYWNlZC5gKTtcclxuXHJcblx0XHQvL3Rhc2sgbGlzdGVuZXJcclxuXHRcdGNvbnN0IHVuc3Vic2NyaWJlID0gX3Rhc2suc3Vic2NyaWJlKChldmVudDogSUV2ZW50KSA9PiB7XHJcblx0XHRcdGNvbnNvbGUuZGVidWcoYC0tIHRhc2sgZXZlbnQgJHtldmVudC5kYXRhLm5hbWV9YCwgZXZlbnQuZGF0YS5wcm9ncmVzcyk7IC8vVE9ETzogcmVtb3ZlIHRhc2sgZXZlbnQgZGVidWdcclxuXHRcdFx0dGhpcy51cGRhdGUoKTsgLy90YXNrIHVwZGF0ZVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly90YXNrIGFkZFxyXG5cdFx0cHJvcHMuX3Rhc2tzLnNldChfdGFzay5uYW1lLCBfdGFzayk7XHJcblx0XHRwcm9wcy5fdW5zdWJzY3JpYmUuc2V0KF90YXNrLm5hbWUsIHVuc3Vic2NyaWJlKTtcclxuXHRcdHRoaXMudXBkYXRlKCk7IC8vdXBkYXRlXHJcblx0XHRcclxuXHRcdC8vcmVzdWx0XHJcblx0XHRyZXR1cm4gX3Rhc2s7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFJlbW92ZSB0YXNrIGJ5IG5hbWVcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gbmFtZSAtIHRhc2sgbmFtZVxyXG5cdCAqIEByZXR1cm5zIGBUYXNrc2AgaW5zdGFuY2VcclxuXHQgKi9cclxuXHRyZW1vdmUobmFtZTogc3RyaW5nKTogVGFza3Mge1xyXG5cdFx0Y29uc3QgcHJvcHMgPSB0aGlzW1BST1BTXTtcclxuXHRcdGlmICghcHJvcHMuX3Rhc2tzLmhhcyhuYW1lKSkgcmV0dXJuIHRoaXM7XHJcblx0XHRcclxuXHRcdC8vdW5zdWJzY3JpYmUgdGFzayBsaXN0ZW5lclxyXG5cdFx0Y29uc3QgdW5zdWJzY3JpYmUgPSBwcm9wcy5fdW5zdWJzY3JpYmUuZ2V0KG5hbWUpO1xyXG5cdFx0aWYgKHVuc3Vic2NyaWJlKXtcclxuXHRcdFx0cHJvcHMuX3Vuc3Vic2NyaWJlLmRlbGV0ZShuYW1lKTtcclxuXHRcdFx0dW5zdWJzY3JpYmUoKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0Ly9yZW1vdmUgdGFzayAtIHVwZGF0ZVxyXG5cdFx0cHJvcHMuX3Rhc2tzLmRlbGV0ZShuYW1lKTtcclxuXHRcdHRoaXMudXBkYXRlKCk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcbn0iLCJleHBvcnQgKiBmcm9tICcuL19UYXNrJztcclxuZXhwb3J0ICogZnJvbSAnLi9fVGFza3MnOyIsImltcG9ydCB7IF9jbG9uZSwgX2pzb25TdHJpbmdpZnksIF9pc0RhdGUsIF9zdHIsIF9zdHJpbmcsIF9zdHJpbmdhYmxlLCBfc3RyRXNjYXBlLCBfYm9vbCB9IGZyb20gJy4uL3V0aWxzJztcclxuXHJcbi8qKlxyXG4gKiBUZXJtIGZvcm1hdCByZXN1bHQgaW50ZXJmYWNlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElUZXJtRm9ybWF0IHtcclxuXHRtZXRob2Q6ICh2YWx1ZTogdW5kZWZpbmVkfCdsb2cnfCdkZWJ1Zyd8J3dhcm4nfCdlcnJvcid8J2luZm8nKSA9PiBJVGVybUZvcm1hdDtcclxuXHRmb3JtYXQ6IChmb3JtYXRzOiBzdHJpbmd8c3RyaW5nW10sIC4uLmFyZ3M6IGFueVtdKSA9PiBJVGVybUZvcm1hdDtcclxuXHR2YWx1ZXM6ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55W107XHJcblx0Y2xlYW46ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55W107XHJcblx0bG9nOiAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB2b2lkO1xyXG5cdGRlYnVnOiAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB2b2lkO1xyXG5cdHdhcm46IChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IHZvaWQ7XHJcblx0ZXJyb3I6IChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IHZvaWQ7XHJcblx0aW5mbzogKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4gdm9pZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRlcm0gbG9nIG1ldGhvZCB+IHN0YXRpYyByZWFkL3dyaXRlIGNhY2hlXHJcbiAqL1xyXG5sZXQgVEVSTV9GT1JNQVRfRElTQUJMRUQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbi8qKlxyXG4gKiBUZXJtIGxvZyBtZXRob2QgfiBzdGF0aWMgcmVhZC93cml0ZSBjYWNoZVxyXG4gKi9cclxubGV0IFRFUk1fTE9HX01FVEhPRDogdW5kZWZpbmVkfCdsb2cnfCdkZWJ1Zyd8J3dhcm4nfCdlcnJvcid8J2luZm8nID0gdW5kZWZpbmVkXHJcblxyXG4vKipcclxuICogVGVybSBgY29uc29sZS4qYCBsb2dnZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBUZXJtXHJcbntcclxuXHQvKipcclxuXHQgKiBGb3JtYXQgZGlzYWJsZWRcclxuXHQgKi9cclxuXHRzdGF0aWMgZ2V0IEZPUk1BVF9ESVNBQkxFRCgpOiBib29sZWFuIHtcclxuXHRcdHJldHVybiBURVJNX0ZPUk1BVF9ESVNBQkxFRDtcclxuXHR9XHJcblx0c3RhdGljIHNldCBGT1JNQVRfRElTQUJMRUQodmFsdWU6IGFueSl7XHJcblx0XHRURVJNX0ZPUk1BVF9ESVNBQkxFRCA9IF9ib29sKHZhbHVlLCB0cnVlKSA/PyBmYWxzZTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENvbnNvbGUgbG9nIG1ldGhvZHNcclxuXHQgKi9cclxuXHRzdGF0aWMgZ2V0IExPR19NRVRIT0RTKCk6IHN0cmluZ1tdIHtcclxuXHRcdHJldHVybiBbJ2xvZycsICdkZWJ1ZycsICd3YXJuJywgJ2Vycm9yJywgJ2luZm8nXTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFByZWZlcnJlZCBjb25zb2xlIGxvZyBtZXRob2RcclxuXHQgKi9cclxuXHRzdGF0aWMgZ2V0IExPR19NRVRIT0QoKTogdW5kZWZpbmVkfCdsb2cnfCdkZWJ1Zyd8J3dhcm4nfCdlcnJvcid8J2luZm8nIHtcclxuXHRcdHJldHVybiBURVJNX0xPR19NRVRIT0Q7XHJcblx0fVxyXG5cdHN0YXRpYyBzZXQgTE9HX01FVEhPRCh2YWx1ZTogYW55KXtcclxuXHRcdFRFUk1fTE9HX01FVEhPRCA9IHRoaXMuTE9HX01FVEhPRFMuaW5jbHVkZXModmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBUZXh0IGZvcm1hdHNcclxuXHQgKi9cclxuXHRzdGF0aWMgZ2V0IEZPUk1BVFMoKToge1trZXk6IHN0cmluZ106IHN0cmluZ30ge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0cmVzZXQ6ICdcXHgxYlswbScsXHJcblx0XHRcdGJyaWdodDogJ1xceDFiWzFtJyxcclxuXHRcdFx0ZGltOiAnXFx4MWJbMm0nLFxyXG5cdFx0XHR1bmRlcnNjb3JlOiAnXFx4MWJbNG0nLFxyXG5cdFx0XHRibGluazogJ1xceDFiWzVtJyxcclxuXHRcdFx0cmV2ZXJzZTogJ1xceDFiWzdtJyxcclxuXHRcdFx0aGlkZGVuOiAnXFx4MWJbOG0nLFxyXG5cdFx0XHRmZ19ibGFjazogJ1xceDFiWzMwbScsXHJcblx0XHRcdGZnX3JlZDogJ1xceDFiWzMxbScsXHJcblx0XHRcdGZnX2dyZWVuOiAnXFx4MWJbMzJtJyxcclxuXHRcdFx0ZmdfeWVsbG93OiAnXFx4MWJbMzNtJyxcclxuXHRcdFx0ZmdfYmx1ZTogJ1xceDFiWzM0bScsXHJcblx0XHRcdGZnX21hZ2VudGE6ICdcXHgxYlszNW0nLFxyXG5cdFx0XHRmZ19jeWFuOiAnXFx4MWJbMzZtJyxcclxuXHRcdFx0Zmdfd2hpdGU6ICdcXHgxYlszN20nLFxyXG5cdFx0XHRmZ19ncmF5OiAnXFx4MWJbOTBtJyxcclxuXHRcdFx0YmdfYmxhY2s6ICdcXHgxYls0MG0nLFxyXG5cdFx0XHRiZ19yZWQ6ICdcXHgxYls0MW0nLFxyXG5cdFx0XHRiZ19ncmVlbjogJ1xceDFiWzQybScsXHJcblx0XHRcdGJnX3llbGxvdzogJ1xceDFiWzQzbScsXHJcblx0XHRcdGJnX2JsdWU6ICdcXHgxYls0NG0nLFxyXG5cdFx0XHRiZ19tYWdlbnRhOiAnXFx4MWJbNDVtJyxcclxuXHRcdFx0YmdfY3lhbjogJ1xceDFiWzQ2bScsXHJcblx0XHRcdGJnX3doaXRlOiAnXFx4MWJbNDdtJyxcclxuXHRcdFx0YmdfZ3JheTogJ1xceDFiWzEwMG0nLFxyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFByZWRlZmluZWQgdGV4dCBmb3JtYXRzXHJcblx0ICovXHJcblx0c3RhdGljIGdldCBQUkVERUZJTkVEX0ZPUk1BVFMoKToge1trZXk6IHN0cmluZ106IHN0cmluZ3xzdHJpbmdbXX0ge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0bG9nOiAnZmdfd2hpdGUnLFxyXG5cdFx0XHRkdW1wOiBbJ2ZnX3doaXRlJywgJ2JyaWdodCddLFxyXG5cdFx0XHRkZWJ1ZzogJ2ZnX2dyYXknLFxyXG5cdFx0XHRlcnJvcjogJ2ZnX3JlZCcsXHJcblx0XHRcdHdhcm46ICdmZ195ZWxsb3cnLFxyXG5cdFx0XHRpbmZvOiAnZmdfY3lhbicsXHJcblx0XHRcdHN1Y2Nlc3M6ICdmZ19ncmVlbicsXHJcblx0XHRcdGJnX2xvZzogWydiZ19ibHVlJywgJ2ZnX3doaXRlJ10sXHJcblx0XHRcdGJnX2RlYnVnOiBbJ2JnX2dyYXknLCAnZmdfYmxhY2snXSxcclxuXHRcdFx0YmdfZXJyb3I6IFsnYmdfcmVkJywgJ2ZnX3doaXRlJ10sXHJcblx0XHRcdGJnX3dhcm46IFsnYmdfeWVsbG93JywgJ2ZnX2JsYWNrJ10sXHJcblx0XHRcdGJnX2luZm86IFsnYmdfY3lhbicsICdmZ19ibGFjayddLFxyXG5cdFx0XHRiZ19zdWNjZXNzOiBbJ2JnX2dyZWVuJywgJ2ZnX3doaXRlJ10sXHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0IHN0YW5kYXJkaXplZCB0ZXh0IGZvcm1hdHNcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gZm9ybWF0cyBUZXh0IGZvcm1hdChzKVxyXG5cdCAqIEByZXR1cm5zIGBzdHJpbmdbXWBcclxuXHQgKi9cclxuXHRzdGF0aWMgZ2V0IGdldEZvcm1hdHMoKTogKGZvcm1hdHM6IHN0cmluZ3xzdHJpbmdbXSk9PnN0cmluZ1tdIHtcclxuXHRcdHJldHVybiBmdW5jdGlvbih0aGlzOiBhbnksIGZvcm1hdHM6IHN0cmluZ3xzdHJpbmdbXSk6IHN0cmluZ1tdIHtcclxuXHRcdFx0Y29uc3QgRk0gPSB0aGlzLkZPUk1BVFM7XHJcblx0XHRcdGNvbnN0IFBGID0gdGhpcy5QUkVERUZJTkVEX0ZPUk1BVFM7XHJcblx0XHRcdGNvbnN0IF9mb3JtYXRzOiBzdHJpbmdbXSA9IEFycmF5LmlzQXJyYXkoZm9ybWF0cykgPyBmb3JtYXRzIDogJ3N0cmluZycgPT09IHR5cGVvZiBmb3JtYXRzID8gW2Zvcm1hdHNdIDogW107XHJcblx0XHRcdHJldHVybiBfZm9ybWF0cy5yZWR1Y2U8c3RyaW5nW10+KChwcmV2LCB2YWwpID0+IHtcclxuXHRcdFx0XHRpZiAoKHZhbCA9IHZhbC50cmltKCkudG9Mb3dlckNhc2UoKSkgJiYgdmFsICE9PSAncmVzZXQnKXtcclxuXHRcdFx0XHRcdGxldCB0bXAgPSB2YWwgPSB2YWwucmVwbGFjZSgvW15hLXowLTldL2lnLCAnXycpLnJlcGxhY2UoJ2dyZXknLCAnZ3JheScpO1xyXG5cdFx0XHRcdFx0Y29uc3QgX2FkZFBGID0gKGs6IHN0cmluZyk6IHZvaWQgPT4ge1xyXG5cdFx0XHRcdFx0XHRjb25zdCB2ID0gUEZba107XHJcblx0XHRcdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KHYpKSBwcmV2LnB1c2goLi4udik7XHJcblx0XHRcdFx0XHRcdGVsc2UgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdikgcHJldi5wdXNoKHYpO1xyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdGlmIChGTS5oYXNPd25Qcm9wZXJ0eSh2YWwpKSBwcmV2LnB1c2godmFsKTtcclxuXHRcdFx0XHRcdGVsc2UgaWYgKEZNLmhhc093blByb3BlcnR5KHRtcCA9IGBmZ18ke3ZhbH1gKSkgcHJldi5wdXNoKHRtcCk7XHJcblx0XHRcdFx0XHRlbHNlIGlmIChQRi5oYXNPd25Qcm9wZXJ0eSh2YWwpKSBfYWRkUEYodmFsKTtcclxuXHRcdFx0XHRcdGVsc2UgaWYgKFBGLmhhc093blByb3BlcnR5KHRtcCA9IGBiZ18ke3ZhbH1gKSkgX2FkZFBGKHRtcCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBwcmV2O1xyXG5cdFx0XHR9LCBbXSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFRleHQgZm9ybWF0IGxvZyBhcmd1bWVudHNcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gZm9ybWF0cyAgVGV4dCBmb3JtYXQocylcclxuXHQgKiBAcGFyYW0gYXJncyAgRm9ybWF0IHZhbHVlc1xyXG5cdCAqIEByZXR1cm5zIGBJVGVybUZvcm1hdGBcclxuXHQgKi9cclxuXHRzdGF0aWMgZ2V0IGZvcm1hdCgpOiAoZm9ybWF0czogc3RyaW5nfHN0cmluZ1tdLCAuLi5hcmdzOiBhbnlbXSk9PklUZXJtRm9ybWF0IHtcclxuXHRcdHJldHVybiBmdW5jdGlvbih0aGlzOiBhbnksIGZvcm1hdHM6IHN0cmluZ3xzdHJpbmdbXSwgLi4uYXJnczogYW55W10pOiBJVGVybUZvcm1hdCB7XHJcblx0XHRcdFxyXG5cdFx0XHQvLy0tIGZuID0+IGZvcm1hdCBoZWxwZXJzXHJcblx0XHRcdGxldCB0bXA6IHN0cmluZztcclxuXHRcdFx0Y29uc3QgX2Zvcm1hdHM6IHN0cmluZ1tdID0gdGhpcy5nZXRGb3JtYXRzKGZvcm1hdHMpO1xyXG5cdFx0XHRjb25zdCBfZm9ybWF0ID0gKHZhbDogYW55KTogYW55ID0+IHtcclxuXHRcdFx0XHRpZiAodGhpcy5GT1JNQVRfRElTQUJMRUQgfHwgIWZvcm1hdHMubGVuZ3RoKSByZXR1cm4gdmFsO1xyXG5cdFx0XHRcdGlmICgnb2JqZWN0JyA9PT0gdHlwZW9mIHZhbCAmJiB2YWwpe1xyXG5cdFx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkodmFsKSkgcmV0dXJuIHZhbDtcclxuXHRcdFx0XHRcdGlmIChuZXcgUmVnRXhwKCdcXFxcW29iamVjdCBcXFxcdytcXFxcXFxdJykudGVzdCh0bXAgPSBfc3RyaW5nKHZhbCkpKSByZXR1cm4gdmFsO1xyXG5cdFx0XHRcdFx0ZWxzZSB2YWwgPSB0bXA7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmICghKCdzdHJpbmcnID09PSB0eXBlb2YgdmFsICYmIHZhbC5sZW5ndGgpKSByZXR1cm4gdmFsO1xyXG5cdFx0XHRcdHJldHVybiBfZm9ybWF0cy5yZWR1Y2U8c3RyaW5nPigodiwgZikgPT4gdGhpcy5GT1JNQVRTW2ZdICsgdiArIHRoaXMuRk9STUFUUy5yZXNldCwgdmFsKTtcclxuXHRcdFx0fTtcclxuXHRcdFx0Y29uc3QgdGhhdCA9IHRoaXMsIHZhbHVlczogYW55W10gPSBbXTtcclxuXHRcdFx0Zm9yIChjb25zdCB2YWwgb2YgKEFycmF5LmlzQXJyYXkoYXJncykgPyBhcmdzIDogW10pKSB2YWx1ZXMucHVzaChfZm9ybWF0KHZhbCkpO1xyXG5cdFx0XHRsZXQgbG9nX21ldGhvZDogYW55ID0gdGhhdC5MT0dfTUVUSE9EO1xyXG5cdFx0XHRjb25zdCBfbWV0aG9kID0gKG5hbWU6IGFueSk6ICdsb2cnfCdkZWJ1Zyd8J3dhcm4nfCdlcnJvcid8J2luZm8nID0+IHtcclxuXHRcdFx0XHRpZiAobG9nX21ldGhvZCkgcmV0dXJuIGxvZ19tZXRob2Q7XHJcblx0XHRcdFx0cmV0dXJuIHRoYXQuTE9HX01FVEhPRFMuaW5jbHVkZXMobmFtZSkgPyBuYW1lIDogJ2xvZyc7XHJcblx0XHRcdH07XHJcblx0XHRcdFxyXG5cdFx0XHQvLzw8IHJlc3VsdCAtICBJVGVybUZvcm1hdFxyXG5cdFx0XHRyZXR1cm4ge1xyXG5cclxuXHRcdFx0XHQvKipcclxuXHRcdFx0XHQgKiBTZXQgcHJlZmVycmVkIGxvZyBtZXRob2RcclxuXHRcdFx0XHQgKi9cclxuXHRcdFx0XHRtZXRob2QodmFsdWU6IHVuZGVmaW5lZHwnbG9nJ3wnZGVidWcnfCd3YXJuJ3wnZXJyb3InfCdpbmZvJyk6IElUZXJtRm9ybWF0IHtcclxuXHRcdFx0XHRcdGxvZ19tZXRob2QgPSB0aGF0LkxPR19NRVRIT0RTLmluY2x1ZGVzKHZhbHVlIGFzIGFueSkgPyB2YWx1ZSA6IHRoYXQuTE9HX01FVEhPRDtcclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdC8qKlxyXG5cdFx0XHRcdCAqIEFkZCBmb3JtYXR0ZWQgdmFsdWVzXHJcblx0XHRcdFx0ICogXHJcblx0XHRcdFx0ICogQHBhcmFtIGZvcm1hdHNcclxuXHRcdFx0XHQgKiBAcGFyYW0gYXJnc1xyXG5cdFx0XHRcdCAqL1xyXG5cdFx0XHRcdGZvcm1hdChmb3JtYXRzOiBzdHJpbmd8c3RyaW5nW10sIC4uLmFyZ3M6IGFueVtdKTogSVRlcm1Gb3JtYXQge1xyXG5cdFx0XHRcdFx0dmFsdWVzLnB1c2goLi4udGhhdC5mb3JtYXQoZm9ybWF0cywgLi4uYXJncykudmFsdWVzKCkpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0LyoqXHJcblx0XHRcdFx0ICogR2V0IGZvcm1hdHRlZCB2YWx1ZXNcclxuXHRcdFx0XHQgKiBcclxuXHRcdFx0XHQgKiBAcGFyYW0gYXJnc1xyXG5cdFx0XHRcdCAqL1xyXG5cdFx0XHRcdHZhbHVlcyguLi5hcmdzOiBhbnlbXSk6IGFueVtdIHtcclxuXHRcdFx0XHRcdGNvbnN0IGl0ZW1zOiBhbnlbXSA9IFtdO1xyXG5cdFx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoYXJncykgJiYgYXJncy5sZW5ndGgpe1xyXG5cdFx0XHRcdFx0XHRmb3IgKGNvbnN0IHZhbCBvZiBhcmdzKSBpdGVtcy5wdXNoKF9mb3JtYXQodmFsKSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gWy4uLnZhbHVlcywgLi4uaXRlbXNdO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdC8qKlxyXG5cdFx0XHRcdCAqIEdldCB2YWx1ZXMgd2l0aG91dCBmb3JtYXR0aW5nXHJcblx0XHRcdFx0ICogXHJcblx0XHRcdFx0ICogQHBhcmFtIGFyZ3NcclxuXHRcdFx0XHQgKi9cclxuXHRcdFx0XHRjbGVhbiguLi5hcmdzOiBhbnlbXSk6IGFueVtdIHtcclxuXHRcdFx0XHRcdHJldHVybiB0aGF0LmNsZWFuKC4uLlsuLi52YWx1ZXMsIC4uLmFyZ3NdKTtcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvKipcclxuXHRcdFx0XHQgKiBgY29uc29sZS5sb2dgIGZvcm1hdHRlZCB2YWx1ZXNcclxuXHRcdFx0XHQgKiBcclxuXHRcdFx0XHQgKiBAcGFyYW0gYXJncyBcclxuXHRcdFx0XHQgKi9cclxuXHRcdFx0XHRsb2coLi4uYXJnczogYW55W10pOiB2b2lkIHtcclxuXHRcdFx0XHRcdGNvbnN0IGl0ZW1zOiBhbnlbXSA9IFtdO1xyXG5cdFx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoYXJncykgJiYgYXJncy5sZW5ndGgpe1xyXG5cdFx0XHRcdFx0XHRmb3IgKGNvbnN0IHZhbCBvZiBhcmdzKSBpdGVtcy5wdXNoKF9mb3JtYXQodmFsKSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRjb25zb2xlW19tZXRob2QoJ2xvZycpXSguLi5bLi4udmFsdWVzLCAuLi5pdGVtc10pO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdC8qKlxyXG5cdFx0XHRcdCAqIGBjb25zb2xlLmRlYnVnYCBmb3JtYXR0ZWQgdmFsdWVzXHJcblx0XHRcdFx0ICogXHJcblx0XHRcdFx0ICogQHBhcmFtIGFyZ3MgXHJcblx0XHRcdFx0ICovXHJcblx0XHRcdFx0ZGVidWcoLi4uYXJnczogYW55W10pOiB2b2lkIHtcclxuXHRcdFx0XHRcdGNvbnN0IGl0ZW1zOiBhbnlbXSA9IFtdO1xyXG5cdFx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoYXJncykgJiYgYXJncy5sZW5ndGgpe1xyXG5cdFx0XHRcdFx0XHRmb3IgKGNvbnN0IHZhbCBvZiBhcmdzKSBpdGVtcy5wdXNoKF9mb3JtYXQodmFsKSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRjb25zb2xlW19tZXRob2QoJ2RlYnVnJyldKC4uLlsuLi52YWx1ZXMsIC4uLml0ZW1zXSk7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0LyoqXHJcblx0XHRcdFx0ICogYGNvbnNvbGUud2FybmAgZm9ybWF0dGVkIHZhbHVlc1xyXG5cdFx0XHRcdCAqIFxyXG5cdFx0XHRcdCAqIEBwYXJhbSBhcmdzIFxyXG5cdFx0XHRcdCAqL1xyXG5cdFx0XHRcdHdhcm4oLi4uYXJnczogYW55W10pOiB2b2lkIHtcclxuXHRcdFx0XHRcdGNvbnN0IGl0ZW1zOiBhbnlbXSA9IFtdO1xyXG5cdFx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoYXJncykgJiYgYXJncy5sZW5ndGgpe1xyXG5cdFx0XHRcdFx0XHRmb3IgKGNvbnN0IHZhbCBvZiBhcmdzKSBpdGVtcy5wdXNoKF9mb3JtYXQodmFsKSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRjb25zb2xlW19tZXRob2QoJ3dhcm4nKV0oLi4uWy4uLnZhbHVlcywgLi4uaXRlbXNdKTtcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvKipcclxuXHRcdFx0XHQgKiBgY29uc29sZS5lcnJvcmAgZm9ybWF0dGVkIHZhbHVlc1xyXG5cdFx0XHRcdCAqIFxyXG5cdFx0XHRcdCAqIEBwYXJhbSBhcmdzIFxyXG5cdFx0XHRcdCAqL1xyXG5cdFx0XHRcdGVycm9yKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcblx0XHRcdFx0XHRjb25zdCBpdGVtczogYW55W10gPSBbXTtcclxuXHRcdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KGFyZ3MpICYmIGFyZ3MubGVuZ3RoKXtcclxuXHRcdFx0XHRcdFx0Zm9yIChjb25zdCB2YWwgb2YgYXJncykgaXRlbXMucHVzaChfZm9ybWF0KHZhbCkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Y29uc29sZVtfbWV0aG9kKCdlcnJvcicpXSguLi5bLi4udmFsdWVzLCAuLi5pdGVtc10pO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdC8qKlxyXG5cdFx0XHRcdCAqIGBjb25zb2xlLmluZm9gIGZvcm1hdHRlZCB2YWx1ZXNcclxuXHRcdFx0XHQgKiBcclxuXHRcdFx0XHQgKiBAcGFyYW0gYXJncyBcclxuXHRcdFx0XHQgKi9cclxuXHRcdFx0XHRpbmZvKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcblx0XHRcdFx0XHRjb25zdCBpdGVtczogYW55W10gPSBbXTtcclxuXHRcdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KGFyZ3MpICYmIGFyZ3MubGVuZ3RoKXtcclxuXHRcdFx0XHRcdFx0Zm9yIChjb25zdCB2YWwgb2YgYXJncykgaXRlbXMucHVzaChfZm9ybWF0KHZhbCkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Y29uc29sZVtfbWV0aG9kKCdpbmZvJyldKC4uLlsuLi52YWx1ZXMsIC4uLml0ZW1zXSk7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0fTtcclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBDbGVhbiB0ZXh0IHZhbHVlIGZvcm1hdHRpbmdcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gYXJncyAgRm9ybWF0dGVkIHZhbHVlc1xyXG5cdCAqIEByZXR1cm5zIGBhbnlbXWAgQ2xlYXIgdmFsdWVzXHJcblx0ICovXHJcblx0c3RhdGljIGdldCBjbGVhbigpOiAoLi4uYXJnczogYW55W10pPT5hbnlbXSB7XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24odGhpczogYW55LCAuLi5hcmdzOiBhbnlbXSk6IGFueVtdIHtcclxuXHRcdFx0Y29uc3QgX2NsZWFuID0gKHZhbDogc3RyaW5nKTogc3RyaW5nID0+IE9iamVjdC52YWx1ZXModGhpcy5GT1JNQVRTKS5yZWR1Y2U8c3RyaW5nPigocCwgdik9PiBwLnJlcGxhY2UobmV3IFJlZ0V4cChTdHJpbmcodikucmVwbGFjZSgvXFx4MUIvLCAnXFxcXHgxQicpLnJlcGxhY2UoL1xcWy8sICdcXFxcWycpLCAnZycpLCAnJyksIHZhbCk7XHJcblx0XHRcdGNvbnN0IHZhbHVlczogYW55W10gPSBbXTtcclxuXHRcdFx0Zm9yIChjb25zdCB2YWwgb2YgYXJncykgdmFsdWVzLnB1c2goJ3N0cmluZycgPT09IHR5cGVvZiB2YWwgJiYgdmFsLnRyaW0oKS5sZW5ndGggPyBfY2xlYW4odmFsKSA6IHZhbCk7XHJcblx0XHRcdHJldHVybiB2YWx1ZXM7XHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0IGZvcm1hdHRlZCB0ZXh0XHJcblx0ICogXHJcblx0ICogQHBhcmFtIHZhbHVlICBUZXh0IHZhbHVlXHJcblx0ICogQHBhcmFtIGZvcm1hdHMgIFRleHQgZm9ybWF0KHMpXHJcblx0ICogQHJldHVybnMgYHN0cmluZ2AgRm9ybWF0dGVkXHJcblx0ICovXHJcblx0c3RhdGljIGdldCB0ZXh0KCk6ICh2YWx1ZTogc3RyaW5nLCBmb3JtYXRzPzogc3RyaW5nfHN0cmluZ1tdKSA9PiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKHRoaXM6IGFueSwgdmFsdWU6IHN0cmluZywgZm9ybWF0cz86IHN0cmluZ3xzdHJpbmdbXSk6IHN0cmluZyB7XHJcblx0XHRcdGNvbnN0IF92YWw6IHN0cmluZyA9IF9zdHJpbmcodmFsdWUpO1xyXG5cdFx0XHRjb25zdCBfZm9ybWF0czogc3RyaW5nW10gPSBbXSwgX2Zvcm1hdHNfbGlzdDogc3RyaW5nW10gPSAoQXJyYXkuaXNBcnJheShmb3JtYXRzKSA/IGZvcm1hdHMgOiAnc3RyaW5nJyA9PT0gdHlwZW9mIGZvcm1hdHMgPyBbZm9ybWF0c10gOiBbXSk7XHJcblx0XHRcdGZvciAoY29uc3QgdiBvZiBfZm9ybWF0c19saXN0KXtcclxuXHRcdFx0XHRpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB2ICYmICEhdi50cmltKCkpIF9mb3JtYXRzLnB1c2godik7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCEoX2Zvcm1hdHMubGVuZ3RoICYmIF92YWwudHJpbSgpLmxlbmd0aCkpIHJldHVybiBfdmFsO1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5mb3JtYXQoX2Zvcm1hdHMsIF92YWwpLnZhbHVlcygpWzBdO1xyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIExvZyBgY29uc29sZS5sb2dgIGZvcm1hdFxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBhcmdzXHJcblx0ICovXHJcblx0c3RhdGljIGxvZyguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xyXG5cdFx0dGhpcy5mb3JtYXQoJ2xvZycsIC4uLmFyZ3MpLmxvZygpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRGVidWcgYGNvbnNvbGUuZGVidWdgIGZvcm1hdFxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBhcmdzXHJcblx0ICovXHJcblx0c3RhdGljIGRlYnVnKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcblx0XHR0aGlzLmZvcm1hdCgnZGVidWcnLCAuLi5hcmdzKS5kZWJ1ZygpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRXJyb3IgYGNvbnNvbGUuZXJyb3JgIGZvcm1hdFxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBhcmdzXHJcblx0ICovXHJcblx0c3RhdGljIGVycm9yKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcblx0XHR0aGlzLmZvcm1hdCgnZXJyb3InLCAuLi5hcmdzKS5lcnJvcigpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogV2FybiBgY29uc29sZS53YXJuYCBmb3JtYXRcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gYXJnc1xyXG5cdCAqL1xyXG5cdHN0YXRpYyB3YXJuKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcblx0XHR0aGlzLmZvcm1hdCgnd2FybicsIC4uLmFyZ3MpLndhcm4oKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEluZm8gYGNvbnNvbGUuaW5mb2AgZm9ybWF0XHJcblx0ICogXHJcblx0ICogQHBhcmFtIGFyZ3NcclxuXHQgKi9cclxuXHRzdGF0aWMgaW5mbyguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xyXG5cdFx0dGhpcy5mb3JtYXQoJ2luZm8nLCAuLi5hcmdzKS5pbmZvKCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTdWNjZXNzIGBjb25zb2xlLmxvZ2AgZm9ybWF0XHJcblx0ICogXHJcblx0ICogQHBhcmFtIGFyZ3NcclxuXHQgKi9cclxuXHRzdGF0aWMgc3VjY2VzcyguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xyXG5cdFx0dGhpcy5mb3JtYXQoJ3N1Y2Nlc3MnLCAuLi5hcmdzKS5sb2coKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCB2YWx1ZSBsaXN0XHJcblx0ICogXHJcblx0ICogQHBhcmFtIHZhbHVlXHJcblx0ICogQHBhcmFtIF9lbnRyaWVzXHJcblx0ICovXHJcblx0c3RhdGljIGdldCBsaXN0KCk6ICh2YWx1ZTogYW55LCBfZW50cmllcz86IGJvb2xlYW4pID0+IFtsaXN0OiBhbnlbXSwgdHlwZTondmFsdWVzJ3wnZW50cmllcyddIHtcclxuXHRcdHJldHVybiBmdW5jdGlvbih2YWx1ZTogYW55LCBfZW50cmllczogYm9vbGVhbiA9IGZhbHNlKTogW2xpc3Q6IGFueVtdLCB0eXBlOid2YWx1ZXMnfCdlbnRyaWVzJ10ge1xyXG5cdFx0XHRsZXQgaXRlbXM6IGFueVtdID0gW3ZhbHVlID0gX2Nsb25lKHZhbHVlKV0sIHR5cGU6ICd2YWx1ZXMnfCdlbnRyaWVzJyA9ICd2YWx1ZXMnO1xyXG5cdFx0XHRpZiAoJ29iamVjdCcgPT09IHR5cGVvZiB2YWx1ZSAmJiB2YWx1ZSl7XHJcblx0XHRcdFx0aWYgKCEodHlwZSA9IHZhbHVlW1N5bWJvbC5pdGVyYXRvcl0/Lm5hbWUpKXtcclxuXHRcdFx0XHRcdHR5cGUgPSAndmFsdWVzJztcclxuXHRcdFx0XHRcdGl0ZW1zID0gW3ZhbHVlXTtcclxuXHRcdFx0XHRcdGlmIChfZW50cmllcyAmJiBfc3RyaW5nYWJsZSh2YWx1ZSkgPT09IGZhbHNlKXtcclxuXHRcdFx0XHRcdFx0bGV0IHRtcDogYW55ID0gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKHZhbHVlKSk7XHJcblx0XHRcdFx0XHRcdGxldCB0bXBfZW50cmllczogW2s6IGFueSwgdjogYW55XVtdID0gW107XHJcblx0XHRcdFx0XHRcdGlmICghKCdvYmplY3QnID09PSB0eXBlb2YgdG1wICYmIHRtcCAmJiAodG1wX2VudHJpZXMgPSBPYmplY3QuZW50cmllcyh0bXApKS5sZW5ndGgpKSB0bXBfZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKHZhbHVlKTtcclxuXHRcdFx0XHRcdFx0aWYgKHRtcF9lbnRyaWVzLmxlbmd0aCl7XHJcblx0XHRcdFx0XHRcdFx0dHlwZSA9ICdlbnRyaWVzJztcclxuXHRcdFx0XHRcdFx0XHRpdGVtcyA9IHRtcF9lbnRyaWVzO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYgKHR5cGUgPT09ICdlbnRyaWVzJykgaXRlbXMgPSBfZW50cmllcyA/IFsuLi52YWx1ZV0gOiBbdmFsdWVdO1xyXG5cdFx0XHRcdGVsc2UgaXRlbXMgPSBbLi4udmFsdWVdO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBbaXRlbXMsIHR5cGVdO1xyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEN1c3RvbSBgY29uc29sZS50YWJsZWAgbG9nZ2VyXHJcblx0ICogXHJcblx0ICogQHBhcmFtIGRhdGFcclxuXHQgKiBAcGFyYW0gY2VsbE1heExlbmd0aFxyXG5cdCAqL1xyXG5cdHN0YXRpYyBnZXQgdGFibGUoKTogKGRhdGE6IGFueSwgY2VsbE1heExlbmd0aD86IG51bWJlciwgZGl2aWRlcj86IGJvb2xlYW4pID0+IHZvaWQge1xyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKHRoaXM6IGFueSwgZGF0YTogYW55LCBjZWxsTWF4TGVuZ3RoOiBudW1iZXIgPSAyNDgsIGRpdmlkZXI6IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWQge1xyXG5cdFx0XHRcclxuXHRcdFx0Ly92YXJzXHJcblx0XHRcdGNvbnN0IHRoYXQgPSB0aGlzO1xyXG5cdFx0XHRjb25zdCBbZGF0YV9pdGVtcywgZGF0YV90eXBlXSA9IHRoYXQubGlzdChkYXRhLCAnb2JqZWN0JyA9PT0gdHlwZW9mIGRhdGEgJiYgZGF0YSAmJiAhX3N0cmluZ2FibGUoZGF0YSkpO1xyXG5cclxuXHRcdFx0Ly9mbiA9PiBzdHIgdmFsdWVcclxuXHRcdFx0Y29uc3Qgc3RyVmFsID0gKHZhbDogYW55KTogW192YWx1ZTogc3RyaW5nLCBfZm9ybWF0OiBzdHJpbmddID0+IHtcclxuXHRcdFx0XHRsZXQgY29sb3I6IHN0cmluZywgdG1wOiBhbnk7XHJcblx0XHRcdFx0aWYgKCFBcnJheS5pc0FycmF5KHZhbCkgJiYgKHRtcCA9IF9zdHJpbmdhYmxlKHZhbCkpICE9PSBmYWxzZSl7XHJcblx0XHRcdFx0XHRjb2xvciA9ICdncmVlbic7XHJcblx0XHRcdFx0XHRpZiAoJ251bWJlcicgPT09IHR5cGVvZiB2YWwpIGNvbG9yID0gJ3llbGxvdyc7XHJcblx0XHRcdFx0XHRlbHNlIGlmICh2YWwgPT09IHVuZGVmaW5lZCB8fCB2YWwgPT09IG51bGwpIGNvbG9yID0gJ2dyYXknO1xyXG5cdFx0XHRcdFx0ZWxzZSBpZiAodmFsID09PSB0cnVlKSBjb2xvciA9ICdjeWFuJztcclxuXHRcdFx0XHRcdGVsc2UgaWYgKHZhbCA9PT0gZmFsc2UpIGNvbG9yID0gJ3JlZCc7XHJcblx0XHRcdFx0XHRlbHNlIGlmICgvXlxcZHs0fS0oPzowWzEtOV18MVswLTJdKS0oPzpbMC0yXVsxLTldfFsxLTNdMHwzWzAxXSlUKD86WzAtMV1bMC05XXwyWzAtM10pKD86OlswLTZdXFxkKSg/OjpbMC02XVxcZCk/KD86XFwuXFxkezN9KT8oPzpbKy1dWzAtMl1cXGQ6WzAtNV1cXGR8Wik/JC8udGVzdCh0bXApKSBjb2xvciA9ICdtYWdlbnRhJzsgLy9tYXRjaCBJU08gdGltZXN0YW1wIChpLmUuIDIwMjMtMDYtMDlUMTg6MTg6NTcuMDcwWilcclxuXHRcdFx0XHRcdHZhbCA9IHRtcDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRpZiAoJ29iamVjdCcgPT09IHR5cGVvZiB2YWwgJiYgdmFsKXtcclxuXHRcdFx0XHRcdFx0Y29uc3QgX3R5cGUgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXTtcclxuXHRcdFx0XHRcdFx0aWYgKCEhX3R5cGUpe1xyXG5cdFx0XHRcdFx0XHRcdHZhbCA9IFsuLi52YWxdO1xyXG5cdFx0XHRcdFx0XHRcdGlmIChfdHlwZSA9PT0gJ2VudHJpZXMnKSB2YWwgPSBPYmplY3QuZnJvbUVudHJpZXModmFsKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRlbHNlIHZhbCA9IE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyh2YWwpKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHZhbCA9IF9qc29uU3RyaW5naWZ5KHZhbCk7XHJcblx0XHRcdFx0XHRjb2xvciA9ICdtYWdlbnRhJztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dmFsID0gdmFsLnJlcGxhY2UoL1xcdC9nLCAnICAnKTtcclxuXHRcdFx0XHRjb25zdCBfdmFsOiBzdHJpbmcgPSBfc3RyRXNjYXBlKHZhbCk7XHJcblx0XHRcdFx0cmV0dXJuIFtfdmFsLCBjb2xvcl07XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHQvL3RhYmxlIGl0ZW1zXHJcblx0XHRcdGxldCBtb2RlOiAndmFsdWVzJ3wnZW50cmllcycgPSB1bmRlZmluZWQgYXMgYW55O1xyXG5cdFx0XHRjb25zdCB0YWJsZV9pdGVtczogYW55W11bXSA9IFtdO1xyXG5cdFx0XHRpZiAoZGF0YV90eXBlID09PSAnZW50cmllcycpe1xyXG5cdFx0XHRcdHRhYmxlX2l0ZW1zLnB1c2goWycoaW5kZXgpJywgJ1ZhbHVlcyddKTtcclxuXHRcdFx0XHR0YWJsZV9pdGVtcy5wdXNoKC4uLmRhdGFfaXRlbXMpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdGxldCBtYXBfa2V5czogc3RyaW5nW10gPSBbXSwgbWFwX2l0ZW1zOiB7W2tleTogc3RyaW5nXTogYW55fVtdID0gW107XHJcblx0XHRcdFx0Zm9yIChsZXQgciA9IDA7IHIgPCBkYXRhX2l0ZW1zLmxlbmd0aDsgciArKyl7XHJcblx0XHRcdFx0XHRjb25zdCBkYXRhX2l0ZW0gPSBkYXRhX2l0ZW1zW3JdO1xyXG5cdFx0XHRcdFx0bGV0IFtsaXN0X2l0ZW1zLCBsaXN0X3R5cGVdID0gdGhhdC5saXN0KGRhdGFfaXRlbSwgIXIgfHwgbW9kZSA9PT0gJ2VudHJpZXMnKTtcclxuXHRcdFx0XHRcdGlmICghcikgbW9kZSA9IGxpc3RfdHlwZTtcclxuXHRcdFx0XHRcdGNvbnN0IG1hcF9pdGVtOiB7W2tleTogc3RyaW5nXTogYW55fSA9IHt9O1xyXG5cdFx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0X2l0ZW1zLmxlbmd0aDsgaSArKyl7XHJcblx0XHRcdFx0XHRcdGNvbnN0IGl0ZW0gPSBsaXN0X2l0ZW1zW2ldO1xyXG5cdFx0XHRcdFx0XHRsZXQgazogc3RyaW5nLCB2OiBhbnk7XHJcblx0XHRcdFx0XHRcdGlmIChsaXN0X3R5cGUgPT09ICdlbnRyaWVzJyl7XHJcblx0XHRcdFx0XHRcdFx0ayA9IF9zdHIoaXRlbVswXSwgdHJ1ZSwgdHJ1ZSk7XHJcblx0XHRcdFx0XHRcdFx0diA9IGl0ZW1bMV07XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0ayA9IGAke2l9YDtcclxuXHRcdFx0XHRcdFx0XHR2ID0gaXRlbTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZiAoIW1hcF9rZXlzLmluY2x1ZGVzKGspKSBtYXBfa2V5cy5wdXNoKGspO1xyXG5cdFx0XHRcdFx0XHRtYXBfaXRlbVtrXSA9IHY7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRtYXBfaXRlbXMucHVzaChtYXBfaXRlbSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHRhYmxlX2l0ZW1zLnB1c2goWycoaW5kZXgpJywgLi4ubWFwX2tleXNdKTtcclxuXHRcdFx0XHRmb3IgKGxldCByID0gMDsgciA8IG1hcF9pdGVtcy5sZW5ndGg7IHIgKyspe1xyXG5cdFx0XHRcdFx0Y29uc3QgdGFibGVfaXRlbTogYW55W10gPSBbXSwgbWFwX2l0ZW0gPSBtYXBfaXRlbXNbcl07XHJcblx0XHRcdFx0XHRmb3IgKGNvbnN0IGtleSBvZiBtYXBfa2V5cykgdGFibGVfaXRlbS5wdXNoKG1hcF9pdGVtW2tleV0pO1xyXG5cdFx0XHRcdFx0dGFibGVfaXRlbXMucHVzaChbciwgLi4udGFibGVfaXRlbV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly93aWR0aFxyXG5cdFx0XHRjb25zdCB3aWR0aF9tYXA6IHtba2V5OiBudW1iZXJdOiBudW1iZXJ9ID0ge307XHJcblx0XHRcdGNvbnN0IHN0cl9pdGVtczogW192YWx1ZTogc3RyaW5nLCBfZm9ybWF0OiBzdHJpbmddW11bXSA9IFtdO1xyXG5cdFx0XHRmb3IgKGNvbnN0IHRhYmxlX2l0ZW0gb2YgdGFibGVfaXRlbXMpe1xyXG5cdFx0XHRcdGNvbnN0IHN0cl9pdGVtOiBbX3ZhbHVlOiBzdHJpbmcsIF9mb3JtYXQ6IHN0cmluZ11bXSA9IFtdO1xyXG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGFibGVfaXRlbS5sZW5ndGg7IGkgKyspe1xyXG5cdFx0XHRcdFx0Y29uc3QgdmFsID0gdGFibGVfaXRlbVtpXTtcclxuXHRcdFx0XHRcdGNvbnN0IFtfdmFsdWUsIF9mb3JtYXRdID0gc3RyVmFsKHZhbCk7XHJcblx0XHRcdFx0XHRpZiAoIXdpZHRoX21hcC5oYXNPd25Qcm9wZXJ0eShpKSkgd2lkdGhfbWFwW2ldID0gMDtcclxuXHRcdFx0XHRcdGxldCBsZW4gPSBfdmFsdWUubGVuZ3RoO1xyXG5cdFx0XHRcdFx0aWYgKGxlbiA+IGNlbGxNYXhMZW5ndGgpIGxlbiA9IGNlbGxNYXhMZW5ndGg7IC8vY2VsbE1heExlbmd0aCBsaW1pdFxyXG5cdFx0XHRcdFx0aWYgKGxlbiA+IHdpZHRoX21hcFtpXSkgd2lkdGhfbWFwW2ldID0gbGVuO1xyXG5cdFx0XHRcdFx0c3RyX2l0ZW0ucHVzaChbX3ZhbHVlLCBfZm9ybWF0XSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHN0cl9pdGVtcy5wdXNoKHN0cl9pdGVtKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly9yb3dzXHJcblx0XHRcdGNvbnN0IHJvd3NfbGVuOiBudW1iZXIgPSBzdHJfaXRlbXMubGVuZ3RoO1xyXG5cdFx0XHRmb3IgKGxldCByID0gMDsgciA8IHN0cl9pdGVtcy5sZW5ndGg7IHIgKyspe1xyXG5cdFx0XHRcdGNvbnN0IHN0cl9pdGVtID0gc3RyX2l0ZW1zW3JdO1xyXG5cdFx0XHRcdGxldCBtYXhfbGluZXM6IG51bWJlciA9IDA7XHJcblx0XHRcdFx0bGV0IHN0cl9pdGVtX2xpbmVzOiBzdHJpbmdbXVtdID0gW107XHJcblx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzdHJfaXRlbS5sZW5ndGg7IGkgKyspe1xyXG5cdFx0XHRcdFx0bGV0IFtfdmFsdWUsIF9mb3JtYXRdID0gc3RyX2l0ZW1baV07XHJcblx0XHRcdFx0XHRpZiAoIWkgfHwgIXIpIF9mb3JtYXQgPSAoIWkgJiYgciAmJiBtb2RlID09PSAndmFsdWVzJykgPyAnZ3JheScgOiAnd2hpdGUnO1xyXG5cdFx0XHRcdFx0Y29uc3Qgd2lkdGg6IG51bWJlciA9IHdpZHRoX21hcFtpXTtcclxuXHRcdFx0XHRcdGNvbnN0IGxpbmVzOiBzdHJpbmdbXSA9IFtdO1xyXG5cdFx0XHRcdFx0aWYgKF92YWx1ZS5sZW5ndGggPiB3aWR0aCl7XHJcblx0XHRcdFx0XHRcdHdoaWxlIChfdmFsdWUubGVuZ3RoID4gd2lkdGgpIHtcclxuXHRcdFx0XHRcdFx0XHRjb25zdCBsaW5lID0gX3ZhbHVlLnN1YnN0cmluZygwLCB3aWR0aCkucGFkRW5kKHdpZHRoKTtcclxuXHRcdFx0XHRcdFx0XHRfdmFsdWUgPSBfdmFsdWUuc2xpY2Uod2lkdGgpO1xyXG5cdFx0XHRcdFx0XHRcdGxpbmVzLnB1c2godGhhdC50ZXh0KGxpbmUsIF9mb3JtYXQpKTsgLy9mb3JtYXRcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZiAoX3ZhbHVlLmxlbmd0aCkgbGluZXMucHVzaCh0aGF0LnRleHQoX3ZhbHVlLnBhZEVuZCh3aWR0aCksIF9mb3JtYXQpKTsgLy9mb3JtYXRcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2UgbGluZXMucHVzaCh0aGF0LnRleHQoX3ZhbHVlLnBhZEVuZCh3aWR0aCksIF9mb3JtYXQpKTsgLy9mb3JtYXRcclxuXHRcdFx0XHRcdHN0cl9pdGVtX2xpbmVzLnB1c2gobGluZXMpO1xyXG5cdFx0XHRcdFx0aWYgKG1heF9saW5lcyA8IGxpbmVzLmxlbmd0aCkgbWF4X2xpbmVzID0gbGluZXMubGVuZ3RoO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRjb25zdCBtYXhfc3RyX2l0ZW1fbGluZXM6IHN0cmluZ1tdW10gPSBbXTtcclxuXHRcdFx0XHRmb3IgKGxldCBjID0gMDsgYyA8IHN0cl9pdGVtX2xpbmVzLmxlbmd0aDsgYyArKyl7XHJcblx0XHRcdFx0XHRjb25zdCBsaW5lcyA9IHN0cl9pdGVtX2xpbmVzW2NdO1xyXG5cdFx0XHRcdFx0Y29uc3Qgd2lkdGg6IG51bWJlciA9IHdpZHRoX21hcFtjXTtcclxuXHRcdFx0XHRcdGNvbnN0IHN0cl9tYXhfbGluZXM6IHN0cmluZ1tdID0gW107XHJcblx0XHRcdFx0XHRjb25zdCBtYXhfbGluZXNfYXJyYXk6IGFueVtdID0gWy4uLkFycmF5KG1heF9saW5lcyldO1xyXG5cdFx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBtYXhfbGluZXNfYXJyYXkubGVuZ3RoOyBpICsrKSBzdHJfbWF4X2xpbmVzLnB1c2goaSA8IGxpbmVzLmxlbmd0aCA/IGxpbmVzW2ldIDogJycucGFkRW5kKHdpZHRoKSk7XHJcblx0XHRcdFx0XHRtYXhfc3RyX2l0ZW1fbGluZXMucHVzaChzdHJfbWF4X2xpbmVzKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0c3RyX2l0ZW1fbGluZXMgPSBtYXhfc3RyX2l0ZW1fbGluZXM7XHJcblx0XHRcdFx0Y29uc3QgbGluZV9yb3dzOnN0cmluZ1tdW10gPSBbXTtcclxuXHRcdFx0XHRmb3IgKGNvbnN0IF8gb2YgWy4uLkFycmF5KG1heF9saW5lcyldKSBsaW5lX3Jvd3MucHVzaChbXSk7XHJcblx0XHRcdFx0Zm9yIChsZXQgYyA9IDA7IGMgPCBzdHJfaXRlbV9saW5lcy5sZW5ndGg7IGMgKyspe1xyXG5cdFx0XHRcdFx0Y29uc3QgbGluZXMgPSBzdHJfaXRlbV9saW5lc1tjXTtcclxuXHRcdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpICsrKXtcclxuXHRcdFx0XHRcdFx0bGluZV9yb3dzW2ldW2NdID0gbGluZXNbaV1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Y29uc3Qgcm93czogc3RyaW5nW10gPSBbXTtcclxuXHRcdFx0XHRjb25zdCBsZW4gPSBsaW5lX3Jvd3MubGVuZ3RoO1xyXG5cdFx0XHRcdGZvciAobGV0IG4gPSAwOyBuIDwgbGluZV9yb3dzLmxlbmd0aDsgbiArKyl7XHJcblx0XHRcdFx0XHRjb25zdCBsaW5lX3JvdyA9IGxpbmVfcm93c1tuXTtcclxuXHRcdFx0XHRcdGlmICghbiAmJiAhcil7XHJcblx0XHRcdFx0XHRcdGxldCBib3JkZXJfdG9wOiBzdHJpbmcgPSAn4pSM4pSAJztcclxuXHRcdFx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lX3Jvdy5sZW5ndGg7IGkgKyspIGJvcmRlcl90b3AgKz0gKGkgPyAn4pSA4pSs4pSAJyA6ICcnKSArICcnLnBhZEVuZCh3aWR0aF9tYXBbaV0sICfilIAnKTtcclxuXHRcdFx0XHRcdFx0Ym9yZGVyX3RvcCArPSAn4pSA4pSQJztcclxuXHRcdFx0XHRcdFx0cm93cy5wdXNoKGJvcmRlcl90b3ApOyAvL2JvcmRlciB0b3BcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJvd3MucHVzaCgn4pSCICcgKyBsaW5lX3Jvdy5qb2luKCcg4pSCICcpICsgJyDilIInKTsgLy9ib3JkZXIgbGVmdCAmIHJpZ2h0XHJcblx0XHRcdFx0XHRpZiAoKCFyIHx8IGRpdmlkZXIpICYmIG4gKyAxID09PSBsZW4gJiYgciArIDEgPCByb3dzX2xlbil7XHJcblx0XHRcdFx0XHRcdGxldCBib3JkZXJfbWlkOiBzdHJpbmcgPSAn4pSc4pSAJztcclxuXHRcdFx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lX3Jvdy5sZW5ndGg7IGkgKyspIGJvcmRlcl9taWQgKz0gKGkgPyAn4pSA4pS84pSAJyA6ICcnKSArICcnLnBhZEVuZCh3aWR0aF9tYXBbaV0sICfilIAnKTtcclxuXHRcdFx0XHRcdFx0Ym9yZGVyX21pZCArPSAn4pSA4pSkJztcclxuXHRcdFx0XHRcdFx0cm93cy5wdXNoKGJvcmRlcl9taWQpOyAvL2JvcmRlciBtaWRcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmIChuICsgMSA9PT0gbGVuICYmIHIgKyAxID09PSByb3dzX2xlbil7XHJcblx0XHRcdFx0XHRcdGxldCBib3JkZXJfYm90dG9tOiBzdHJpbmcgPSAn4pSU4pSAJztcclxuXHRcdFx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lX3Jvdy5sZW5ndGg7IGkgKyspIGJvcmRlcl9ib3R0b20gKz0gKGkgPyAn4pSA4pS04pSAJyA6ICcnKSArICcnLnBhZEVuZCh3aWR0aF9tYXBbaV0sICfilIAnKTtcclxuXHRcdFx0XHRcdFx0Ym9yZGVyX2JvdHRvbSArPSAn4pSA4pSYJztcclxuXHRcdFx0XHRcdFx0cm93cy5wdXNoKGJvcmRlcl9ib3R0b20pOyAvL2JvcmRlciBib3R0b21cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Y29uc29sZS5sb2cocm93cy5qb2luKCdcXG4nKSk7IC8vPDwgcHJpbnQgdGFibGVcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENvbnNvbGUgY2xlYXIgbG9nc1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBnZXQgY2xlYXIoKTogKCkgPT4gdm9pZCB7XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24oKTogdm9pZCB7XHJcblx0XHRcdGNvbnNvbGUubG9nKCdcXHgxQmMnKTtcclxuXHRcdFx0Y29uc29sZS5jbGVhcigpO1xyXG5cdFx0fTtcclxuXHR9XHJcbn0iLCJleHBvcnQgKiBmcm9tICcuL19UZXJtJzsiLCJpbXBvcnQgeyBfc3RyIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5cclxuLyoqXHJcbiAqIEZpbGUgZXh0ZW5zaW9uIG1pbWUgdHlwZXNcclxuICovXHJcbmV4cG9ydCBjb25zdCBFWFRfTUlNRVM6IHtbZXh0OiBzdHJpbmddOiBzdHJpbmd9ID0gcmVxdWlyZSgnLi9fX21pbWVzLmpzb24nKTtcclxuXHJcbi8qKlxyXG4gKiBNaW1lIHR5cGUgb2JqZWN0IGludGVyZmFjZSBcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSU1pbWVUeXBlIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiAtIHBhcnNlIHZhbHVlXHJcblx0ICovXHJcblx0dmFsdWU6IGFueTtcclxuXHJcblx0LyoqXHJcblx0ICogLSBtaW1lIHR5cGUgKGUuZy4gYCdpbWFnZS9wbmcnYClcclxuXHQgKi9cclxuXHR0eXBlOiBzdHJpbmc7XHJcblxyXG5cdC8qKlxyXG5cdCAqIC0gZmlsZSBleHRlbnNpb24gKGUuZy4gYCdwbmcnYClcclxuXHQgKi9cclxuXHRleHQ6IHN0cmluZztcclxuXHJcblx0LyoqXHJcblx0ICogLSBwYXJzZSBlcnJvciB0ZXh0XHJcblx0ICovXHJcblx0ZXJyb3I6IHN0cmluZztcclxuXHJcblx0LyoqXHJcblx0ICogLSBnZXQgYHN0cmluZ2AgY2FzdFxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBwcm9wIC0gZ2V0IHByb3BlcnR5IChkZWZhdWx0OiBgJ3R5cGUnYClcclxuXHQgKiBAcmV0dXJucyBgc3RyaW5nYFxyXG5cdCAqL1xyXG5cdHRvU3RyaW5nOiAoXHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogLSBnZXQgcHJvcGVydHkgKGRlZmF1bHQgYCd0eXBlJ2ApXHJcblx0XHQgKi9cclxuXHRcdHByb3A/OiAndHlwZSd8J2V4dCd8J2Vycm9yJ1xyXG5cdCk9PnN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEJhc2VuYW1lIGVycm9yIGludGVyZmFjZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJTWltZVR5cGVFcnJvciBleHRlbmRzIEVycm9yIHtcclxuXHRuYW1lOiBzdHJpbmc7XHJcblx0aXRlbTogSU1pbWVUeXBlO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IG5vcm1hbGl6ZWQgZmlsZSBtaW1lIHR5cGUgKGkuZS4gJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnID0+ICdhcHBsaWNhdGlvbi9qc29uJylcclxuICogXHJcbiAqIEBwYXJhbSAgc3RyaW5nXHQkdmFsdWVcdC0gUGFyc2UgdmFsdWUgKG1pbWV8ZXh0fGZpbGUtcGF0aClcclxuICogQHBhcmFtICBzdHJpbmdcdCRleHRcdFx0LSBCeVJlZiBmaWxlIGV4dGVuc2lvbiAoaS5lLiAndHh0JywgJ3BuZycpXHJcbiAqIEBwYXJhbSAgc3RyaW5nXHQkZXJyb3JcdC0gQnlSZWYgZXJyb3IgbWVzc2FnZVxyXG4gKiBAcmV0dXJuIHN0cmluZ3xmYWxzZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9taW1lID0gKHZhbHVlOiBhbnksIF9mYWlsdXJlOiAwfDF8MiA9IDApOiBJTWltZVR5cGUgPT4ge1xyXG5cdGNvbnN0IGZhaWx1cmU6IDB8MXwyID0gWzAsIDEsIDJdLmluY2x1ZGVzKF9mYWlsdXJlID0gcGFyc2VJbnQoX2ZhaWx1cmUgKyAnJykgYXMgYW55KSA/IF9mYWlsdXJlIGFzICgwfDF8MikgOiAwO1xyXG5cclxuXHQvL21pbWUgdHlwZSBpdGVtXHJcblx0Y29uc3QgaXRlbTogSU1pbWVUeXBlID0ge1xyXG5cdFx0dmFsdWUsXHJcblx0XHR0eXBlOiAnJyxcclxuXHRcdGV4dDogJycsXHJcblx0XHRlcnJvcjogJycsXHJcblx0XHR0b1N0cmluZyhwcm9wPzogJ3R5cGUnfCdleHQnfCdlcnJvcicpOiBzdHJpbmcge1xyXG5cdFx0XHRjb25zdCBrZXk6IHN0cmluZyA9IHByb3AgJiYgWydtaW1lJywgJ2V4dCcsICdlcnJvciddXHJcblx0XHRcdC5pbmNsdWRlcyhwcm9wID0gX3N0cihwcm9wLCB0cnVlKS50b0xvd2VyQ2FzZSgpIGFzIGFueSkgPyBwcm9wICsgJycgOiAndHlwZSc7XHJcblx0XHRcdHJldHVybiB0aGlzW2tleSBhcyAndHlwZSd8J2V4dCd8J2Vycm9yJ107XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdC8vcGFyc2UgdmFsdWVcclxuXHR0cnkge1xyXG5cdFx0Y29uc3QgZXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xyXG5cdFx0Y29uc3QgdmFsOiBzdHJpbmcgPSBfc3RyKHZhbHVlLCB0cnVlKTtcclxuXHRcdGlmICh2YWwpe1xyXG5cdFx0XHRsZXQgbTogUmVnRXhwTWF0Y2hBcnJheXxudWxsID0gbnVsbDtcclxuXHRcdFx0aWYgKG0gPSB2YWwubWF0Y2goLyhcXC58XikoWy1fMC05YS16QS1aXSspJC9pKSl7IC8vZXh0XHJcblx0XHRcdFx0bGV0IGV4dCA9IG1bMl0udG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0XHRpZiAoZXh0ID09PSAnanBlZycpIGV4dCA9ICdqcGcnO1xyXG5cdFx0XHRcdGlmIChFWFRfTUlNRVMuaGFzT3duUHJvcGVydHkoZXh0KSkgaXRlbS50eXBlID0gRVhUX01JTUVTW2l0ZW0uZXh0ID0gZXh0XTtcclxuXHRcdFx0XHRlbHNlIGVycm9ycy5wdXNoKGBNaW1lIGZpbGUgZXh0ZW5zaW9uIFwiJHtleHR9XCIgaXMgbm90IHN1cHBvcnRlZGApO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYgKC9eWy1fYS16MC05XStcXC9bXlxcL10rJC9pLnRlc3QodmFsKSl7IC8vbWltZVxyXG5cdFx0XHRcdGNvbnN0IGZvdW5kOiBbZXh0OiBzdHJpbmcsIHR5cGU6IHN0cmluZ118dW5kZWZpbmVkID0gT2JqZWN0LmVudHJpZXMoRVhUX01JTUVTKS5maW5kKHYgPT4gdlsxXS5zdGFydHNXaXRoKHZhbC50b0xvd2VyQ2FzZSgpKSB8fCB2YWwudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKHZbMV0pKTtcclxuXHRcdFx0XHRpZiAoZm91bmQpe1xyXG5cdFx0XHRcdFx0bGV0IFtleHQsIHR5cGVdID0gZm91bmQ7XHJcblx0XHRcdFx0XHRpZiAoZXh0ID09PSAnanBlZycpIGV4dCA9ICdqcGcnO1xyXG5cdFx0XHRcdFx0aXRlbS5leHQgPSBleHQ7XHJcblx0XHRcdFx0XHRpdGVtLnR5cGUgPSB0eXBlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGVycm9ycy5wdXNoKGBNaW1lIHR5cGUgXCIke3ZhbH1cIiBpcyBub3Qgc3VwcG9ydGVkYCk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBlcnJvcnMucHVzaChgSW52YWxpZCBtaW1lIHR5cGUgb3IgZmlsZSBleHRlbnNpb24gc3RyaW5nIHZhbHVlYCk7XHJcblx0XHR9XHJcblx0XHRlbHNlIGVycm9ycy5wdXNoKCdCbGFuayBtaW1lIHR5cGUgb3IgZmlsZSBleHRlbnNpb24gc3RyaW5nIHZhbHVlJyk7XHJcblx0XHRpZiAoZXJyb3JzLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKGl0ZW0uZXJyb3IgPSBlcnJvcnMuam9pbignOyAnKSArICcuJyk7IC8vZXJyb3IgLSBzZXQsIHRocm93XHJcblx0XHRyZXR1cm4gaXRlbTsgLy9yZXN1bHRcclxuXHR9XHJcblx0Y2F0Y2ggKGU6IGFueSl7XHJcblx0XHRpZiAoZmFpbHVyZSl7IC8vZmFpbHVyZSAtIGN1c3RvbSBlcnJvclxyXG5cdFx0XHRjbGFzcyBNaW1lVHlwZUVycm9yIGV4dGVuZHMgRXJyb3IgaW1wbGVtZW50cyBJTWltZVR5cGVFcnJvciB7XHJcblx0XHRcdFx0bmFtZTogc3RyaW5nID0gJ01pbWVUeXBlRXJyb3InO1xyXG5cdFx0XHRcdGl0ZW06IElNaW1lVHlwZSA9IGl0ZW07XHJcblx0XHRcdH1cclxuXHRcdFx0Y29uc3QgZXJyb3IgPSBuZXcgTWltZVR5cGVFcnJvcihgJHtlLm1lc3NhZ2UgfHwgZX1gKTtcclxuXHRcdFx0aWYgKGZhaWx1cmUgPT09IDIpIHRocm93IGVycm9yOyAvL3Rocm93XHJcblx0XHRcdGVsc2UgY29uc29sZS53YXJuKGVycm9yICsgJycsIHtpdGVtfSk7IC8vd2FyblxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGl0ZW07IC8vcmVzdWx0XHJcblx0fVxyXG59IiwiaW1wb3J0IHsgX2pzb25TdHJpbmdpZnksIF9zcGxpdCwgX3N0ciB9IGZyb20gJy4uL3V0aWxzJztcclxuXHJcbi8qKlxyXG4gKiBCYXNlbmFtZSAoc3RyaW5nYWJsZSkgb2JqZWN0IGludGVyZmFjZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJQmFzZW5hbWUge1xyXG5cdHZhbHVlOiBhbnk7XHJcblx0YmFzZW5hbWU6IHN0cmluZztcclxuXHRuYW1lOiBzdHJpbmc7XHJcblx0ZXh0OiBzdHJpbmc7XHJcblx0ZXJyb3I6IHN0cmluZztcclxuXHRpbGxlZ2FsOiBzdHJpbmdbXTtcclxuXHRpbnZhbGlkOiBzdHJpbmdbXTtcclxuXHRcclxuXHQvKipcclxuXHQgKiBHZXQgYmFzZW5hbWUgdGV4dFxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBwcm9wIC0gdGV4dCB2YWx1ZSBwcm9wXHJcblx0ICogQHJldHVybnMgYHN0cmluZ2BcclxuXHQgKi9cclxuXHR0b1N0cmluZzogKFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIFNwZWNpZnkgdGV4dCB2YWx1ZSBwcm9wIChkZWZhdWx0IGAnYmFzZW5hbWUnYClcclxuXHRcdCAqL1xyXG5cdFx0cHJvcD86ICdiYXNlbmFtZSd8J25hbWUnfCdleHQnfCdlcnJvcidcclxuXHQpPT5zdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBCYXNlbmFtZSBlcnJvciBpbnRlcmZhY2VcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUJhc2VuYW1lRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcblx0bmFtZTogc3RyaW5nO1xyXG5cdGl0ZW06IElCYXNlbmFtZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB2YWxpZGF0ZWQgYmFzZW5hbWUgZnJvbSBmaWxlIHBhdGggdmFsdWVcclxuICogXHJcbiAqIC0gc3BsaXRzIHBhdGggc2VwYXJhdG9ycyBgW1xcXFwvXWAgdXNlcyBsYXN0IGVudHJ5XHJcbiAqIC0gdHJpbXMgc3BhY2VzLCBpbnZhbGlkYXRlcyBlbXB0eVxyXG4gKiAtIGludmFsaWRhdGVzIGlsbGVnYWwgY2hhcmFjdGVycyAoaS5lLiBgOj9cIjw+fCpgKVxyXG4gKiAtIGludmFsaWRhdGVzIGludmFsaWQgbmFtZXMgKGkuZS4gYCcuLi4nLCAnbmFtZS4nLCAnbmFtZS4uLidgKVxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlIC0gcGFyc2UgcGF0aCB2YWx1ZVxyXG4gKiBAcGFyYW0gZG90cyAtIGFsbG93IGRvdCBuYXYgfiBgJy4nIHwgJy4uJ2AgKGRlZmF1bHQ6IGBmYWxzZWApXHJcbiAqIEBwYXJhbSBfc3RyaWN0IC0gc3RyaWN0IHBhcnNpbmcgfiByZXR1cm5zIGJsYW5rIChgJydgKSB2YWx1ZXMgb24gZXJyb3JcclxuICogQHBhcmFtIF9mYWlsdXJlIC0gZXJyb3IgaGFuZGxpbmcgfiBgMGAgPSBpZ25vcmUsICcxJyA9IHdhcm4sIGAyYCA9IHRocm93IGVycm9yIChkZWZhdWx0IGAwYClcclxuICogQHJldHVybnMgYElCYXNlbmFtZWAgYmFzZW5hbWUgKHN0cmluZ2FibGUpXHJcbiAqIEB0aHJvd3MgYElCYXNlbmFtZUVycm9yYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9iYXNlbmFtZSA9ICh2YWx1ZTogYW55LCBkb3RzOiBib29sZWFuID0gZmFsc2UsIF9zdHJpY3Q6IGJvb2xlYW4gPSBmYWxzZSwgX2ZhaWx1cmU/OiAwfDF8Mik6IElCYXNlbmFtZSA9PiB7XHJcblx0Y29uc3QgZmFpbHVyZTogMHwxfDIgPSBbMCwgMSwgMl0uaW5jbHVkZXMoX2ZhaWx1cmUgPSBwYXJzZUludChfZmFpbHVyZSArICcnKSBhcyBhbnkpID8gX2ZhaWx1cmUgYXMgKDB8MXwyKSA6IDA7XHJcblxyXG5cdC8vYmFzZW5hbWUgaXRlbVxyXG5cdGNvbnN0IGl0ZW06IElCYXNlbmFtZSA9IHtcclxuXHRcdHZhbHVlLFxyXG5cdFx0YmFzZW5hbWU6ICcnLFxyXG5cdFx0bmFtZTogJycsXHJcblx0XHRleHQ6ICcnLFxyXG5cdFx0ZXJyb3I6ICcnLFxyXG5cdFx0aWxsZWdhbDogW10sXHJcblx0XHRpbnZhbGlkOiBbXSxcclxuXHRcdHRvU3RyaW5nKHByb3A/OiAnYmFzZW5hbWUnfCduYW1lJ3wnZXh0J3wnZXJyb3InKTogc3RyaW5nIHtcclxuXHRcdFx0Y29uc3Qga2V5OiBzdHJpbmcgPSBwcm9wICYmIFsnYmFzZW5hbWUnLCAnbmFtZScsICdleHQnLCAnZXJyb3InXVxyXG5cdFx0XHQuaW5jbHVkZXMocHJvcCA9IF9zdHIocHJvcCwgdHJ1ZSkudG9Mb3dlckNhc2UoKSBhcyBhbnkpID8gcHJvcCArICcnIDogJ2Jhc2VuYW1lJztcclxuXHRcdFx0cmV0dXJuIHRoaXNba2V5IGFzICdiYXNlbmFtZSd8J25hbWUnfCdleHQnfCdlcnJvciddO1xyXG5cdFx0fSxcclxuXHR9O1xyXG5cclxuXHQvL3BhcnNlIHZhbHVlXHJcblx0bGV0IG06IFJlZ0V4cE1hdGNoQXJyYXl8bnVsbCA9IG51bGw7XHJcblx0Y29uc3QgdmFsID0gaXRlbS5uYW1lID0gaXRlbS5iYXNlbmFtZSA9IF9zdHIoX3N0cih2YWx1ZSwgdHJ1ZSkuc3BsaXQoL1tcXFxcXFwvXS9nKS5wb3AoKSwgdHJ1ZSk7XHJcblx0aWYgKG0gPSB2YWwubWF0Y2goLyhbXlxcXFwvXSopJC9pKSl7XHJcblx0XHRpdGVtLm5hbWUgPSBtWzFdO1xyXG5cdFx0aWYgKG0gPSBpdGVtLm5hbWUubWF0Y2goLyguKikoXFwuKFstXzAtOWEtekEtWl0rKSkkL2kpKXtcclxuXHRcdFx0aXRlbS5uYW1lID0gbVsxXTtcclxuXHRcdFx0aXRlbS5leHQgPSBtWzNdO1xyXG5cdFx0fVxyXG5cdH1cclxuXHR0cnkge1xyXG5cdFx0Y29uc3QgZXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xyXG5cdFx0aWYgKCF2YWwpIGVycm9ycy5wdXNoKCdUaGUgYmFzZW5hbWUgc3RyaW5nIHZhbHVlIGlzIGVtcHR5Jyk7XHJcblx0XHRlbHNlIHtcclxuXHJcblx0XHRcdC8vZG90c1xyXG5cdFx0XHRpZiAoIWRvdHMgJiYgWycuLicsICcuLiddLmluY2x1ZGVzKHZhbCkpe1xyXG5cdFx0XHRcdGl0ZW0uaW52YWxpZC5wdXNoKHZhbCk7XHJcblx0XHRcdFx0ZXJyb3JzLnB1c2goYFRoZSBiYXNlbmFtZSBcIiR7dmFsfVwiIGRvdHMgbm90IGFsbG93ZWRgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly9pbnZhbGlkXHJcblx0XHRcdGlmICgvXlxcLlxcLltcXC5dKyQvLnRlc3QodmFsKSB8fCAvW15cXC5dW1xcLl0rJC8udGVzdCh2YWwpKXtcclxuXHRcdFx0XHRpZiAoIWl0ZW0uaW52YWxpZC5sZW5ndGgpIGl0ZW0uaW52YWxpZC5wdXNoKHZhbCk7XHJcblx0XHRcdFx0ZXJyb3JzLnB1c2goYFRoZSBiYXNlbmFtZSBcIiR7dmFsfVwiIGZvcm1hdCBpcyBpbnZhbGlkYCk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdC8vaWxsZWdhbFxyXG5cdFx0XHRpZiAobSA9IHZhbC5tYXRjaCgvW1xcOlxcP1xcXCJcXDxcXD5cXHxcXCpdL2cpKXtcclxuXHRcdFx0XHRpdGVtLmlsbGVnYWwucHVzaCguLi5tKTtcclxuXHRcdFx0XHRlcnJvcnMucHVzaChgVGhlIGJhc2VuYW1lIFwiJHt2YWx9XCIgY29udGFpbnMgaWxsZWdhbCBjaGFyYWN0ZXJzICg6P1wiPD58KikgPT4gXCIke20uam9pbignJyl9XCJgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0aWYgKGVycm9ycy5sZW5ndGgpIHRocm93IG5ldyBFcnJvcihpdGVtLmVycm9yID0gZXJyb3JzLmpvaW4oJzsgJykgKyAnLicpOyAvL2Vycm9yIC0gc2V0LCB0aHJvd1xyXG5cdFx0cmV0dXJuIGl0ZW07IC8vcmVzdWx0XHJcblx0fVxyXG5cdGNhdGNoIChlOiBhbnkpe1xyXG5cdFx0aWYgKF9zdHJpY3QpeyAvL3N0cmljdCAtIGNsZWFyXHJcblx0XHRcdGl0ZW0uYmFzZW5hbWUgPSAnJztcclxuXHRcdFx0aXRlbS5uYW1lID0gJyc7XHJcblx0XHRcdGl0ZW0uZXh0ID0gJyc7XHJcblx0XHR9XHJcblx0XHRpZiAoZmFpbHVyZSl7IC8vZmFpbHVyZSAtIGN1c3RvbSBlcnJvclxyXG5cdFx0XHRjbGFzcyBCYXNlbmFtZUVycm9yIGV4dGVuZHMgRXJyb3IgaW1wbGVtZW50cyBJQmFzZW5hbWVFcnJvciB7XHJcblx0XHRcdFx0bmFtZTogc3RyaW5nID0gJ0Jhc2VuYW1lRXJyb3InO1xyXG5cdFx0XHRcdGl0ZW06IElCYXNlbmFtZSA9IGl0ZW07XHJcblx0XHRcdH1cclxuXHRcdFx0Y29uc3QgZXJyb3IgPSBuZXcgQmFzZW5hbWVFcnJvcihgJHtlLm1lc3NhZ2UgfHwgZX1gKTtcclxuXHRcdFx0aWYgKGZhaWx1cmUgPT09IDIpIHRocm93IGVycm9yOyAvL3Rocm93XHJcblx0XHRcdGVsc2UgY29uc29sZS53YXJuKGVycm9yICsgJycsIHtpdGVtfSk7IC8vd2FyblxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGl0ZW07IC8vcmVzdWx0XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIE5vcm1hbGl6ZWQgcGF0aCAoc3RyaW5nYWJsZSkgaW50ZXJmYWNlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElGaWxlUGF0aCB7XHJcblx0dmFsdWU6IGFueTtcclxuXHRyb290OiBzdHJpbmc7XHJcblx0ZHJpdmU6IHN0cmluZztcclxuXHRwYXRoOiBzdHJpbmc7XHJcblx0ZGlyOiBzdHJpbmc7XHJcblx0YmFzZW5hbWU6IHN0cmluZztcclxuXHRuYW1lOiBzdHJpbmc7XHJcblx0ZXh0OiBzdHJpbmc7XHJcblx0ZXJyb3I6IHN0cmluZztcclxuXHRpbGxlZ2FsOiBzdHJpbmdbXTtcclxuXHRpbnZhbGlkOiBzdHJpbmdbXTtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0IHBhdGggdGV4dFxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBwcm9wIC0gdGV4dCB2YWx1ZSBwcm9wXHJcblx0ICogQHJldHVybnMgYHN0cmluZ2BcclxuXHQgKi9cclxuXHR0b1N0cmluZzogKFxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogU3BlY2lmeSB0ZXh0IHZhbHVlIHByb3AgKGRlZmF1bHQ6IGAncGF0aCdgKVxyXG5cdFx0ICogLSB1c2UgYCdmaWxlJ2AgdG8gZW5mb3JjZSB2YWxpZCBiYXNlbmFtZSBhbmQgbm8gZXJyb3JcclxuXHRcdCAqL1xyXG5cdFx0cHJvcD86ICdmaWxlJ3wncm9vdCd8J2RyaXZlJ3wncGF0aCd8J2Rpcid8J2Jhc2VuYW1lJ3wnbmFtZSd8J2V4dCd8J2Vycm9yJ1xyXG5cdCk9PnN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIE5vcm1hbGl6ZWQgcGF0aCBlcnJvciBpbnRlcmZhY2VcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUZpbGVQYXRoRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcblx0bmFtZTogc3RyaW5nO1xyXG5cdGl0ZW06IElGaWxlUGF0aDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCBub3JtYWxpemVkIGZpbGUvZGlyZWN0b3J5IHBhdGggKHZhbGlkYXRlcyBiYXNlbmFtZSlcclxuICogXHJcbiAqIC0gdHJpbXMgc3BhY2VzLCBzaWxlbnRseSBvbWl0cyBlbXB0eVxyXG4gKiAtIGludmFsaWRhdGVzIGlsbGVnYWwgcGF0aCBuYW1lIGNoYXJhY3RlcnMgKGkuZS4gYDo/XCI8PnwqYClcclxuICogLSBpbnZhbGlkYXRlcyBpbnZhbGlkIHBhdGggbmFtZSBkb3RzIChpLmUuIGAnLi4uJywgJ25hbWUuJywgJ25hbWUuLi4nYClcclxuICogLSBpbnZhbGlkYXRlcyBvdXRib3VuZCByb290IGRvdCBuYXZcclxuICogLSBub3JtYWxpemVzIGRvdCBwYXRoXHRcdFx0KGkuZS4gYCcvLidgID0+IGAnLydgLCBgJ2EvYi8uL2MnID0+ICdhL2IvYydgLCBgJy4vYS8uLi9iL2MnID0+ICcuL2IvYydgKSBpZ25vcmVzIG91dCBvZiBib3VuZCAoaS5lLiBgJ0M6L2EvLi4vLi4vYi9jJyA9PiAnQzovYi9jJ2ApXHJcbiAqIC0gbm9ybWFsaXplcyBkcml2ZSBsZXR0ZXJcdChpLmUuIGAnYzpcXFxcYS50eHQnID0+ICdDOlxcXFxhLnR4dCdgLCBgJ2M6J2AgPT4gYCdDOlxcXFwnYClcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAtIHBhcnNlIHBhdGggdmFsdWVcclxuICogQHBhcmFtIHNlcGFyYXRvciAtIHJlc3VsdCBwYXRoIHNlcGFyYXRvciB+IGAnJyB8ICcvJyB8ICdcXFxcJ2AgKGRlZmF1bHQgYCcnYCA9IHVuY2hhbmdlZClcclxuICogQHBhcmFtIF9zdHJpY3QgLSBzdHJpY3QgcGFyc2luZyB+IHJldHVybnMgYmxhbmsgKGAnJ2ApIHZhbHVlcyBvbiBlcnJvclxyXG4gKiBAcGFyYW0gX3R5cGUgLSBwYXRoIHR5cGUgKGRlZmF1bHQgYCcnYCkgfiBuYW1lIHVzZWQgaW4gZXJyb3IgbWVzc2FnZSAoaS5lLiBgJ1RoZSAke190eXBlfSBwYXRoLi4uJ2ApXHJcbiAqIEBwYXJhbSBfZmFpbHVyZSAtIGVycm9yIGhhbmRsaW5nIH4gYDBgID0gaWdub3JlLCAnMScgPSB3YXJuLCBgMmAgPSB0aHJvdyBlcnJvciAoZGVmYXVsdCBgMGApXHJcbiAqIEByZXR1cm5zIGBJRmlsZVBhdGhgIG5vcm1hbGl6ZWQgcGF0aCAoc3RyaW5nYWJsZSlcclxuICovXHJcbmV4cG9ydCBjb25zdCBfZmlsZXBhdGggPSAodmFsdWU6IGFueSwgc2VwYXJhdG9yPzogJyd8Jy8nfCdcXFxcJywgX3N0cmljdDogYm9vbGVhbiA9IGZhbHNlLCBfdHlwZT86IHN0cmluZywgX2ZhaWx1cmU/OiAwfDF8Mik6IElGaWxlUGF0aCA9PiB7XHJcblx0Y29uc3Qgc2VwOiAnJ3wnLyd8J1xcXFwnID0gWycnLCAnLycsICdcXFxcJ10uaW5jbHVkZXMoc2VwYXJhdG9yID0gX3N0cihzZXBhcmF0b3IsIHRydWUpIGFzIGFueSkgPyBzZXBhcmF0b3IgYXMgKCcnfCcvJ3wnXFxcXCcpIDogJyc7XHJcblx0Y29uc3QgdHlwZTogc3RyaW5nID0gKF90eXBlID0gX3N0cihfdHlwZSwgdHJ1ZSkucmVwbGFjZSgvcGF0aFxccyokL2ksICcnKS50cmltKCkpID8gX3R5cGUgKyAnICcgOiAnJztcclxuXHRjb25zdCBmYWlsdXJlOiAwfDF8MiA9IFswLCAxLCAyXS5pbmNsdWRlcyhfZmFpbHVyZSA9IHBhcnNlSW50KF9mYWlsdXJlICsgJycpIGFzIGFueSkgPyBfZmFpbHVyZSBhcyAoMHwxfDIpIDogMDtcclxuXHRcclxuXHQvL25vcm1hbGl6ZWQgcGF0aCBpdGVtXHJcblx0Y29uc3QgaXRlbTogSUZpbGVQYXRoID0ge1xyXG5cdFx0dmFsdWUsXHJcblx0XHRyb290OiAnJyxcclxuXHRcdGRyaXZlOiAnJyxcclxuXHRcdHBhdGg6ICcnLFxyXG5cdFx0ZGlyOiAnJyxcclxuXHRcdGJhc2VuYW1lOiAnJyxcclxuXHRcdG5hbWU6ICcnLFxyXG5cdFx0ZXh0OiAnJyxcclxuXHRcdGVycm9yOiAnJyxcclxuXHRcdGlsbGVnYWw6IFtdLFxyXG5cdFx0aW52YWxpZDogW10sXHJcblx0XHR0b1N0cmluZyhwcm9wPzogJ2ZpbGUnfCdyb290J3wnZHJpdmUnfCdwYXRoJ3wnZGlyJ3wnYmFzZW5hbWUnfCduYW1lJ3wnZXh0J3wnZXJyb3InKTogc3RyaW5nIHtcclxuXHRcdFx0bGV0IGtleTogc3RyaW5nID0gcHJvcCAmJiBbJ2ZpbGUnLCAncm9vdCcsICdkcml2ZScsICdwYXRoJywgJ2RpcicsICdiYXNlbmFtZScsICduYW1lJywgJ2V4dCcsICdlcnJvciddXHJcblx0XHRcdC5pbmNsdWRlcyhwcm9wID0gX3N0cihwcm9wLCB0cnVlKS50b0xvd2VyQ2FzZSgpIGFzIGFueSkgPyBwcm9wICsgJycgOiAncGF0aCc7XHJcblx0XHRcdGlmIChrZXkgPT09ICdmaWxlJyl7XHJcblx0XHRcdFx0aWYgKCEoIXRoaXMuZXJyb3IgJiYgdGhpcy5iYXNlbmFtZSkpIHJldHVybiAnJztcclxuXHRcdFx0XHRrZXkgPSAncGF0aCc7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHRoaXNba2V5IGFzICdyb290J3wnZHJpdmUnfCdwYXRoJ3wnZGlyJ3wnYmFzZW5hbWUnfCduYW1lJ3wnZXh0J3wnZXJyb3InXTtcclxuXHRcdH0sXHJcblx0fTtcclxuXHJcblx0Ly9wYXJzZSBwYXRoXHJcblx0bGV0IHBhdGg6IHN0cmluZyA9IF9zdHIodmFsdWUsIHRydWUpO1xyXG5cdHRyeSB7XHJcblx0XHRsZXQgcm9vdCA9ICcnLCBkcml2ZSA9ICcnLCBtOiBSZWdFeHBNYXRjaEFycmF5fG51bGwgPSBudWxsO1xyXG5cdFx0Y29uc3QgaXRlbXM6IFtwYXJ0OiBzdHJpbmcsIGRpdjogc3RyaW5nXVtdID0gW107XHJcblx0XHRjb25zdCBwYXRoX3BhcnRzOiBbcGFydDogc3RyaW5nLCBkaXY6IHN0cmluZ11bXSA9IF9zcGxpdChwYXRoLCAvW1xcXFxcXC9dLyk7XHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHBhdGhfcGFydHMubGVuZ3RoOyBpICsrKXtcclxuXHRcdFx0bGV0IFtwYXJ0LCBkaXZdID0gcGF0aF9wYXJ0c1tpXTtcclxuXHRcdFx0ZGl2ID0gZGl2ID8gKHNlcCA/IHNlcCA6IGRpdikgOiAnJztcclxuXHRcdFx0aWYgKCFpKXtcclxuXHRcdFx0XHRpZiAoL1thLXpdXFw6L2kudGVzdChwYXJ0KSkgcm9vdCA9IGRyaXZlID0gcGFydC50b1VwcGVyQ2FzZSgpICsgKChzZXAgPyBzZXAgOiBkaXYpIHx8ICdcXFxcJyk7XHJcblx0XHRcdFx0ZWxzZSBpZiAoIXBhcnQgJiYgZGl2KSByb290ID0gZGl2O1xyXG5cdFx0XHRcdGlmIChyb290KSBjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpdGVtcy5wdXNoKFtwYXJ0LCBkaXZdKTtcclxuXHRcdH1cclxuXHJcblx0XHQvL3BhcnNlIGl0ZW1zIC0gdHJpbSBiYXNlbmFtZVxyXG5cdFx0Y29uc3QgdHJpbW1lZF9wYXJ0czogW3BhcnQ6IHN0cmluZywgZGl2OiBzdHJpbmddW10gPSBbXTtcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpICsrKXtcclxuXHRcdFx0bGV0IFtwYXJ0LCBkaXZdID0gaXRlbXNbaV07XHJcblx0XHRcdHBhcnQgPSBfc3RyKHBhcnQsIHRydWUpO1xyXG5cdFx0XHRpZiAoIShpICYmICFwYXJ0KSkgY29udGludWU7IC8vc2tpcCBibGFuayAoJycpIGVudHJpZXNcclxuXHRcdFx0dHJpbW1lZF9wYXJ0cy5wdXNoKFtwYXJ0LCBkaXZdKTtcclxuXHRcdH1cclxuXHJcblx0XHQvL3BhcnNlIHRyaW1tZWQgLSBub3JtYWxpemUgZG90IHBhdGhcclxuXHRcdGNvbnN0IG5vcm1fcGFydHM6IFtwYXJ0OiBzdHJpbmcsIGRpdjogc3RyaW5nXVtdID0gW107XHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRyaW1tZWRfcGFydHMubGVuZ3RoOyBpICsrKXtcclxuXHRcdFx0bGV0IFtwYXJ0LCBkaXZdID0gdHJpbW1lZF9wYXJ0c1tpXTtcclxuXHRcdFx0aWYgKHBhcnQgPT09ICcuJyAmJiAoIWkgJiYgcm9vdCB8fCBpKSl7IC8vbWF0Y2ggZG90IHBhdGggKCcuJykgKGF0IHN0YXJ0IHdpdGggcm9vdCwgbm90IGF0IHN0YXJ0KVxyXG5cdFx0XHRcdGlmIChpICYmIGkgPT09IHRyaW1tZWRfcGFydHMubGVuZ3RoIC0gMSkgdHJpbW1lZF9wYXJ0c1tpIC0gMV1bMV0gPSAnJzsgLy9pZiBsYXN0IHJlbW92ZSBwcmV2aW91cyBzZXBhcmF0b3JcclxuXHRcdFx0XHRjb250aW51ZTsgLy9za2lwIHVubmVjZXNzYXJ5IGRvdCBwYXRoICgnLicpXHJcblx0XHRcdH1cclxuXHRcdFx0bm9ybV9wYXJ0cy5wdXNoKFtwYXJ0LCBkaXZdKTtcclxuXHRcdH1cclxuXHJcblx0XHQvL3BhcnNlIG5vcm1hbGl6ZWQgLSB2YWxpZGF0ZSBwYXJ0c1xyXG5cdFx0Y29uc3QgaW52YWxpZDogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XHJcblx0XHRjb25zdCBpbGxlZ2FsOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcclxuXHRcdGNvbnN0IG91dGJvdW5kOiBbcGFydDogc3RyaW5nLCBkaXY6IHN0cmluZ11bXSA9IFtdO1xyXG5cdFx0Y29uc3QgcGFydHM6IFtwYXJ0OiBzdHJpbmcsIGRpdjogc3RyaW5nXVtdID0gW107XHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG5vcm1fcGFydHMubGVuZ3RoOyBpICsrKXtcclxuXHRcdFx0Y29uc3QgW3BhcnQsIGRpdl0gPSBub3JtX3BhcnRzW2ldOyAvL3BhcnQgZW50cnlcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRfYmFzZW5hbWUocGFydCwgdHJ1ZSwgZmFsc2UsIDIpOyAvL3ZhbGlkYXRlIGJhc2VuYW1lXHJcblx0XHRcdH1cclxuXHRcdFx0Y2F0Y2ggKGU6IGFueSkge1xyXG5cdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KGU/Lml0ZW0/LmludmFsaWQpICYmIGUuaXRlbS5pbnZhbGlkLmxlbmd0aCl7XHJcblx0XHRcdFx0XHRmb3IgKGNvbnN0IHYgb2YgZS5pdGVtLmludmFsaWQpIGludmFsaWQuYWRkKHYpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShlPy5pdGVtPy5pbGxlZ2FsKSAmJiBlLml0ZW0uaWxsZWdhbC5sZW5ndGgpe1xyXG5cdFx0XHRcdFx0Zm9yIChjb25zdCB2IG9mIGUuaXRlbS5pbGxlZ2FsKSBpbGxlZ2FsLmFkZCh2KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKHBhcnQgPT09ICcuLicpeyAvL2RvdCBwYXRoICgnLi4nKSBuYXZcclxuXHRcdFx0XHRpZiAocGFydHMubGVuZ3RoKXsgLy9wb3AgcGFyZW50XHJcblx0XHRcdFx0XHRjb25zdCBwID0gcGFydHMubGVuZ3RoIC0gMTtcclxuXHRcdFx0XHRcdGlmIChwID4gLTEgJiYgISFwYXJ0c1twXVswXSAmJiAhWycuJywgJy4uJ10uaW5jbHVkZXMocGFydHNbcF1bMF0pKXtcclxuXHRcdFx0XHRcdFx0cGFydHMucG9wKCk7XHJcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmIChyb290KXsgLy9yb290IHBhcmVudCAtIG91dGJvdW5kIFxyXG5cdFx0XHRcdFx0b3V0Ym91bmQucHVzaChbcGFydCwgZGl2XSk7XHJcblx0XHRcdFx0XHRpZiAoZHJpdmUpIGNvbnRpbnVlOyAvL2lnbm9yZSB3aGVuIHJvb3QgaXMgZHJpdmVcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cGFydHMucHVzaChbcGFydCwgZGl2XSk7IC8vYWRkIGVudHJ5XHJcblx0XHR9XHJcblx0XHRpZiAocm9vdCAmJiBwYXJ0cy5sZW5ndGggJiYgIXBhcnRzWzBdWzBdICYmIHBhcnRzWzBdWzFdKSBwYXJ0c1swXVsxXSA9ICcnOyAvL2ZpeCByb290IHNlcGFyYXRvclxyXG5cdFx0aWYgKG91dGJvdW5kLmxlbmd0aCkgb3V0Ym91bmQucHVzaCguLi5wYXJ0cyk7IC8vb3V0Ym91bmQgZW50cmllc1xyXG5cclxuXHRcdC8vdXBkYXRlIGl0ZW0gLSBzZXQgcm9vdCwgZHJpdmUsIGRpciwgYmFzZW5hbWUsIGV4dCwgZGlyXHJcblx0XHRpdGVtLnJvb3QgPSByb290O1xyXG5cdFx0aXRlbS5kcml2ZSA9IGRyaXZlO1xyXG5cclxuXHRcdC8vam9pbiBwYXJ0cyAtIHVwZGF0ZSBkaXIsIHBhdGhcclxuXHRcdGxldCB0bXBfcGF0aDogc3RyaW5nID0gJyc7XHJcblx0XHRmb3IgKGNvbnN0IHBhcnQgb2YgcGFydHMpIHRtcF9wYXRoICs9IHBhcnQuam9pbignJyk7XHJcblx0XHRpdGVtLmRpciA9IGl0ZW0ucGF0aCA9IHBhdGggPSByb290ICsgdG1wX3BhdGgucmVwbGFjZSgvW1xcXFwvXSQvLCAnJyk7XHJcblxyXG5cdFx0Ly91cGRhdGUgaXRlbSAtIHNldCBiYXNlbmFtZSwgbmFtZSwgZXh0LCBkaXJcclxuXHRcdGNvbnN0IGVuZCA9IHBhcnRzLnBvcCgpO1xyXG5cdFx0aWYgKGVuZCAmJiAhWycnLCAnLicsICcuLiddLmluY2x1ZGVzKGVuZFswXSkpe1xyXG5cdFx0XHRjb25zdCBiYXNlbmFtZTogSUJhc2VuYW1lID0gX2Jhc2VuYW1lKGVuZFswXSk7XHJcblx0XHRcdGl0ZW0uYmFzZW5hbWUgPSBiYXNlbmFtZS5iYXNlbmFtZTtcclxuXHRcdFx0aXRlbS5uYW1lID0gYmFzZW5hbWUubmFtZTtcclxuXHRcdFx0aXRlbS5leHQgPSBiYXNlbmFtZS5leHQ7XHJcblxyXG5cdFx0XHQvL2pvaW4gcGFydHMgLSB1cGRhdGUgZGlyXHJcblx0XHRcdHRtcF9wYXRoID0gJyc7XHJcblx0XHRcdGZvciAoY29uc3QgcGFydCBvZiBwYXJ0cykgdG1wX3BhdGggKz0gcGFydC5qb2luKCcnKTtcclxuXHRcdFx0aXRlbS5kaXIgPSByb290ICsgdG1wX3BhdGgucmVwbGFjZSgvW1xcXFwvXSQvLCAnJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly9jaGVjayBlcnJvcnMgLSB1cGRhdGUgaXRlbVxyXG5cdFx0Y29uc3QgZXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xyXG5cdFx0dG1wX3BhdGggPSAnJztcclxuXHRcdGZvciAoY29uc3QgcGFydCBvZiBvdXRib3VuZCkgdG1wX3BhdGggKz0gcGFydC5qb2luKCcnKTtcclxuXHRcdGNvbnN0IG91dGJvdW5kX3BhdGggPSB0bXBfcGF0aCA/IHJvb3QgKyB0bXBfcGF0aCA6ICcnO1xyXG5cdFx0aWYgKG91dGJvdW5kX3BhdGgpIGVycm9ycy5wdXNoKGBUaGUgJHt0eXBlfXJvb3QgKCR7cm9vdH0pIGRvdCBuYXYgcGF0aCBpcyBvdXRib3VuZCBcIiR7b3V0Ym91bmRfcGF0aH1cIiA9PiBcIiR7cGF0aH1cImApOyAvL291dGJvdW5kXHJcblx0XHRpZiAoaW52YWxpZC5zaXplKSBlcnJvcnMucHVzaChgVGhlICR7dHlwZX1wYXRoIGNvbnRhaW5zIGludmFsaWQgbmFtZSR7aW52YWxpZC5zaXplID4gMSA/ICdzJyA6ICcnfSAoJHtfanNvblN0cmluZ2lmeShbLi4uaW52YWxpZF0pfSlgKTsgLy9pbnZhbGlkXHJcblx0XHRpZiAoaWxsZWdhbC5zaXplKSBlcnJvcnMucHVzaChgVGhlICR7dHlwZX1wYXRoIGNvbnRhaW5zIGlsbGVnYWwgY2hhcmFjdGVycyAoOj9cIjw+fCopID0+IFwiJHtbLi4uaWxsZWdhbF0uam9pbignJyl9XCJgKTsgLy9pbGxlZ2FsXHJcblx0XHRpZiAoZXJyb3JzLmxlbmd0aCl7IC8vdGhyb3cgZXJyb3JzXHJcblx0XHRcdGl0ZW0uaW52YWxpZCA9IFsuLi5pbnZhbGlkXTtcclxuXHRcdFx0aXRlbS5pbGxlZ2FsID0gWy4uLmlsbGVnYWxdO1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoaXRlbS5lcnJvciA9IGVycm9ycy5qb2luKCc7ICcpICsgJy4nKTsgLy9lcnJvciAtIHNldCwgdGhyb3dcclxuXHRcdH1cclxuXHRcdHJldHVybiBpdGVtOyAvLzw8IHJlc3VsdCAtIElGaWxlUGF0aFxyXG5cdH1cclxuXHRjYXRjaCAoZTogYW55KXtcclxuXHRcdGlmIChfc3RyaWN0KXsgLy9zdHJpY3QgLSBjbGVhclxyXG5cdFx0XHRpdGVtLnJvb3QgPSAnJztcclxuXHRcdFx0aXRlbS5kcml2ZSA9ICcnO1xyXG5cdFx0XHRpdGVtLnBhdGggPSAnJztcclxuXHRcdFx0aXRlbS5kaXIgPSAnJztcclxuXHRcdFx0aXRlbS5iYXNlbmFtZSA9ICcnO1xyXG5cdFx0XHRpdGVtLm5hbWUgPSAnJztcclxuXHRcdFx0aXRlbS5leHQgPSAnJztcclxuXHRcdH1cclxuXHRcdGlmIChmYWlsdXJlKXsgLy9mYWlsdXJlIC0gY3VzdG9tIGVycm9yXHJcblx0XHRcdGNsYXNzIE5vcm1QYXRoRXJyb3IgZXh0ZW5kcyBFcnJvciBpbXBsZW1lbnRzIElGaWxlUGF0aEVycm9yIHtcclxuXHRcdFx0XHRuYW1lOiBzdHJpbmcgPSAnTm9ybVBhdGhFcnJvcic7XHJcblx0XHRcdFx0aXRlbTogSUZpbGVQYXRoID0gaXRlbTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjb25zdCBlcnJvciA9IG5ldyBOb3JtUGF0aEVycm9yKGAke2UubWVzc2FnZSB8fCBlfWApO1xyXG5cdFx0XHRpZiAoZmFpbHVyZSA9PT0gMikgdGhyb3cgZXJyb3I7IC8vdGhyb3dcclxuXHRcdFx0ZWxzZSBjb25zb2xlLndhcm4oZXJyb3IgKyAnJywge2l0ZW19KTsgLy93YXJuXHJcblx0XHR9XHJcblx0XHRyZXR1cm4gaXRlbTsgLy88PCByZXN1bHQgLSBJRmlsZVBhdGggKGZhaWxlZClcclxuXHR9XHJcbn07IiwiZXhwb3J0ICogZnJvbSAnLi9fbWltZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vX3BhdGgnOyIsImV4cG9ydCAqIGZyb20gJy4vM3JkLXBhcnR5JztcclxuZXhwb3J0ICogZnJvbSAnLi90eXBlcyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMnO1xyXG5leHBvcnQgKiBmcm9tICcuL0VsYXBzZWRUaW1lJztcclxuZXhwb3J0ICogZnJvbSAnLi9UZXJtJztcclxuZXhwb3J0ICogZnJvbSAnLi9BbmltYXRlJztcclxuZXhwb3J0ICogZnJvbSAnLi9FdmVudEVtaXR0ZXInO1xyXG5leHBvcnQgKiBmcm9tICcuL0V4Y2VwdGlvbic7XHJcbmV4cG9ydCAqIGZyb20gJy4vVGFza3MnO1xyXG5leHBvcnQgKiBmcm9tICcuL2ZpbGUnOyIsImV4cG9ydCAqIGZyb20gJy4vX2NvbW1vbic7XHJcbiIsIi8qKlxyXG4gKiBTcGxpdCBgYXJyYXlgIGludG8gYmF0Y2hlcyBgVFtdW11gIG9mIHNwZWNpZmllZCBzaXplLlxyXG4gKiBcclxuICogQGV4YW1wbGVcclxuICogX2JhdGNoVmFsdWVzPG51bWJlcj4oWzEsMiwzLDQsNSw2LDcsOF0sIDMpID0+IFtbMSwyLDNdLFs0LDUsNl0sWzcsOF1dXHJcbiAqIFxyXG4gKiBAcGFyYW0gYXJyYXkgIEJhdGNoIHZhbHVlc1xyXG4gKiBAcGFyYW0gYmF0Y2hTaXplICBCYXRjaCBzaXplIGB4ID4gMGAuXHJcbiAqIEByZXR1cm5zIGA8VCA9IGFueT5bXVtdYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9iYXRjaFZhbHVlcyA9IDxUID0gYW55PihhcnJheTogVFtdLCBiYXRjaFNpemU6IG51bWJlcik6IFRbXVtdID0+IHtcclxuXHRpZiAoIShOdW1iZXIuaXNJbnRlZ2VyKGJhdGNoU2l6ZSkgJiYgYmF0Y2hTaXplID4gMCkpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBiYXRjaCBzaXplLicpO1xyXG5cdGNvbnN0IGl0ZW1zID0gYXJyYXkuc2xpY2UoMCksIF9idWZmZXI6IFRbXVtdID0gW107XHJcblx0d2hpbGUgKGl0ZW1zLmxlbmd0aCkgX2J1ZmZlci5wdXNoKGl0ZW1zLnNwbGljZSgwLCBiYXRjaFNpemUpKTtcclxuXHRyZXR1cm4gX2J1ZmZlcjtcclxufTsiLCJcclxuLyoqXHJcbiAqIENsb25lIHZhbHVlXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWVcclxuICogQHJldHVybnMgY29weVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9jbG9uZSA9ICh2YWx1ZTogYW55KTogYW55ID0+IGNsb25lKHZhbHVlLCBuZXcgTWFwKCkpO1xyXG5cclxuLyoqXHJcbiAqIE5hbm8gY2xvbmUgKGh0dHBzOi8vZ2l0aHViLmNvbS9LZWxpbjIwMjUvbmFub2Nsb25lLmdpdClcclxuICogXHJcbiAqIEBwYXJhbSBzcmNcclxuICogQHBhcmFtIHNlZW5cclxuICovXHJcbmZ1bmN0aW9uIGNsb25lKHNyYzogYW55LCBzZWVuOiBNYXA8YW55LCBhbnk+KTogYW55IHtcclxuXHRcclxuXHQvLyBJbW11dGFibGUgdGhpbmdzIC0gbnVsbCwgdW5kZWZpbmVkLCBmdW5jdGlvbnMsIHN5bWJvbHMsIGV0Yy5cclxuXHRpZiAoIXNyYyB8fCB0eXBlb2Ygc3JjICE9PSAnb2JqZWN0JykgcmV0dXJuIHNyYztcclxuXHJcblx0Ly8gVGhpbmdzIHdlJ3ZlIHNlZW4gYWxyZWFkeSAoY2lyY3VsYXIgcmVmcylcclxuXHRpZiAoc2Vlbi5oYXMoc3JjKSkgcmV0dXJuIHNlZW4uZ2V0KHNyYyk7XHJcblxyXG5cdC8vIEJhc2ljIHBhdHRlcm4gZm9yIGNsb25pbmcgc29tZXRoaW5nIGJlbG93IGhlcmUgaXM6XHJcblx0Ly8gMS4gQ3JlYXRlIGNvcHlcclxuXHQvLyAyLiBBZGQgaXQgdG8gYHNlZW5gIGltbWVkaWF0ZWx5LCBzbyB3ZSByZWNvZ25pemUgaXQgaWYgd2Ugc2VlIGl0IGluXHJcblx0Ly8gICAgc3Vib3JkaW5hdGUgbWVtYmVyc1xyXG5cdC8vIDMuIGNsb25lIHN1Ym9yZGluYXRlIG1lbWJlcnNcclxuXHRsZXQgY29weTogYW55O1xyXG5cdFxyXG5cdC8vIERPTSBOb2RlXHJcblx0aWYgKHNyYy5ub2RlVHlwZSAmJiAnY2xvbmVOb2RlJyBpbiBzcmMpIHtcclxuXHRcdGNvcHkgPSBzcmMuY2xvbmVOb2RlKHRydWUpO1xyXG5cdFx0c2Vlbi5zZXQoc3JjLCBjb3B5KTtcclxuXHR9XHJcblx0XHJcblx0Ly8gRGF0ZVxyXG5cdGVsc2UgaWYgKHNyYyBpbnN0YW5jZW9mIERhdGUpIHtcclxuXHRcdGNvcHkgPSBuZXcgRGF0ZShzcmMuZ2V0VGltZSgpKTtcclxuXHRcdHNlZW4uc2V0KHNyYywgY29weSk7XHJcblx0fVxyXG5cdFxyXG5cdC8vIFJlZ0V4cFxyXG5cdGVsc2UgaWYgKHNyYyBpbnN0YW5jZW9mIFJlZ0V4cCkge1xyXG5cdFx0Y29weSA9IG5ldyBSZWdFeHAoc3JjKTtcclxuXHRcdHNlZW4uc2V0KHNyYywgY29weSk7XHJcblx0fVxyXG5cdFxyXG5cdC8vIEFycmF5XHJcblx0ZWxzZSBpZiAoQXJyYXkuaXNBcnJheShzcmMpKSB7XHJcblx0XHRjb3B5ID0gbmV3IEFycmF5KHNyYy5sZW5ndGgpO1xyXG5cdFx0c2Vlbi5zZXQoc3JjLCBjb3B5KTtcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgc3JjLmxlbmd0aDsgaSsrKSBjb3B5W2ldID0gY2xvbmUoc3JjW2ldLCBzZWVuKTtcclxuXHR9XHJcblx0XHJcblx0Ly8gTWFwXHJcblx0ZWxzZSBpZiAoc3JjIGluc3RhbmNlb2YgTWFwKSB7XHJcblx0XHRjb3B5ID0gbmV3IE1hcCgpO1xyXG5cdFx0c2Vlbi5zZXQoc3JjLCBjb3B5KTtcclxuXHRcdGZvciAoY29uc3QgW2ssIHZdIG9mIHNyYy5lbnRyaWVzKCkpIGNvcHkuc2V0KGssIGNsb25lKHYsIHNlZW4pKTtcclxuXHR9XHJcblx0XHJcblx0Ly8gU2V0XHJcblx0ZWxzZSBpZiAoc3JjIGluc3RhbmNlb2YgU2V0KSB7XHJcblx0XHRjb3B5ID0gbmV3IFNldCgpO1xyXG5cdFx0c2Vlbi5zZXQoc3JjLCBjb3B5KTtcclxuXHRcdGZvciAoY29uc3QgdiBvZiBzcmMpIGNvcHkuYWRkKGNsb25lKHYsIG5ldyBNYXAoKSkpO1xyXG5cdH1cclxuXHRcclxuXHQvLyBPYmplY3RcclxuXHRlbHNlIGlmIChzcmMgaW5zdGFuY2VvZiBPYmplY3QpIHtcclxuXHRcdGNvcHkgPSB7fTtcclxuXHRcdHNlZW4uc2V0KHNyYywgY29weSk7XHJcblx0XHRmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhzcmMpKSBjb3B5W2tdID0gY2xvbmUodiwgc2Vlbik7XHJcblx0fVxyXG5cdFxyXG5cdC8vIFVucmVjb2duaXplZCB0aGluZy4gIEl0J3MgYmV0dGVyIHRvIHRocm93IGhlcmUgdGhhbiB0byByZXR1cm4gYHNyY2AsIGFzXHJcblx0Ly8gd2UgZG9uJ3Qga25vdyB3aGV0aGVyIHNyYyBuZWVkcyB0byBiZSBkZWVwLWNvcGllZCBoZXJlLlxyXG5cdGVsc2Uge1xyXG5cdFx0Y29uc3QgZXJyb3IgPSBgVW5hYmxlIHRvIGNsb25lICR7c3JjfWA7XHJcblx0XHRjb25zb2xlLndhcm4oJ1tfY2xvbmVdIEVycm9yOiAnICsgZXJyb3IsIHNyYyk7XHJcblx0XHR0aHJvdyBFcnJvcihlcnJvcik7XHJcblx0fVxyXG5cclxuXHQvL3Jlc3VsdFxyXG5cdHJldHVybiBjb3B5XHJcbn0iLCJpbXBvcnQgeyBCdWZmZXIgfSBmcm9tICcuLi8zcmQtcGFydHknO1xyXG5cclxuLyoqXHJcbiAqIENsb25lIHV0aWxzXHJcbiAqL1xyXG5jb25zdCBfaW5zdGFuY2VvZiA9IChvOiBhbnksIHR5cGU6IGFueSk6IGJvb2xlYW4gPT4gJ29iamVjdCcgPT09IHR5cGVvZiB0eXBlICYmIHR5cGUgJiYgbyBpbnN0YW5jZW9mIHR5cGU7XHJcbmNvbnN0IF90b1N0cmluZyA9IChvOiBhbnkpOiBzdHJpbmcgPT4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xyXG5jb25zdCBfaXNEYXRlID0gKG86IGFueSk6IGJvb2xlYW4gPT4gJ29iamVjdCcgPT09IHR5cGVvZiBvICYmIF90b1N0cmluZyhvKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xyXG5jb25zdCBfaXNBcnJheSA9IChvOiBhbnkpOiBib29sZWFuID0+IHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBfdG9TdHJpbmcobykgPT09ICdbb2JqZWN0IEFycmF5XSc7XHJcbmNvbnN0IF9pc1JlZ0V4cCA9IChvOiBhbnkpOiBib29sZWFuID0+IHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBfdG9TdHJpbmcobykgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xyXG5jb25zdCBfZ2V0UmVnRXhwRmxhZ3MgPSAocmVnZXg6IGFueSk6IHN0cmluZyA9PiB7XHJcblx0bGV0IGZsYWdzID0gJyc7XHJcblx0aWYgKHJlZ2V4Py5nbG9iYWwpIGZsYWdzICs9ICdnJztcclxuXHRpZiAocmVnZXg/Lmlnbm9yZUNhc2UpIGZsYWdzICs9ICdpJztcclxuXHRpZiAocmVnZXg/Lm11bHRpbGluZSkgZmxhZ3MgKz0gJ20nO1xyXG5cdHJldHVybiBmbGFncztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDbG9uZSBwcm90b3R5cGVcclxuICogXHJcbiAqIEBwYXJhbSBwYXJlbnRcclxuICovXHJcbmV4cG9ydCBjb25zdCBjbG9uZVByb3RvdHlwZSA9IChwYXJlbnQ6IGFueSk6IGFueSA9PiB7XHJcblx0aWYgKHBhcmVudCA9PT0gbnVsbCB8fCBwYXJlbnQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHBhcmVudDtcclxuXHRpZiAoJ29iamVjdCcgIT09IHR5cGVvZiBwYXJlbnQpIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwYXJlbnQpO1xyXG5cdGNvbnN0IGZuOiBhbnkgPSBmdW5jdGlvbigpe307XHJcblx0Zm4ucHJvdG90eXBlID0gcGFyZW50O1xyXG5cdHJldHVybiBuZXcgZm4oKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBEZWVwIGNsb25lIG9wdGlvbnMgaW50ZXJmYWNlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElEZWVwQ2xvbmVPcHRpb25zIHtcclxuXHRcclxuXHQvKiogW2RlZmF1bHQ6IGB0cnVlYF0gRW5hYmxlIGNpcmN1bGFyIHJlZmVyZW5jZXMgKGNhbiBhbHNvIGJlIG9iamVjdCB3aXRoIG9wdGlvbnMge2NpcmN1bGFyLCBkZXB0aCwgcHJvdG90eXBlLCBub25fZW51bWVyYWJsZX0pICovXHJcblx0Y2lyY3VsYXI/OiBib29sZWFuO1xyXG5cdFxyXG5cdC8qKiBbZGVmYXVsdDogYEluZmluaXR5YF0gQ2xvbmUgZGVwdGggbGltaXQgKGxlYXZlIGRlZmF1bHQgdG8gcHJldmVudCByZWZlcmVuY2VzIHRvIHBhcmVudCkuICovXHJcblx0ZGVwdGg/OiBudW1iZXI7XHJcblx0XHJcblx0LyoqIFtkZWZhdWx0OiBgdW5kZWZpbmVkYF0gVXNlIHByb3RvdHlwZS4gKi9cclxuXHRwcm90b3R5cGU/OiBhbnk7XHJcblx0XHJcblx0LyoqIFtkZWZhdWx0OiBgZmFsc2VgXSBFbmFibGUgY2xvbmluZyBub24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzIChpZ25vcmVzIHByb3RvdHlwZSBjaGFpbiBub24tZW51bWVyYWJsZSBwcm9wcykgKi9cclxuXHRub25fZW51bWVyYWJsZT86IGJvb2xlYW47XHJcbn07XHJcblxyXG4vKipcclxuICogQ2xvbmVzIChjb3BpZXMpIGFuIE9iamVjdCB1c2luZyBkZWVwIGNvcHlpbmcuXHJcbiAqXHJcbiAqIC0gVGhpcyBmdW5jdGlvbiBzdXBwb3J0cyBjaXJjdWxhciByZWZlcmVuY2VzIGJ5IGRlZmF1bHQsIGJ1dCBpZiB5b3UgYXJlIGNlcnRhaW5cclxuICogdGhlcmUgYXJlIG5vIGNpcmN1bGFyIHJlZmVyZW5jZXMgaW4geW91ciBvYmplY3QsIHlvdSBjYW4gc2F2ZSBzb21lIENQVSB0aW1lXHJcbiAqIGJ5IGNhbGxpbmcgd2l0aCBvcHRpb24gYGNpcmN1bGFyYCA9IGBmYWxzZWAuXHJcbiAqXHJcbiAqIC0gQ0FVVElPTjogaWYgb3B0aW9uIGBjaXJjdWxhcmAgaXMgYGZhbHNlYCBhbmQgYHZhbHVlYCBjb250YWlucyBjaXJjdWxhciByZWZlcmVuY2VzLFxyXG4gKiB5b3VyIHByb2dyYW0gbWF5IGVudGVyIGFuIGluZmluaXRlIGxvb3AgYW5kIGNyYXNoLlxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBDbG9uZSBzdWJqZWN0IGA8VD5gXHJcbiAqIEBwYXJhbSBvcHRpb25zICBDbG9uZSBvcHRpb25zXHJcbiAqIEByZXR1cm5zIGA8VD5gIGNsb25lXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX2Nsb25lRGVlcDxUID0gYW55Pih2YWx1ZTogVCwgb3B0aW9ucz86IElEZWVwQ2xvbmVPcHRpb25zKTogVCB7XHJcblx0Y29uc3Qge1xyXG5cdFx0Y2lyY3VsYXI6IF9jaXJjdWxhciA9IHRydWUsXHJcblx0XHRkZXB0aDogX2RlcHRoID0gSW5maW5pdHksXHJcblx0XHRwcm90b3R5cGU6IF9wcm90b3R5cGUgPSB1bmRlZmluZWQsXHJcblx0XHRub25fZW51bWVyYWJsZTogX25vbl9lbnVtZXJhYmxlID0gZmFsc2UsXHJcblx0fSA9IE9iamVjdChvcHRpb25zKTtcclxuXHRjb25zdCBjaXJjdWxhciA9ICd1bmRlZmluZWQnID09PSB0eXBlb2YgX2NpcmN1bGFyID8gdHJ1ZSA6IEJvb2xlYW4oX2NpcmN1bGFyKTtcclxuXHRjb25zdCBkZXB0aCA9ICFpc05hTihfZGVwdGgpICYmIE51bWJlci5pc0ludGVnZXIoX2RlcHRoKSAmJiBfZGVwdGggPiAwID8gX2RlcHRoIDogSW5maW5pdHk7XHJcblx0Y29uc3QgcHJvdG90eXBlID0gX3Byb3RvdHlwZTtcclxuXHRjb25zdCBub25fZW51bWVyYWJsZSA9IEJvb2xlYW4oX25vbl9lbnVtZXJhYmxlKTtcclxuXHRjb25zdCBhbGxQYXJlbnRzOiBhbnlbXSA9IFtdO1xyXG5cdGNvbnN0IGFsbENoaWxkcmVuOiBhbnlbXSA9IFtdO1xyXG5cdGNvbnN0IHVzZUJ1ZmZlciA9ICd1bmRlZmluZWQnICE9PSB0eXBlb2YgQnVmZmVyO1xyXG5cclxuXHQvL2Nsb25lXHJcblx0Y29uc3QgX2Nsb25lID0gKHBhcmVudDogYW55LCBkZXB0aDogbnVtYmVyKTogYW55ID0+IHtcclxuXHRcdGlmIChkZXB0aCA9PT0gMCB8fCAhKCdvYmplY3QnID09PSB0eXBlb2YgcGFyZW50ICYmIHBhcmVudCkpIHJldHVybiBwYXJlbnQ7XHJcblx0XHRsZXQgY2hpbGQ6IGFueSwgcHJvdG86IGFueTtcclxuXHRcdGlmIChfaW5zdGFuY2VvZihwYXJlbnQsIE1hcCkpIGNoaWxkID0gbmV3IE1hcCgpO1xyXG5cdFx0ZWxzZSBpZiAoX2luc3RhbmNlb2YocGFyZW50LCBTZXQpKSBjaGlsZCA9IG5ldyBTZXQoKTtcclxuXHRcdGVsc2UgaWYgKF9pbnN0YW5jZW9mKHBhcmVudCwgUHJvbWlzZSkpe1xyXG5cdFx0XHRjaGlsZCA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdFx0XHRwYXJlbnQudGhlbigocmVzOiBhbnkpID0+IHJlc29sdmUoX2Nsb25lKHJlcywgZGVwdGggLSAxKSkpXHJcblx0XHRcdFx0LmNhdGNoKChlcnI6IGFueSk9PiByZWplY3QoX2Nsb25lKGVyciwgZGVwdGggLSAxKSkpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKF9pc0FycmF5KHBhcmVudCkpIGNoaWxkID0gW107XHJcblx0XHRlbHNlIGlmIChfaXNSZWdFeHAocGFyZW50KSl7XHJcblx0XHRcdGNoaWxkID0gbmV3IFJlZ0V4cChwYXJlbnQuc291cmNlLCBfZ2V0UmVnRXhwRmxhZ3MocGFyZW50KSk7XHJcblx0XHRcdGlmIChwYXJlbnQubGFzdEluZGV4KSBjaGlsZC5sYXN0SW5kZXggPSBwYXJlbnQubGFzdEluZGV4O1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoX2lzRGF0ZShwYXJlbnQpKSBjaGlsZCA9IG5ldyBEYXRlKHBhcmVudC5nZXRUaW1lKCkpO1xyXG5cdFx0ZWxzZSBpZiAodXNlQnVmZmVyICYmIEJ1ZmZlci5pc0J1ZmZlcihwYXJlbnQpKXtcclxuXHRcdFx0aWYgKEJ1ZmZlci5mcm9tKSBjaGlsZCA9IEJ1ZmZlci5mcm9tKHBhcmVudCk7IC8vTm9kZS5qcyA+PSA1LjEwLjBcclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0Y2hpbGQgPSBuZXcgQnVmZmVyKHBhcmVudC5sZW5ndGgpOyAvL09sZGVyIE5vZGUuanMgdmVyc2lvbnNcclxuXHRcdFx0XHRwYXJlbnQuY29weShjaGlsZCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGNoaWxkO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoX2luc3RhbmNlb2YocGFyZW50LCBFcnJvcikpIGNoaWxkID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQpO1xyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdGlmICgnb2JqZWN0JyAhPT0gdHlwZW9mIHByb3RvdHlwZSl7XHJcblx0XHRcdFx0cHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocGFyZW50KTtcclxuXHRcdFx0XHRjaGlsZCA9IE9iamVjdC5jcmVhdGUocHJvdG8pO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdGNoaWxkID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUpO1xyXG5cdFx0XHRcdHByb3RvID0gcHJvdG90eXBlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRpZiAoY2lyY3VsYXIpe1xyXG5cdFx0XHRjb25zdCBpbmRleCA9IGFsbFBhcmVudHMuaW5kZXhPZihwYXJlbnQpO1xyXG5cdFx0XHRpZiAoaW5kZXggIT09IC0xKSByZXR1cm4gYWxsQ2hpbGRyZW5baW5kZXhdO1xyXG5cdFx0XHRhbGxQYXJlbnRzLnB1c2gocGFyZW50KTtcclxuXHRcdFx0YWxsQ2hpbGRyZW4ucHVzaChjaGlsZCk7XHJcblx0XHR9XHJcblx0XHRpZiAoX2luc3RhbmNlb2YocGFyZW50LCBNYXApKXtcclxuXHRcdFx0Zm9yIChjb25zdCBba2V5LCB2YWxdIG9mIHBhcmVudCl7XHJcblx0XHRcdFx0Y29uc3Qga2V5Q2hpbGQgPSBfY2xvbmUoa2V5LCBkZXB0aCAtIDEpO1xyXG5cdFx0XHRcdGNvbnN0IHZhbENoaWxkID0gX2Nsb25lKHZhbCwgZGVwdGggLSAxKTtcclxuXHRcdFx0XHRjaGlsZC5zZXQoa2V5Q2hpbGQsIHZhbENoaWxkKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0aWYgKF9pbnN0YW5jZW9mKHBhcmVudCwgU2V0KSl7XHJcblx0XHRcdGZvciAoY29uc3QgdmFsIG9mIHBhcmVudCl7XHJcblx0XHRcdFx0Y29uc3QgdmFsQ2hpbGQgPSBfY2xvbmUodmFsLCBkZXB0aCAtIDEpO1xyXG5cdFx0XHRcdGNoaWxkLmFkZCh2YWxDaGlsZCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGZvciAobGV0IGtleSBpbiBwYXJlbnQpe1xyXG5cdFx0XHRjb25zdCBhdHRycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocGFyZW50LCBrZXkpO1xyXG5cdFx0XHRpZiAoYXR0cnMpIGNoaWxkW2tleV0gPSBfY2xvbmUocGFyZW50W2tleV0sIGRlcHRoIC0gMSk7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0Y29uc3Qgb2JqUHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHBhcmVudCwga2V5KTtcclxuXHRcdFx0XHRpZiAob2JqUHJvcGVydHk/LnNldCA9PT0gdW5kZWZpbmVkKSBjb250aW51ZTtcclxuXHRcdFx0XHRjaGlsZFtrZXldID0gX2Nsb25lKHBhcmVudFtrZXldLCBkZXB0aCAtIDEpO1xyXG5cdFx0XHRcdGlmIChvYmpQcm9wZXJ0eSkgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNoaWxkLCBrZXksIG9ialByb3BlcnR5KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjYXRjaCAoZSl7XHJcblx0XHRcdFx0aWYgKGUgaW5zdGFuY2VvZiBUeXBlRXJyb3IpIGNvbnRpbnVlOyAvL2NoaWxkW2tleV0gb25seSBoYXMgZ2V0dGVyIChzdHJpY3QgbW9kZSlcclxuXHRcdFx0XHRlbHNlIGlmIChlIGluc3RhbmNlb2YgUmVmZXJlbmNlRXJyb3IpIGNvbnRpbnVlOyAvL3NhbWUgYXMgYWJvdmUgKG5vbiBzdHJpY3QgbW9kZSlcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe1xyXG5cdFx0XHRjb25zdCBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhwYXJlbnQpO1xyXG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpICsrKXtcclxuXHRcdFx0XHRjb25zdCBzeW1ib2wgPSBzeW1ib2xzW2ldOyAvL3ByaW1pdGl2ZVxyXG5cdFx0XHRcdGNvbnN0IGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHBhcmVudCwgc3ltYm9sKTtcclxuXHRcdFx0XHRpZiAoZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci5lbnVtZXJhYmxlICYmICFub25fZW51bWVyYWJsZSkgY29udGludWU7XHJcblx0XHRcdFx0Y2hpbGRbc3ltYm9sXSA9IF9jbG9uZShwYXJlbnRbc3ltYm9sXSwgZGVwdGggLSAxKTtcclxuXHRcdFx0XHRpZiAoZGVzY3JpcHRvcikgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNoaWxkLCBzeW1ib2wsIGRlc2NyaXB0b3IpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRpZiAobm9uX2VudW1lcmFibGUpe1xyXG5cdFx0XHRjb25zdCBhbGxQcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocGFyZW50KTtcclxuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhbGxQcm9wZXJ0eU5hbWVzLmxlbmd0aDsgaSArKyl7XHJcblx0XHRcdFx0Y29uc3QgcHJvcGVydHlOYW1lID0gYWxsUHJvcGVydHlOYW1lc1tpXTtcclxuXHRcdFx0XHRjb25zdCBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXJlbnQsIHByb3BlcnR5TmFtZSk7XHJcblx0XHRcdFx0aWYgKGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlKSBjb250aW51ZTtcclxuXHRcdFx0XHRjaGlsZFtwcm9wZXJ0eU5hbWVdID0gX2Nsb25lKHBhcmVudFtwcm9wZXJ0eU5hbWVdLCBkZXB0aCAtIDEpO1xyXG5cdFx0XHRcdGlmIChkZXNjcmlwdG9yKSBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2hpbGQsIHByb3BlcnR5TmFtZSwgZGVzY3JpcHRvcik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiBjaGlsZDtcclxuXHR9O1xyXG5cclxuXHQvL3Jlc3VsdFxyXG5cdHJldHVybiBfY2xvbmUodmFsdWUsIGRlcHRoKSBhcyBUO1xyXG59OyIsIi8qKlxyXG4gKiBDb21wYXJlIG11bHRpcGxlIHZhbHVlcyB3aXRoIGRlZXAgbWF0Y2hpbmdcclxuICogLSBjb21wYXJlVGFyZ2V0XHQ9IGBhcmdzWzBdYFxyXG4gKiAtIGNvbXBhcmVXaXRoXHQ9IGBhcmdzWzEqXWBcclxuICogXHJcbiAqIEByZXR1cm5zIGBib29sZWFuYCBpcyBtYXRjaFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9jb21wYXJlID0gKC4uLmFyZ3M6IGFueVtdKTogYm9vbGVhbiA9PiB7XHJcblx0bGV0IGxlZnRDaGFpbjogYW55W10gPSBbXTtcclxuXHRsZXQgcmlnaHRDaGFpbjogYW55W10gPSBbXTtcclxuXHRcclxuXHQvL2NoZWNrIGFyZ3VtZW50c1xyXG5cdGlmIChhcmdzLmxlbmd0aCA8IDEpe1xyXG5cdFx0Y29uc29sZS53YXJuKGAke2FyZ3MubGVuZ3RoID8gJ0xlc3MgdGhhbiB0d28nIDogJ05vJ30gXFxgX2NvbXBhcmVcXGAgYXJndW1lbnRzIHByb3ZpZGVkLmApO1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxuXHQvL2NvbXBhcmUgdmFsdWVzXHJcblx0Zm9yIChsZXQgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSArKyl7XHJcblx0XHRsZWZ0Q2hhaW4gPSBbXTtcclxuXHRcdHJpZ2h0Q2hhaW4gPSBbXTtcclxuXHRcdGlmICghZGVlcE1hdGNoKGFyZ3NbMF0sIGFyZ3NbaV0pKSByZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cdHJldHVybiB0cnVlO1xyXG5cclxuXHQvL2RlZXAgY29tcGFyZSB0d28gaXRlbXNcclxuXHRmdW5jdGlvbiBkZWVwTWF0Y2goYTogYW55LCBiOiBhbnkpOiBib29sZWFuIHtcclxuXHRcdFxyXG5cdFx0Ly9Ob3RlIHRoYXQgTmFOID09PSBOYU4gcmV0dXJucyBmYWxzZSBhbmQgaXNOYU4odW5kZWZpbmVkKSByZXR1cm5zIHRydWVcclxuXHRcdGlmICgnbnVtYmVyJyA9PT0gdHlwZW9mIGEgJiYgJ251bWJlcicgPT09IHR5cGVvZiBiICYmIGlzTmFOKGEpICYmIGlzTmFOKGIpKSByZXR1cm4gdHJ1ZTtcclxuXHJcblx0XHQvL0NoZWNrIGlmIGJvdGggYXJndW1lbnRzIGxpbmsgdG8gdGhlIHNhbWUgb2JqZWN0LlxyXG5cdFx0aWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xyXG5cclxuXHRcdC8vQ2hlY2sgZnVuY3Rpb25zIGluIGNhc2Ugd2hlbiBmdW5jdGlvbnMgYXJlIGNyZWF0ZWQgaW4gY29uc3RydWN0b3IgKGkuZS4gZGF0ZXMsIGJ1aWx0LWlucylcclxuXHRcdGlmIChcclxuXHRcdFx0KCdmdW5jdGlvbicgPT09IHR5cGVvZiBhICYmICdmdW5jdGlvbicgPT09IHR5cGVvZiBiKVxyXG5cdFx0XHR8fCAoYSBpbnN0YW5jZW9mIERhdGUgJiYgYiBpbnN0YW5jZW9mIERhdGUpXHJcblx0XHRcdHx8IChhIGluc3RhbmNlb2YgUmVnRXhwICYmIGIgaW5zdGFuY2VvZiBSZWdFeHApXHJcblx0XHRcdHx8IChhIGluc3RhbmNlb2YgU3RyaW5nICYmIGIgaW5zdGFuY2VvZiBTdHJpbmcpXHJcblx0XHRcdHx8IChhIGluc3RhbmNlb2YgTnVtYmVyICYmIGIgaW5zdGFuY2VvZiBOdW1iZXIpXHJcblx0XHQpIHJldHVybiBhLnRvU3RyaW5nKCkgPT09IGIudG9TdHJpbmcoKTtcclxuXHJcblx0XHQvL0NoZWNrIHByb3RvdHlwZXNcclxuXHRcdGlmICghKGEgaW5zdGFuY2VvZiBPYmplY3QgJiYgYiBpbnN0YW5jZW9mIE9iamVjdCkpIHJldHVybiBmYWxzZTtcclxuXHRcdGlmIChhLmlzUHJvdG90eXBlT2YoYikgfHwgYi5pc1Byb3RvdHlwZU9mKGEpKSByZXR1cm4gZmFsc2U7XHJcblx0XHRpZiAoYS5jb25zdHJ1Y3RvciAhPT0gYi5jb25zdHJ1Y3RvcikgcmV0dXJuIGZhbHNlO1xyXG5cdFx0aWYgKGEucHJvdG90eXBlICE9PSBiLnByb3RvdHlwZSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdC8vQ2hlY2sgZm9yIGluZmluaXRpdmUgbGlua2luZyBsb29wc1xyXG5cdFx0aWYgKGxlZnRDaGFpbi5pbmRleE9mKGEpID4gLTEgfHwgcmlnaHRDaGFpbi5pbmRleE9mKGIpID4gLTEpIHJldHVybiBmYWxzZTtcclxuXHJcblx0XHQvL0NoZWNrIGIgcHJvcHMgaW4gYVxyXG5cdFx0Zm9yIChsZXQga2V5IGluIGIpe1xyXG5cdFx0XHRpZiAoYi5oYXNPd25Qcm9wZXJ0eShrZXkpID09PSBhLmhhc093blByb3BlcnR5KGtleSkpe1xyXG5cdFx0XHRcdGlmICh0eXBlb2YgYltrZXldICE9PSB0eXBlb2YgYVtrZXldKSByZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvL0NoZWNrIGEgcHJvcHMgaW4gYlxyXG5cdFx0Zm9yIChsZXQga2V5IGluIGEpe1xyXG5cdFx0XHRpZiAoYi5oYXNPd25Qcm9wZXJ0eShrZXkpICE9PSBhLmhhc093blByb3BlcnR5KGtleSkpIHJldHVybiBmYWxzZTtcclxuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGJba2V5XSAhPT0gdHlwZW9mIGFba2V5XSkgcmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRsZXQgdmFsX2EgPSBhW2tleV07XHJcblx0XHRcdGxldCB2YWxfYiA9IGJba2V5XTtcclxuXHRcdFx0c3dpdGNoICh0eXBlb2YgdmFsX2Epe1xyXG5cdFx0XHRcdGNhc2UgJ29iamVjdCc6XHJcblx0XHRcdFx0Y2FzZSAnZnVuY3Rpb24nOlxyXG5cdFx0XHRcdFx0bGVmdENoYWluLnB1c2goYSk7XHJcblx0XHRcdFx0XHRyaWdodENoYWluLnB1c2goYik7XHJcblx0XHRcdFx0XHRpZiAoIWRlZXBNYXRjaCh2YWxfYSwgdmFsX2IpKSByZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHRsZWZ0Q2hhaW4ucG9wKCk7XHJcblx0XHRcdFx0XHRyaWdodENoYWluLnBvcCgpO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRpZiAodmFsX2EgIT09IHZhbF9iKSByZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vbWF0Y2hlZFxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG59IiwiLyoqXHJcbiAqIENvbXBhcmUgbXVsdGlwbGUgdmFsdWVzIHdpdGggc2hhbGxvdyBtYXRjaGluZ1xyXG4gKiAtIGNvbXBhcmVUYXJnZXRcdD0gYGFyZ3NbMF1gXHJcbiAqIC0gY29tcGFyZVdpdGhcdD0gYGFyZ3NbMSpdYFxyXG4gKiBcclxuICogQHBhcmFtIGEgIENvbXBhcmUgdmFsdWUgMVxyXG4gKiBAcmV0dXJucyBgYm9vbGVhbmAgaXMgbWF0Y2hcclxuICovXHJcbmV4cG9ydCBjb25zdCBfY29tcGFyZVNoYWxsb3cgPSAoLi4uYXJnczogYW55W10pOiBib29sZWFuID0+IHtcclxuXHJcblx0Ly9jaGVjayB2YWx1ZXNcclxuXHRpZiAoYXJncy5sZW5ndGggPCAxKXtcclxuXHRcdGNvbnNvbGUud2FybihgJHthcmdzLmxlbmd0aCA/ICdMZXNzIHRoYW4gdHdvJyA6ICdObyd9IFxcYF9jb21wYXJlU2hhbGxvd1xcYCBhcmd1bWVudHMgcHJvdmlkZWQuYCk7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdC8vY29tcGFyZSB2YWx1ZXNcclxuXHRmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyBpICsrKXtcclxuXHRcdGlmICghc2hhbGxvd01hdGNoKGFyZ3NbMF0sIGFyZ3NbaV0pKSByZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cdHJldHVybiB0cnVlO1xyXG5cdFxyXG5cdC8vc2hhbGxvdyBjb21wYXJlIHR3byBpdGVtc1xyXG5cdGZ1bmN0aW9uIHNoYWxsb3dNYXRjaChhOiBhbnksIGI6IGFueSk6IGJvb2xlYW4ge1xyXG5cdFx0aWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xyXG5cdFx0aWYgKCEoYSBpbnN0YW5jZW9mIE9iamVjdCkgfHwgIShiIGluc3RhbmNlb2YgT2JqZWN0KSkgcmV0dXJuIGZhbHNlO1xyXG5cdFx0aWYgKGEuY29uc3RydWN0b3IgIT09IGIuY29uc3RydWN0b3IpIHJldHVybiBmYWxzZTtcclxuXHRcdGZvciAobGV0IGsgaW4gYSl7XHJcblx0XHRcdGlmICghYS5oYXNPd25Qcm9wZXJ0eShrKSkgY29udGludWU7XHJcblx0XHRcdGlmICghYi5oYXNPd25Qcm9wZXJ0eShrKSkgcmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRpZiAoYVtrXSA9PT0gYltrXSkgY29udGludWU7XHJcblx0XHRcdGlmICgnb2JqZWN0JyAhPT0gdHlwZW9mKGFba10pKSByZXR1cm4gZmFsc2U7XHJcblx0XHRcdGlmICghc2hhbGxvd01hdGNoKGFba10sIGJba10pKSByZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcbn07IiwiLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBzaW1wbGUgZGF0ZSBoZWxwZXJzIC0gY29uc2lkZXIgdXNlZnVsIGxpYnJhcmllczogaHR0cHM6Ly9tb21lbnRqcy5jb20vIFxyXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5pbXBvcnQgeyBfc3RyIH0gZnJvbSAnLi9fc3RyaW5nJztcclxuaW1wb3J0IHsgX3Bvc0ludCB9IGZyb20gJy4vX251bWJlcic7XHJcbmltcG9ydCB7IF9lbXB0eSB9IGZyb20gJy4vX29iamVjdHMnO1xyXG5cclxuLyoqXHJcbiAqIERhdGUgdGltZSBsb2NhbGVzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgRGF0ZUxvY2FsZXMgPSB7XHJcblx0bW9udGhOYW1lczogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ10sXHJcblx0ZGF5TmFtZXM6IFsnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknLCAnU2F0dXJkYXknXSxcclxuXHRBTTogJ0FNJyxcclxuXHRQTTogJ1BNJ1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFBhcnNlIGBEYXRlYCB2YWx1ZVxyXG4gKiAtIGlnbm9yZXMgZW1wdHkgb3IgbmlsIHZhbHVlIChpLmUuIGB1bmRlZmluZWRgfGBudWxsYHwwfGAnJ2ApXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgLSBwYXJzZSBkYXRlIHZhbHVlXHJcbiAqIEBwYXJhbSBfZGVmYXVsdCAtIGRlZmF1bHQgZGF0ZSB2YWx1ZSB3aGVuIGludmFsaWQgKGB0cnVlYCA9PiBgbmV3IERhdGUoKWApXHJcbiAqIEByZXR1cm5zIGBEYXRlYCBpbnN0YW5jZSB8IGB1bmRlZmluZWRgIHdoZW4gaW52YWxpZFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9kYXRlID0gKHZhbHVlOiBhbnksIF9kZWZhdWx0PzogYW55KTogRGF0ZXx1bmRlZmluZWQgPT4ge1xyXG5cdGxldCBkYXRlOiBEYXRlfHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuXHRpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSBkYXRlID0gdmFsdWU7XHJcblx0ZWxzZSBpZiAoIV9lbXB0eSh2YWx1ZSwgdHJ1ZSkpe1xyXG5cdFx0aWYgKCdudW1iZXInID09PSB0eXBlb2YgdmFsdWUpIGRhdGUgPSBuZXcgRGF0ZSh2YWx1ZSk7XHJcblx0XHRlbHNlIGlmICgodmFsdWUgPSBfc3RyKHZhbHVlLCB0cnVlKSkgJiYgIWlzTmFOKHZhbHVlID0gRGF0ZS5wYXJzZSh2YWx1ZSkpKSBkYXRlID0gbmV3IERhdGUodmFsdWUpO1xyXG5cdH1cclxuXHRjb25zdCBfZ2V0X2RlZmF1bHQgPSAoKTogRGF0ZXx1bmRlZmluZWQgPT4ge1xyXG5cdFx0aWYgKF9lbXB0eShfZGVmYXVsdCkpIHJldHVybiB1bmRlZmluZWQ7XHJcblx0XHRpZiAoX2RlZmF1bHQgPT09IHRydWUpIHJldHVybiBuZXcgRGF0ZSgpO1xyXG5cdFx0cmV0dXJuIF9kYXRlKF9kZWZhdWx0KTtcclxuXHR9O1xyXG5cdHJldHVybiBkYXRlICYmICFpc05hTihkYXRlLmdldFRpbWUoKSkgPyBkYXRlIDogX2dldF9kZWZhdWx0KCk7XHJcbn07XHJcblxyXG4vKipcclxuICogR2V0IHRvZGF5J3MgYERhdGVgIGluc3RhbmNlIGF0IG1pZG5pZ2h0XHJcbiAqIC0gaS5lLiBgbmV3IERhdGUobmV3IERhdGUoKS5nZXRGdWxsWWVhcigpLCBuZXcgRGF0ZSgpLmdldE1vbnRoKCksIG5ldyBEYXRlKCkuZ2V0RGF0ZSgpLCAwLCAwLCAwLCAwKSlgXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgLSBwYXJzZSBkYXRlIHZhbHVlXHJcbiAqIEByZXR1cm5zIGBEYXRlYCBpbnN0YW5jZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF90b2RheSA9ICgpOiBEYXRlID0+IHtcclxuXHRjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcclxuXHRyZXR1cm4gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCAwLCAwLCAwLCAwKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXQgYERhdGVgIG1pZG5pZ2h0IHZhbHVlXHJcbiAqIFxyXG4gKiBAZXhhbXBsZVxyXG4gKiBfbWlkbmlnaHQoJzIwMjMtMTAtMDUgMjM6MTg6NTInKSA9PiAnMjAyMy0xMC0wNSAwMDowMDowMCdcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAtIHBhcnNlIGRhdGUgdmFsdWUgKGB1bmRlZmluZWRgID0+IGBuZXcgRGF0ZSgpYCkgfiBgdmFsdWUgPz8gbmV3IERhdGUoKWBcclxuICogQHBhcmFtIF9kZWZhdWx0IC0gZGVmYXVsdCBkYXRlIHZhbHVlIHdoZW4gaW52YWxpZCAoYHRydWVgID0+IGBuZXcgRGF0ZSgpYClcclxuICogQHJldHVybnMgYERhdGVgIGluc3RhbmNlIHwgYHVuZGVmaW5lZGAgd2hlbiBpbnZhbGlkXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX21pZG5pZ2h0ID0gKHZhbHVlOiBhbnksIF9kZWZhdWx0PzogYW55KTogRGF0ZXx1bmRlZmluZWQgPT4ge1xyXG5cdGNvbnN0IGRhdGU6IERhdGV8dW5kZWZpbmVkID0gX2RhdGUodmFsdWUgPz8gbmV3IERhdGUoKSwgX2RlZmF1bHQpO1xyXG5cdGlmICghZGF0ZSkgcmV0dXJuIHVuZGVmaW5lZDtcclxuXHRyZXR1cm4gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCAwLCAwLCAwLCAwKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXQgYERhdGVgIG1pZG5pZ2h0IHZhbHVlIHllc3RlcmRheSB+ICoqLTEgREFZKiogXHJcbiAqIFxyXG4gKiBAZXhhbXBsZVxyXG4gKiBfeWVzdGVyZGF5KCcyMDIzLTEwLTA1IDIzOjE4OjUyJykgPT4gJzIwMjMtMTAtMDQgMDA6MDA6MDAnXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgLSBwYXJzZSBkYXRlIHZhbHVlIChgdW5kZWZpbmVkYCA9PiBgbmV3IERhdGUoKWApIH4gYHZhbHVlID8/IG5ldyBEYXRlKClgXHJcbiAqIEBwYXJhbSBfZGVmYXVsdCAtIGRlZmF1bHQgZGF0ZSB2YWx1ZSB3aGVuIGludmFsaWQgKGB0cnVlYCA9PiBgbmV3IERhdGUoKWApXHJcbiAqIEByZXR1cm5zIGBEYXRlYCBpbnN0YW5jZSB8IGB1bmRlZmluZWRgIHdoZW4gaW52YWxpZFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF95ZXN0ZXJkYXkgPSAodmFsdWU/OiBhbnksIF9kZWZhdWx0PzogYW55KTogRGF0ZXx1bmRlZmluZWQgPT4ge1xyXG5cdGNvbnN0IGRhdGU6IERhdGV8dW5kZWZpbmVkID0gX2RhdGUodmFsdWUgPz8gbmV3IERhdGUoKSwgX2RlZmF1bHQpO1xyXG5cdGlmICghZGF0ZSkgcmV0dXJuIHVuZGVmaW5lZDtcclxuXHRyZXR1cm4gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpIC0gMSwgMCwgMCwgMCwgMCk7XHJcbn07XHJcblxyXG4vKipcclxuICogR2V0IGBEYXRlYCB2YWx1ZSBhdCBtaWRuaWdodCB0b21vcnJvdyB+ICoqKzEgREFZKiogXHJcbiAqIFxyXG4gKiBAZXhhbXBsZVxyXG4gKiBfdG9tb3Jyb3coJzIwMjMtMTAtMDUgMjM6MTg6NTInKSA9PiAnMjAyMy0xMC0wNiAwMDowMDowMCdcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAtIHBhcnNlIGRhdGUgdmFsdWUgKGB1bmRlZmluZWRgID0+IGBuZXcgRGF0ZSgpYCkgfiBgdmFsdWUgPz8gbmV3IERhdGUoKWBcclxuICogQHBhcmFtIF9kZWZhdWx0IC0gZGVmYXVsdCBkYXRlIHZhbHVlIHdoZW4gaW52YWxpZCAoYHRydWVgID0+IGBuZXcgRGF0ZSgpYClcclxuICogQHJldHVybnMgYERhdGVgIGluc3RhbmNlIHwgYHVuZGVmaW5lZGAgd2hlbiBpbnZhbGlkXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3RvbW9ycm93ID0gKHZhbHVlPzogYW55LCBfZGVmYXVsdD86IGFueSk6IERhdGV8dW5kZWZpbmVkID0+IHtcclxuXHRjb25zdCBkYXRlOiBEYXRlfHVuZGVmaW5lZCA9IF9kYXRlKHZhbHVlLCBfZGVmYXVsdCk7XHJcblx0aWYgKCFkYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xyXG5cdHJldHVybiBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkgKyAxLCAwLCAwLCAwLCAwKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXQgYERhdGVgIHZhbHVlIGF0IG1pZG5pZ2h0ICoqZmlyc3QqKiBkYXkgb2YgdGhlIG1vbnRoXHJcbiAqIFxyXG4gKiBAZXhhbXBsZVxyXG4gKiBfbW9udGhTdGFydCgnMjAyMy0xMC0wNSAyMzoxODo1MicpID0+ICcyMDIzLTEwLTAxIDAwOjAwOjAwJ1xyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlIC0gcGFyc2UgZGF0ZSB2YWx1ZSAoYHVuZGVmaW5lZGAgPT4gYG5ldyBEYXRlKClgKSB+IGB2YWx1ZSA/PyBuZXcgRGF0ZSgpYFxyXG4gKiBAcGFyYW0gX2RlZmF1bHQgLSBkZWZhdWx0IGRhdGUgdmFsdWUgd2hlbiBpbnZhbGlkIChgdHJ1ZWAgPT4gYG5ldyBEYXRlKClgKVxyXG4gKiBAcmV0dXJucyBgRGF0ZWAgaW5zdGFuY2UgfCBgdW5kZWZpbmVkYCB3aGVuIGludmFsaWRcclxuICovXHJcbmV4cG9ydCBjb25zdCBfbW9udGhTdGFydCA9ICh2YWx1ZT86IGFueSwgX2RlZmF1bHQ/OiBhbnkpOiBEYXRlfHVuZGVmaW5lZCA9PiB7XHJcblx0Y29uc3QgZGF0ZTogRGF0ZXx1bmRlZmluZWQgPSBfZGF0ZSh2YWx1ZSwgX2RlZmF1bHQpO1xyXG5cdGlmICghZGF0ZSkgcmV0dXJuIHVuZGVmaW5lZDtcclxuXHRyZXR1cm4gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIDEsIDAsIDAsIDAsIDApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCBgRGF0ZWAgdmFsdWUgKipsYXN0KiogZGF5IG9mIHRoZSBtb250aCB+IGp1c3QgYmVmb3JlIG1pZG5pZ2h0IChpLmUuIHRpbWUgYDIzOjU5OjU5IDk5OWApXHJcbiAqIFxyXG4gKiBAZXhhbXBsZVxyXG4gKiBfbW9udGhFbmQoJzIwMjItMDItMTYgMjM6MTg6NTInKSA9PiAnMjAyMi0wMi0yOCAyMzo1OTo1OSdcclxuICogX21vbnRoRW5kKCcyMDIwLTAyLTE2IDIzOjE4OjUyJykgPT4gJzIwMjAtMDItMjkgMjM6NTk6NTknXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgLSBwYXJzZSBkYXRlIHZhbHVlIChgdW5kZWZpbmVkYCA9PiBgbmV3IERhdGUoKWApIH4gYHZhbHVlID8/IG5ldyBEYXRlKClgXHJcbiAqIEBwYXJhbSBfZGVmYXVsdCAtIGRlZmF1bHQgZGF0ZSB2YWx1ZSB3aGVuIGludmFsaWQgKGB0cnVlYCA9PiBgbmV3IERhdGUoKWApXHJcbiAqIEByZXR1cm5zIGBEYXRlYCBpbnN0YW5jZSB8IGB1bmRlZmluZWRgIHdoZW4gaW52YWxpZFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9tb250aEVuZCA9ICh2YWx1ZT86IGFueSwgX2RlZmF1bHQ/OiBhbnkpOiBEYXRlfHVuZGVmaW5lZCA9PiB7XHJcblx0Y29uc3QgZGF0ZTogRGF0ZXx1bmRlZmluZWQgPSBfZGF0ZSh2YWx1ZSwgX2RlZmF1bHQpO1xyXG5cdGlmICghZGF0ZSkgcmV0dXJuIHVuZGVmaW5lZDtcclxuXHRyZXR1cm4gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCkgKyAxLCAwLCAyMywgNTksIDU5LCA5OTkpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCBgRGF0ZWAgdmFsdWUgbW9udGggZGF5cyBjb3VudCB+IG1vbnRoJ3MgbGFzdCBkYXRlXHJcbiAqIFxyXG4gKiBAZXhhbXBsZVxyXG4gKiBfbW9udGhEYXlzKCcyMDIyLTAyLTE2IDIzOjE4OjUyJykgPT4gMjhcclxuICogX21vbnRoRGF5cygnMjAyMC0wMi0xNiAyMzoxODo1MicpID0+IDI5XHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgLSBwYXJzZSBkYXRlIHZhbHVlIChgdW5kZWZpbmVkYCA9PiBgbmV3IERhdGUoKWApIH4gYHZhbHVlID8/IG5ldyBEYXRlKClgXHJcbiAqIEBwYXJhbSBfZGVmYXVsdCAtIGRlZmF1bHQgZGF0ZSB2YWx1ZSB3aGVuIGludmFsaWQgKGB0cnVlYCA9PiBgbmV3IERhdGUoKWApXHJcbiAqIEByZXR1cm5zIGBudW1iZXJgIGxhc3QgZGF0ZSB8IGB1bmRlZmluZWRgIHdoZW4gaW52YWxpZFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9tb250aERheXMgPSAodmFsdWU/OiBhbnksIF9kZWZhdWx0PzogYW55KTogbnVtYmVyfHVuZGVmaW5lZCA9PiB7XHJcblx0Y29uc3QgZGF0ZTogRGF0ZXx1bmRlZmluZWQgPSBfZGF0ZSh2YWx1ZSwgX2RlZmF1bHQpO1xyXG5cdGlmICghZGF0ZSkgcmV0dXJuIHVuZGVmaW5lZDtcclxuXHRjb25zdCBsYXN0ID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCkgKyAxLCAwLCAwLCAwLCAwLCAwKTtcclxuXHRyZXR1cm4gbGFzdC5nZXREYXRlKCk7XHJcbn07XHJcblxyXG4vKipcclxuICogR2V0IHBhcnNlZCBgRGF0ZWAgdmFsdWUgdGltZSBtaWxsaXNlY29uZHMgKGkuZS4gYGRhdGUuZ2V0VGltZSgpYClcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAtIHBhcnNlIGRhdGUgdmFsdWVcclxuICogQHBhcmFtIG1pbiAtIHNldCBgbWluYCB0aW1lc3RhbXAgbGltaXQgfiBlbmFibGVkIHdoZW4gYG1pbmAgaXMgYSB2YWxpZCB0aW1lc3RhbXAgaW50ZWdlclxyXG4gKiBAcGFyYW0gbWF4IC0gc2V0IGBtYXhgIHRpbWVzdGFtcCBsaW1pdCB+IGVuYWJsZWQgd2hlbiBgbWF4YCBpcyBhIHZhbGlkIHRpbWVzdGFtcCBpbnRlZ2VyXHJcbiAqIEBwYXJhbSBfZGVmYXVsdCAtIGRlZmF1bHQgZGF0ZSB2YWx1ZSB3aGVuIGludmFsaWQgKGB0cnVlYCA9PiBgbmV3IERhdGUoKWApXHJcbiAqIEByZXR1cm5zIGBudW1iZXJgIHRpbWVzdGFtcCBpbiBtaWxsaXNlY29uZHMgfCBgdW5kZWZpbmVkYCB3aGVuIGludmFsaWRcclxuICovXHJcbmV4cG9ydCBjb25zdCBfdGltZSA9ICh2YWx1ZTogYW55LCBtaW4/OiBudW1iZXIsIG1heD86IG51bWJlciwgX2RlZmF1bHQ/OiBhbnkpOiBudW1iZXJ8dW5kZWZpbmVkID0+IHtcclxuXHRsZXQgZGF0ZTogRGF0ZXx1bmRlZmluZWQsIHRpbWU6IG51bWJlcnx1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcblx0aWYgKChkYXRlID0gX2RhdGUodmFsdWUpKSAmJiBOdW1iZXIuaXNJbnRlZ2VyKHRpbWUgPSBfcG9zSW50KGRhdGUuZ2V0VGltZSgpLCBtaW4sIG1heCkpKSByZXR1cm4gdGltZTtcclxuXHRyZXR1cm4gKGRhdGUgPSBfZGF0ZShfZGVmYXVsdCkpICYmIE51bWJlci5pc0ludGVnZXIodGltZSA9IF9wb3NJbnQoZGF0ZS5nZXRUaW1lKCksIG1pbiwgbWF4KSkgPyB0aW1lIDogdW5kZWZpbmVkO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFZhbGlkYXRlIGBEYXRlYCBpbnN0YW5jZVxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlXHJcbiAqIEByZXR1cm5zIGBib29sZWFuYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9pc0RhdGUgPSAodmFsdWU6IGFueSk6IGJvb2xlYW4gPT4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlICYmICFpc05hTih2YWx1ZS5nZXRUaW1lKCkpO1xyXG5cclxuLyoqXHJcbiAqIFBhcnNlIGBEYXRlYCB2YWx1ZSB0byBgZGF0ZXRpbWVgIGZvcm1hdCAoaS5lLiBgMjAyMy0wNS0yNyAyMjoxMTo1N2AgfiBgWVlZWS1NTS1ERCBISDptbTpzc2ApXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgLSBwYXJzZSBkYXRlIHZhbHVlXHJcbiAqIEByZXR1cm5zXHJcbiAqIC0gYHN0cmluZ2AgfiBmb3JtYXR0ZWQgYFlZWVktTU0tREQgSEg6bW06c3NgXHJcbiAqIC0gYCcnYCB3aGVuIGRhdGUgdmFsdWUgaXMgaW52YWxpZFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9kYXRldGltZSA9ICh2YWx1ZTogYW55KTogc3RyaW5nID0+IHtcclxuXHRjb25zdCBkYXRlID0gX2RhdGUodmFsdWUpO1xyXG5cdGlmICghZGF0ZSkgcmV0dXJuICcnO1xyXG5cdGNvbnN0IHZhbHVlczogbnVtYmVyW10gPSBbXHJcblx0XHRkYXRlLmdldEZ1bGxZZWFyKCksIC8veXl5eVxyXG5cdFx0ZGF0ZS5nZXRNb250aCgpICsgMSwgLy9NTVxyXG5cdFx0ZGF0ZS5nZXREYXRlKCksIC8vZGRcclxuXHRcdGRhdGUuZ2V0SG91cnMoKSwgLy9ISFxyXG5cdFx0ZGF0ZS5nZXRNaW51dGVzKCksIC8vbW1cclxuXHRcdGRhdGUuZ2V0U2Vjb25kcygpLCAvL3NzXHJcblx0XTtcclxuXHRjb25zdCBwYWRkZWQ6IHN0cmluZ1tdID0gW107XHJcblx0Zm9yIChjb25zdCB2YWwgb2YgdmFsdWVzKSBwYWRkZWQucHVzaCgodmFsICsgJycpLnBhZFN0YXJ0KDIsICcwJykpOyAvL3BhZCB+IGAnMScgPT4gJzAxJ2BcclxuXHRyZXR1cm4gcGFkZGVkLnNwbGljZSgwLCAzKS5qb2luKCctJykgKyAnICcgKyBwYWRkZWQuam9pbignOicpOyAvL3RpbWVzdGFtcFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFBhcnNlIElTTyBmb3JtYXR0ZWQgZGF0ZSB2YWx1ZSB0byBtaWxsaXNlY29uZHMgdGltZXN0YW1wXHJcbiAqIC0gYm9ycm93ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vanF1ZW5zZS95dXAvYmxvYi8xZWU5YjIxYzk5NGI0MjkzZjNhYjMzODExOWRjMTdhYjJmNGUyODRjL3NyYy91dGlsL3BhcnNlSXNvRGF0ZS50c1xyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlIC0gSVNPIGRhdGUgYHN0cmluZ2AgKGkuZS4gYCcyMDIyLTEyLTE5VDEzOjEyOjQyLjAwMCswMDAwJ2AvYCcyMDIyLTEyLTE5VDEzOjEyOjQyLjAwMFonYCA9PiBgMTY3MTQ1NTU2MjAwMGApXHJcbiAqIEByZXR1cm5zXHJcbiAqIC0gYG51bWJlcmAgbWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxyXG4gKiAtIGB1bmRlZmluZWRgIHdoZW4gaW52YWxpZFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9wYXJzZUlzbyA9ICh2YWx1ZTogc3RyaW5nKTogbnVtYmVyfHVuZGVmaW5lZCA9PiB7XHJcblx0Ly8gICAgICAgICAgICAgICAgMSBZWVlZICAgICAgICAgICAgICAgIDIgTU0gICAgICAgIDMgREQgICAgICAgICAgICAgIDQgSEggICAgIDUgbW0gICAgICAgIDYgc3MgICAgICAgICAgIDcgbXNlYyAgICAgICAgIDggWiA5IMKxICAgMTAgdHpISCAgICAxMSB0em1tXHJcblx0Y29uc3QgcmVnZXggID0gL14oXFxkezR9fFsrLV1cXGR7Nn0pKD86LT8oXFxkezJ9KSg/Oi0/KFxcZHsyfSkpPyk/KD86WyBUXT8oXFxkezJ9KTo/KFxcZHsyfSkoPzo6PyhcXGR7Mn0pKD86WywuXShcXGR7MSx9KSk/KT8oPzooWil8KFsrLV0pKFxcZHsyfSkoPzo6PyhcXGR7Mn0pKT8pPyk/JC87XHJcblx0bGV0IHN0cnVjdDogYW55LCB0aW1lc3RhbXA6IG51bWJlciA9IE5hTjtcclxuXHRpZiAoc3RydWN0ID0gcmVnZXguZXhlYyh2YWx1ZSA9IF9zdHIodmFsdWUsIHRydWUpKSl7XHJcblx0XHRmb3IgKGNvbnN0IGsgb2YgWzEsIDQsIDUsIDYsIDcsIDEwLCAxMV0pIHN0cnVjdFtrXSA9ICtzdHJ1Y3Rba10gfHwgMDsgLy9hbGxvdyB1bmRlZmluZWQgZGF5cyBhbmQgbW9udGhzXHJcblx0XHRzdHJ1Y3RbMl0gPSAoK3N0cnVjdFsyXXx8MSkgLSAxO1xyXG5cdFx0c3RydWN0WzNdID0gK3N0cnVjdFszXXx8MTsgLy9hbGxvdyBhcmJpdHJhcnkgc3ViLXNlY29uZCBwcmVjaXNpb24gYmV5b25kIG1pbGxpc2Vjb25kc1xyXG5cdFx0c3RydWN0WzddID0gc3RydWN0WzddID8gU3RyaW5nKHN0cnVjdFs3XSkuc3Vic3RyaW5nKDAsIDMpIDogMDsgLy90aW1lc3RhbXBzIHdpdGhvdXQgdGltZXpvbmUgaWRlbnRpZmllcnMgc2hvdWxkIGJlIGNvbnNpZGVyZWQgbG9jYWwgdGltZVxyXG5cdFx0aWYgKChzdHJ1Y3RbOF0gPT09IHVuZGVmaW5lZCB8fCBzdHJ1Y3RbOF0gPT09ICcnKSAmJiAoc3RydWN0WzldID09PSB1bmRlZmluZWQgfHwgc3RydWN0WzldID09PSAnJykpe1xyXG5cdFx0XHR0aW1lc3RhbXAgPSArbmV3IERhdGUoc3RydWN0WzFdLCBzdHJ1Y3RbMl0sIHN0cnVjdFszXSwgc3RydWN0WzRdLCBzdHJ1Y3RbNV0sIHN0cnVjdFs2XSwgc3RydWN0WzddKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRsZXQgbWluX29mZnNldCA9IDA7XHJcblx0XHRcdGlmIChzdHJ1Y3RbOF0gIT09ICdaJyAmJiBzdHJ1Y3RbOV0gIT09IHVuZGVmaW5lZCl7XHJcblx0XHRcdFx0bWluX29mZnNldCA9IHN0cnVjdFsxMF0gKiA2MCArIHN0cnVjdFsxMV07XHJcblx0XHRcdFx0aWYgKHN0cnVjdFs5XSA9PT0gJysnKSBtaW5fb2Zmc2V0ID0gMCAtIG1pbl9vZmZzZXQ7XHJcblx0XHRcdH1cclxuXHRcdFx0dGltZXN0YW1wID0gRGF0ZS5VVEMoc3RydWN0WzFdLCBzdHJ1Y3RbMl0sIHN0cnVjdFszXSwgc3RydWN0WzRdLCBzdHJ1Y3RbNV0gKyBtaW5fb2Zmc2V0LCBzdHJ1Y3RbNl0sIHN0cnVjdFs3XSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdGVsc2UgdGltZXN0YW1wID0gRGF0ZS5wYXJzZSA/IERhdGUucGFyc2UodmFsdWUpIDogTmFOO1xyXG5cdHJldHVybiAhaXNOYU4odGltZXN0YW1wKSA/IHRpbWVzdGFtcCA6IHVuZGVmaW5lZDtcclxufTsiLCJpbXBvcnQgeyBib29sIH0gZnJvbSAnLi4vdHlwZXMnO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBkZWJvdW5jZWQgY2FsbGJhY2sgZnVuY3Rpb25cclxuICogXHJcbiAqIEBwYXJhbSBoYW5kbGVyICBUaHJvdHRsZWQgY2FsbGJhY2sgaGFuZGxlclxyXG4gKiBAcGFyYW0gZGVsYXkgIENhbGxiYWNrIGRlbGF5IG1pbGxpc2Vjb25kc1xyXG4gKiBAcGFyYW0gbWF4V2FpdCAgTWF4aW11bSBjYWxsYmFjayBkZWxheSBtaWxsaXNlY29uZHNcclxuICogQHBhcmFtIGltbWVkaWF0ZSAgRXhlY3V0ZSBjYWxsYmFjayBiZWZvcmUgZGVsYXlcclxuICogQHJldHVybnMgVGhyb3R0bGVkIGNhbGxiYWNrIGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2RlYm91Y2VkID0gKGhhbmRsZXI6ICguLi5hcmdzOiBhbnkpPT52b2lkLCBkZWxheTogbnVtYmVyID0gMjAwLCBtYXhXYWl0OiBudW1iZXIgPSAwLCBpbW1lZGlhdGU6IGJvb2wgPSBmYWxzZSk6ICgoLi4uYXJnczogYW55KT0+dm9pZCkgPT4ge1xyXG5cdGRlbGF5ID0gIWlzTmFOKGRlbGF5ID0gcGFyc2VGbG9hdChkZWxheSBhcyBhbnkpKSAmJiBkZWxheSA+PSAwID8gZGVsYXkgOiAyMDA7XHJcblx0bWF4V2FpdCA9ICFpc05hTihtYXhXYWl0ID0gcGFyc2VGbG9hdChtYXhXYWl0IGFzIGFueSkpICYmIG1heFdhaXQgPj0gMCAmJiBtYXhXYWl0ID4gZGVsYXkgPyBtYXhXYWl0IDogMDtcclxuXHRpbW1lZGlhdGUgPSAhIWltbWVkaWF0ZTtcclxuXHRsZXQgaW1tZWRpYXRlVGltZXI6IGFueSwgY2FsbFRpbWVyOiBhbnksIHdhaXRUaW1lcjogYW55LCBuZXh0Q2FsbDogW2NvbnRleHQ6IGFueSwgYXJnczogYW55W11dIHwgdW5kZWZpbmVkO1xyXG5cdGNvbnN0IGV4ZWN1dGUgPSAoaXNfaW1tZWRpYXRlPzpib29sKSA9PiB7XHJcblx0XHRsZXQgbmV4dCA9IG5leHRDYWxsO1xyXG5cdFx0bmV4dENhbGwgPSB1bmRlZmluZWQ7XHJcblx0XHRpZiAod2FpdFRpbWVyKXtcclxuXHRcdFx0Y2xlYXJUaW1lb3V0KHdhaXRUaW1lcik7XHJcblx0XHRcdHdhaXRUaW1lciA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdGlmIChjYWxsVGltZXIgJiYgIWlzX2ltbWVkaWF0ZSl7XHJcblx0XHRcdGNsZWFyVGltZW91dChjYWxsVGltZXIpO1xyXG5cdFx0XHRjYWxsVGltZXIgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0XHRpZiAobmV4dD8ubGVuZ3RoICYmICdmdW5jdGlvbicgPT09IHR5cGVvZiBoYW5kbGVyKSBoYW5kbGVyLmFwcGx5KC4uLm5leHQpO1xyXG5cdFx0aWYgKGRlbGF5ICYmIGltbWVkaWF0ZSAmJiAhaXNfaW1tZWRpYXRlKXtcclxuXHRcdFx0aW1tZWRpYXRlVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRjbGVhclRpbWVvdXQoaW1tZWRpYXRlVGltZXIpO1xyXG5cdFx0XHRcdGltbWVkaWF0ZVRpbWVyID0gdW5kZWZpbmVkO1xyXG5cdFx0XHR9LCBkZWxheSk7XHJcblx0XHR9XHJcblx0fTtcclxuXHRjb25zdCB3cmFwcGVyID0gZnVuY3Rpb24odGhpczogYW55LCAuLi5hcmdzOiBhbnlbXSl7XHJcblx0XHRuZXh0Q2FsbCA9IFt0aGlzLCBhcmdzXTtcclxuXHRcdGlmICghZGVsYXkpIHJldHVybiBleGVjdXRlKCk7XHJcblx0XHRjb25zdCBfbmV4dCA9IChub193YWl0PTApID0+IHtcclxuXHRcdFx0Y2xlYXJUaW1lb3V0KGNhbGxUaW1lcik7XHJcblx0XHRcdGNhbGxUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gZXhlY3V0ZSgpLCBkZWxheSk7XHJcblx0XHRcdGlmICghbm9fd2FpdCAmJiBtYXhXYWl0ICYmICF3YWl0VGltZXIpIHdhaXRUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gZXhlY3V0ZSgpLCBtYXhXYWl0KTtcclxuXHRcdH07XHJcblx0XHRpZiAoIShpbW1lZGlhdGUgJiYgIWltbWVkaWF0ZVRpbWVyICYmICFjYWxsVGltZXIpKSByZXR1cm4gX25leHQoKTtcclxuXHRcdF9uZXh0KDEpXHJcblx0XHRleGVjdXRlKDEpO1xyXG5cdH07XHJcblx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMod3JhcHBlciwge1xyXG5cdFx0bGVuZ3RoOiB7dmFsdWU6IGhhbmRsZXIubGVuZ3RofSxcclxuXHRcdG5hbWU6IHt2YWx1ZTogYCR7aGFuZGxlci5uYW1lfHwnYW5vbnltb3VzJ31fX2RlYm91bmNlZF9fJHtkZWxheX1gfSxcclxuXHR9KTtcclxuXHRyZXR1cm4gd3JhcHBlcjtcclxufTsiLCIvKipcclxuICogU2F5IEhlbGxvIVxyXG4gKiBcclxuICogQHBhcmFtIG5hbWVcclxuICovXHJcbmV4cG9ydCBjb25zdCBfc2F5SGVsbG8gPSAobmFtZT86IHN0cmluZyk6IHN0cmluZyA9PiB7XHJcblx0bmFtZSA9IG5hbWU/Lmxlbmd0aCA/IG5hbWUgOiAnVGh1a3UnO1xyXG5cdGNvbnN0IGhlbGxvID0gYFt4XSAtIEhlbGxvICR7bmFtZX0hYDtcclxuXHRjb25zb2xlLmxvZyhoZWxsbyk7XHJcblx0cmV0dXJuIGhlbGxvO1xyXG59IiwiLyoqXHJcbiAqIEN1c3RvbSBgSlNPTi5zdHJpbmdpZnlgIHdpdGggZXh0ZW5kZWQgY3VzdG9tIHJlcGxhY2VyXHJcbiAqIC0gRGVmYXVsdCB2YWx1ZSBmb3IgYHVuZGVmaW5lZGAgdmFsdWUgYXJndW1lbnRcclxuICogLSBGaXggYEVycm9yYCwgYFNldGAsIGBNYXBgIHN0cmluZ2lmeVxyXG4gKiAtIENpcmN1bGFyIHJlZmVyZW5jZSBmaXhlc1xyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBQYXJzZSB2YWx1ZSAoYHVuZGVmaW5lZGAgdmFsdWUgaXMgcmVwbGFjZWQgd2l0aCBgX3VuZGVmaW5lZGAgYXJndW1lbnQgc3Vic3RpdHV0ZSB2YWx1ZSlcclxuICogQHBhcmFtIHNwYWNlICBJbmRlbnRhdGlvbiBzcGFjZVxyXG4gKiBAcGFyYW0gX3VuZGVmaW5lZCAgRGVmYXVsdCBgdW5kZWZpbmVkYCBhcmd1bWVudCBgdmFsdWVgIHN1YnN0aXR1dGUgKGRlZmF1bHQgYG51bGxgKVxyXG4gKiBAcmV0dXJuc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9qc29uU3RyaW5naWZ5ID0gKHZhbHVlOiBhbnksIHNwYWNlPzogc3RyaW5nfG51bWJlcnxudWxsfHVuZGVmaW5lZCwgX3VuZGVmaW5lZDogYW55ID0gbnVsbCk6IHN0cmluZyA9PiB7XHJcblx0Y29uc3QgX3NwYWNlOiBzdHJpbmd8bnVtYmVyfHVuZGVmaW5lZCA9IHNwYWNlID09PSBudWxsID8gdW5kZWZpbmVkIDogc3BhY2U7XHJcblx0Y29uc3QgcGFyZW50czogYW55ID0gW107XHJcblx0Y29uc3QgcGF0aDogYW55W10gPSBbJ3RoaXMnXTtcclxuXHRjb25zdCByZWZzID0gbmV3IE1hcDxhbnksIGFueT4oKTtcclxuXHRjb25zdCBfY2xlYXIgPSAoKTogdm9pZCA9PiB7XHJcblx0XHRyZWZzLmNsZWFyKCk7XHJcblx0XHRwYXJlbnRzLmxlbmd0aCA9IDA7XHJcblx0XHRwYXRoLmxlbmd0aCA9IDE7XHJcblx0fTtcclxuXHRjb25zdCBfcGFyZW50cyA9IChrZXk6IGFueSwgdmFsdWU6IGFueSk6IHZvaWQgPT4ge1xyXG5cdFx0bGV0IGkgPSBwYXJlbnRzLmxlbmd0aCAtIDEsIHByZXYgPSBwYXJlbnRzW2ldO1xyXG5cdFx0aWYgKHByZXZba2V5XSA9PT0gdmFsdWUgfHwgaSA9PT0gMCl7XHJcblx0XHRcdHBhdGgucHVzaChrZXkpO1xyXG5cdFx0XHRwYXJlbnRzLnB1c2godmFsdWUpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHR3aGlsZSAoaS0tID49IDApIHtcclxuXHRcdFx0cHJldiA9IHBhcmVudHNbaV07XHJcblx0XHRcdGlmIChwcmV2Py5ba2V5XSA9PT0gdmFsdWUpe1xyXG5cdFx0XHRcdGkgKz0gMjtcclxuXHRcdFx0XHRwYXJlbnRzLmxlbmd0aCA9IGk7XHJcblx0XHRcdFx0cGF0aC5sZW5ndGggPSBpO1xyXG5cdFx0XHRcdC0taTtcclxuXHRcdFx0XHRwYXJlbnRzW2ldID0gdmFsdWU7XHJcblx0XHRcdFx0cGF0aFtpXSA9IGtleTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblx0Y29uc3QgX3JlcGxhY2VyID0gZnVuY3Rpb24odGhpcyA6YW55LCBrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IGFueSB7XHJcblx0XHRpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiB2YWx1ZTtcclxuXHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIEVycm9yKXtcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHR2YWx1ZSA9IFN0cmluZyh2YWx1ZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2F0Y2ggKGUpe1xyXG5cdFx0XHRcdGNvbnN0IGVycm9yID0gJ1tGQUlMVVJFXSBQYXJzZSBFcnJvciB0byBTdHJpbmcgZmFpbGVkISc7XHJcblx0XHRcdFx0Y29uc29sZS53YXJuKGVycm9yLCB7dmFsdWUsIGV9KTtcclxuXHRcdFx0XHR2YWx1ZSA9IGVycm9yO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRpZiAodmFsdWUgaW5zdGFuY2VvZiBTZXQpIHZhbHVlID0gWy4uLnZhbHVlXTtcclxuXHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIE1hcCkgdmFsdWUgPSBbLi4udmFsdWVdO1xyXG5cdFx0aWYgKHZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB2YWx1ZSA9IHZhbHVlICsgJyc7XHJcblx0XHRpZiAoJ29iamVjdCcgPT09IHR5cGVvZiB2YWx1ZSl7XHJcblx0XHRcdGlmIChrZXkpIF9wYXJlbnRzKGtleSwgdmFsdWUpO1xyXG5cdFx0XHRjb25zdCBvdGhlciA9IHJlZnMuZ2V0KHZhbHVlKTtcclxuXHRcdFx0aWYgKG90aGVyKSByZXR1cm4gJ1tDaXJjdWxhciBSZWZlcmVuY2VdJyArIG90aGVyO1xyXG5cdFx0XHRlbHNlIHJlZnMuc2V0KHZhbHVlLCBwYXRoLmpvaW4oJy4nKSk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdmFsdWU7XHJcblx0fTtcclxuXHR0cnkge1xyXG5cdFx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHZhbHVlID0gX3VuZGVmaW5lZCAhPT0gdW5kZWZpbmVkID8gX3VuZGVmaW5lZCA6IF91bmRlZmluZWQgPSBudWxsO1xyXG5cdFx0cGFyZW50cy5wdXNoKHZhbHVlKTtcclxuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgX3JlcGxhY2VyLCBfc3BhY2UpO1xyXG5cdH1cclxuXHRmaW5hbGx5IHtcclxuXHRcdF9jbGVhcigpO1xyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBDdXN0b20gYEpTT04ucGFyc2VgIHdpdGggZXJyb3IgY2F0Y2ggYW5kIGRlZmF1bHQgcmVzdWx0IG9uIHBhcnNlIGZhaWx1cmVcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZVxyXG4gKiBAcGFyYW0gX2RlZmF1bHRcclxuICogQHJldHVybnNcclxuICovXHJcbmV4cG9ydCBjb25zdCBfanNvblBhcnNlID0gKHZhbHVlOiBzdHJpbmcsIF9kZWZhdWx0PzogYW55KTogYW55ID0+IHtcclxuXHR0cnkge1xyXG5cdFx0cmV0dXJuIEpTT04ucGFyc2UodmFsdWUpO1xyXG5cdH1cclxuXHRjYXRjaCAoZSl7XHJcblx0XHRyZXR1cm4gX2RlZmF1bHQ7XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvcHkganNvbiBzdHJpbmdpZnkgYW5kIHBhcnNlIHZhbHVlIH4gYEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodmFsdWUpKWBcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAtIHBhcnNlIHZhbHVlXHJcbiAqIEByZXR1cm5zIGBhbnlgIGpzb24gc3RyaW5naWZpZWQgYW5kIHBhcnNlZCB2YWx1ZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9qc29uQ29weSA9IDxUUmV0dXJuID0gYW55Pih2YWx1ZTogYW55KTogVFJldHVybiA9PiAoJ29iamVjdCcgPT09IHR5cGVvZiB2YWx1ZSAmJiB2YWx1ZSA/IF9qc29uUGFyc2UoX2pzb25TdHJpbmdpZnkodmFsdWUpKSA6IHZhbHVlKSBhcyBhbnk7XHJcbiIsImltcG9ydCB7IGJvb2wgfSBmcm9tICcuLi90eXBlcyc7XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgdmFsdWUgaXMgbnVtZXJpY1xyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBQYXJzZSB2YWx1ZVxyXG4gKiBAcGFyYW0gYm9vbGVhbnMgIFBhc3MgYGJvb2xlYW5gIHZhbHVlcyBhcyBudW1lcmljXHJcbiAqIEBwYXJhbSBibGFua3MgIFBhc3MgZW1wdHkgYHN0cmluZ2AgdmFsdWVzIChiZWNhdXNlIGAhaXNOYU4oJycpID09PSB0cnVlYClcclxuICogQHJldHVybnMgYGJvb2xlYW5gIGlzIG51bWVyaWNcclxuICovXHJcbmV4cG9ydCBjb25zdCBfbnVtZXJpYyA9ICh2YWx1ZTogYW55LCBib29sZWFuczogYm9vbCA9IGZhbHNlLCBibGFua3M6IGJvb2wgPSBmYWxzZSk6IGJvb2xlYW4gPT4ge1xyXG5cdGlmICgnbnVtYmVyJyA9PT0gdHlwZW9mIHZhbHVlKSByZXR1cm4gIWlzTmFOKHZhbHVlKTtcclxuXHRpZiAoJ2Jvb2xlYW4nID09PSB0eXBlb2YgdmFsdWUpIHJldHVybiAhIWJvb2xlYW5zO1xyXG5cdGNvbnN0IHYgPSBTdHJpbmcodmFsdWUpLnRyaW0oKTtcclxuXHRpZiAodiA9PT0gJycpIHJldHVybiAhIWJsYW5rcztcclxuXHRyZXR1cm4gLyheWystXT9bMC05XSsoWy5dWzAtOV0rKT8oW2VFXVsrLV0/WzAtOV0rKT8kKXwoXlsrLV0/XFwuWzAtOV0rJCl8KF5bKy1dP1swLTldK1xcLiQpLy50ZXN0KHYpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCBwYXJzZWQgYW5kIG5vcm1hbGl6ZWQgYG51bWJlcmBcclxuICogXHJcbiAqIC0gdHJpbXMgYHN0cmluZ2AgdmFsdWUgYW5kIGAnJ2AgPT4gYE5hTmBcclxuICogLSBzdXBwb3J0cyAoIy8jLiMvLiMvIy4pICYgY29tbWEgc2VwYXJhdGVkL3NwYWNlZCBzdHJpbmcgKGkuZS4gYCcxLCAyMDAsIDAwMCAuIDM0NTUnYCA9PiBgMTIwMDAwMC4zNDU1YClcclxuICogLSBub3JtYWxpemVzIGZsb2F0IGAzK2AgbGFzdCB6ZXJvcyBmcm9tIGA1dGhgIHBsYWNlIChpLmUuIGAxLjEvMTAwYCA9IGAwLjAxMTAwMDAwMDAwMDAwMDAwMWAgPT4gYDAuMDExYClcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAtIHBhcnNlIG51bWJlciB2YWx1ZVxyXG4gKiBAcGFyYW0gX2RlZmF1bHQgLSBkZWZhdWx0IGBudW1iZXJgIHJlc3VsdCB3aGVuIGludmFsaWQgKGRlZmF1bHQgYE5hTmApXHJcbiAqIEByZXR1cm5zIGBudW1iZXJgIHwgYE5hTmAgd2hlbiBpbnZhbGlkIG9yIHdoZW4gYCcnYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9udW0gPSAodmFsdWU6IGFueSwgX2RlZmF1bHQ6IG51bWJlciA9IE5hTik6IG51bWJlciA9PiB7XHJcblx0XHJcblx0Ly9wYXJzZSBzdHJpbmcgdmFsdWVcclxuXHRpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB2YWx1ZSl7XHJcblx0XHRcclxuXHRcdC8vcGFyc2UgZmlsbGVkLCBzaW5nbGUgbGluZSB0ZXh0XHJcblx0XHRpZiAoKHZhbHVlID0gdmFsdWUudHJpbSgpKSAmJiAvXi4qJC8udGVzdCh2YWx1ZSkpe1xyXG5cdFx0XHRcclxuXHRcdFx0Ly9tYXRjaCBsZWFkaW5nICsvLSBvcGVyYXRvciBwcmVmaXhcclxuXHRcdFx0bGV0IHByZWZpeCA9ICcnO1xyXG5cdFx0XHRsZXQgbWF0Y2ggPSB2YWx1ZS50cmltKCkubWF0Y2goL14oW1xcKy1dKVxccyooXFxkLiopJC8pO1xyXG5cdFx0XHRpZiAobWF0Y2gpe1xyXG5cdFx0XHRcdHByZWZpeCA9IG1hdGNoWzFdOyAvLyt8LVxyXG5cdFx0XHRcdHZhbHVlID0gbWF0Y2hbMl07IC8vdmFsdWVcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly9yZW1vdmUgd2hpdGVzcGFjZSBhcm91bmQgW1xcZCxcXC5dXHJcblx0XHRcdHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXFxzKihbXFwuLF0pXFxzKi9nLCAnJDEnKTtcclxuXHJcblx0XHRcdC8vbWF0Y2ggJiByZW1vdmUgXCIsXCIgdGhvdXNhbmQgc2VwYXJhdG9yXHJcblx0XHRcdGlmICh2YWx1ZS5tYXRjaCgvXlxcZHsxLDN9KCxcXGR7M30pKihcXC58KFxcLlxcZCspKT8kLykpIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvLC9nLCAnJykudHJpbSgpO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly92YWxpZGF0ZSBudW1iZXIgZm9ybWF0IC0gYWxsb3cgKCMvIy4jLy4jLyMuKVxyXG5cdFx0XHRpZiAoL15cXGQrXFwuJHxeXFwuXFxkKyR8XlxcZCsoXFwuXFxkKyl7MCwxfSQvLnRlc3QodmFsdWUpKXtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHQvL3BhcnNlIG51bWJlciAmIHJlc3RvcmUgKy8tIG9wZXJhdG9yIHByZWZpeFxyXG5cdFx0XHRcdGlmICghaXNOYU4odmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKSkgJiYgcHJlZml4KSB2YWx1ZSA9IHBhcnNlRmxvYXQocHJlZml4ICsgdmFsdWUpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgdmFsdWUgPSBOYU47XHJcblx0XHR9XHJcblx0XHRlbHNlIHZhbHVlID0gTmFOOyAvL2ludmFsaWQgbnVtYmVyIHN0cmluZ1xyXG5cdH1cclxuXHRlbHNlIHZhbHVlID0gTnVtYmVyKHZhbHVlKTsgLy9jb2VyY2UgbnVtYmVyXHJcblxyXG5cdC8vdmFsaWQgc2FmZSBudW1iZXIgPT4gcmVzdWx0XHJcblx0aWYgKCFpc05hTih2YWx1ZSA9IE51bWJlcih2YWx1ZSkpICYmIHZhbHVlID49IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSICYmIHZhbHVlIDw9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKXtcclxuXHRcdFxyXG5cdFx0Ly9jaGVjayAmIG5vcm1hbGl6ZSBmbG9hdCBgMytgIGxhc3QgemVyb3MgZnJvbSA1dGggcGxhY2UgfiAwLjAxMTAwMDAwMDAwMDAwMDAwMSA9PiAwLjAxMVxyXG5cdFx0bGV0IG1hdGNoID0gU3RyaW5nKHZhbHVlKS5tYXRjaCgvXihbXFwrLV0/XFxkK1xcLlxcZHs1LH0pKDB7Myx9XFxkKikkLyk7XHJcblx0XHRpZiAobWF0Y2gpIHZhbHVlID0gTnVtYmVyKG1hdGNoWzFdKTtcclxuXHRcdFxyXG5cdFx0Ly9yZXN1bHRcclxuXHRcdHJldHVybiB2YWx1ZTtcclxuXHR9XHJcblxyXG5cdC8vaW52YWxpZCA9PiBkZWZhdWx0IHJlc3VsdFxyXG5cdHJldHVybiBOdW1iZXIoX2RlZmF1bHQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCBwYXJzZWQgc2FmZSBwb3NpdGl2ZSBgbnVtYmVyYCB3aXRoIG9wdGlvbmFsIHdpdGhpbiBtaW4vbWF4IGxpbWl0IGNoZWNrXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgLSBwYXJzZSBudW1iZXIgdmFsdWVcclxuICogQHBhcmFtIG1pbiAtIHNldCBtaW4gbGltaXQgfiBlbmFibGVkIHdoZW4gYG1pbmAgaXMgYSB2YWxpZCBwb3NpdGl2ZSBudW1iZXJcclxuICogQHBhcmFtIG1heCAtIHNldCBtYXggbGltaXQgfiBlbmFibGVkIHdoZW4gYG1heGAgaXMgYSB2YWxpZCBwb3NpdGl2ZSBudW1iZXJcclxuICogQHJldHVybnMgYG51bWJlcmAgcG9zaXRpdmUgfCBgdW5kZWZpbmVkYCB3aGVuIGludmFsaWQgb3Igb3V0IG9mIGBtaW4vbWF4YCBib3VuZHNcclxuICovXHJcbmV4cG9ydCBjb25zdCBfcG9zTnVtID0gKHZhbHVlOiBhbnksIG1pbj86IG51bWJlciwgbWF4PzogbnVtYmVyKTogbnVtYmVyfHVuZGVmaW5lZCA9PiB7XHJcblx0Y29uc3QgdmFsID0gX251bSh2YWx1ZSk7XHJcblx0aWYgKCEoIWlzTmFOKHZhbCkgJiYgdmFsID49IDApKSByZXR1cm4gdW5kZWZpbmVkO1xyXG5cdGlmICgnbnVtYmVyJyA9PT0gdHlwZW9mIG1pbiAmJiAhaXNOYU4obWluKSAmJiBtaW4gPj0gMCAmJiB2YWwgPCBtaW4pIHJldHVybiB1bmRlZmluZWQ7XHJcblx0aWYgKCdudW1iZXInID09PSB0eXBlb2YgbWF4ICYmICFpc05hTihtYXgpICYmIG1heCA+PSAwICYmIHZhbCA+IG1heCkgcmV0dXJuIHVuZGVmaW5lZDtcclxuXHRyZXR1cm4gdmFsO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCBwYXJzZWQgc2FmZSBgaW50ZWdlcmAgdmFsdWVcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAtIHBhcnNlIG51bWJlciB2YWx1ZVxyXG4gKiBAcGFyYW0gX2RlZmF1bHQgLSByZXN1bHQgYG51bWJlcmAgd2hlbiBpbnZhbGlkIChkZWZhdWx0IGBOYU5gKVxyXG4gKiBAcmV0dXJucyBgbnVtYmVyYCBpbnRlZ2VyXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2ludCA9ICh2YWx1ZTogYW55LCBfZGVmYXVsdDogbnVtYmVyID0gTmFOKTogbnVtYmVyID0+IHtcclxuXHRjb25zdCB2YWwgPSBNYXRoLmZsb29yKF9udW0odmFsdWUsIF9kZWZhdWx0KSk7XHJcblx0cmV0dXJuICFpc05hTih2YWwpID8gdmFsIDogX2RlZmF1bHQ7XHJcbn07XHJcblxyXG4vKipcclxuICogR2V0IHBhcnNlZCBzYWZlIHBvc2l0aXZlIGBpbnRlZ2VyYCB2YWx1ZSB3aXRoIG9wdGlvbmFsIHdpdGhpbiBtaW4vbWF4IGxpbWl0IGNoZWNrXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgLSBwYXJzZSBudW1iZXIgdmFsdWVcclxuICogQHBhcmFtIG1pbiAtIHNldCBtaW4gbGltaXQgfiBlbmFibGVkIHdoZW4gYG1pbmAgaXMgYSB2YWxpZCBwb3NpdGl2ZSBudW1iZXJcclxuICogQHBhcmFtIG1heCAtIHNldCBtYXggbGltaXQgfiBlbmFibGVkIHdoZW4gYG1heGAgaXMgYSB2YWxpZCBwb3NpdGl2ZSBudW1iZXJcclxuICogQHJldHVybnMgYG51bWJlcmAgcG9zaXRpdmUgfCBgdW5kZWZpbmVkYCB3aGVuIGludmFsaWQgb3Igb3V0IG9mIGBtaW4vbWF4YCBib3VuZHNcclxuICovXHJcbmV4cG9ydCBjb25zdCBfcG9zSW50ID0gKHZhbHVlOiBhbnksIG1pbj86IG51bWJlciwgbWF4PzogbnVtYmVyKTogbnVtYmVyfHVuZGVmaW5lZCA9PiB7XHJcblx0Y29uc3QgdmFsID0gX2ludCh2YWx1ZSk7XHJcblx0aWYgKCEoIWlzTmFOKHZhbCkgJiYgdmFsID49IDApKSByZXR1cm4gdW5kZWZpbmVkO1xyXG5cdGlmICgnbnVtYmVyJyA9PT0gdHlwZW9mIG1pbiAmJiAhaXNOYU4obWluKSAmJiBtaW4gPj0gMCAmJiB2YWwgPCBtaW4pIHJldHVybiB1bmRlZmluZWQ7XHJcblx0aWYgKCdudW1iZXInID09PSB0eXBlb2YgbWF4ICYmICFpc05hTihtYXgpICYmIG1heCA+PSAwICYmIHZhbCA+IG1heCkgcmV0dXJuIHVuZGVmaW5lZDtcclxuXHRyZXR1cm4gdmFsO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJvdW5kIG51bWJlciB0byBkZWNpbWFsIHBsYWNlc1xyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBQYXJzZSB2YWx1ZVxyXG4gKiBAcGFyYW0gcGxhY2VzICBbZGVmYXVsdDogYDJgXSBEZWNpbWFsIHBsYWNlc1xyXG4gKiBAcmV0dXJucyBgbnVtYmVyYCByb3VuZGVkXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3JvdW5kID0gKHZhbHVlOiBudW1iZXIsIHBsYWNlczogbnVtYmVyID0gMik6IG51bWJlciA9PiB7XHJcblx0aWYgKGlzTmFOKHZhbHVlKSkgcmV0dXJuIE5hTjtcclxuXHRsZXQgcCA9IDEwICoqIE1hdGguYWJzKF9pbnQocGxhY2VzLCAyKSk7XHJcblx0cmV0dXJuIE1hdGgucm91bmQoKHZhbHVlICsgTnVtYmVyLkVQU0lMT04pICogcCkgLyBwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnQgbnVtZXJpYyB2YWx1ZSB0byBjb21tYSB0aG91c2FuZCBkZWxpbWl0ZWQgc3RyaW5nIChpLmUuIGAxMDAwLjQ1NjdgID0+IGAnMSwwMDAuNDUnYClcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAgUGFyc2UgdmFsdWVcclxuICogQHBhcmFtIHBsYWNlcyAgW2RlZmF1bHQ6IGAyYF0gUm91bmQgZGVjaW1hbCBwbGFjZXNcclxuICogQHBhcmFtIHplcm9zICBFbmFibGUgdHJhaWxpbmcgYCcwJ2AgZGVjaW1hbCBwbGFjZXMgKGkuZS4gYDEwMDBgID0+IGAnMSwwMDAuMDAnYClcclxuICogQHJldHVybnMgYHN0cmluZ2AgQ29tbWEgdGhvdXNhbmQgZGVsaW1pdGVkIG51bWJlciAocmV0dXJucyBgXCJcImAgaWYgcGFyc2VkIGB2YWx1ZWAgaXMgYE5hTmApXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2NvbW1hcyA9ICh2YWx1ZTogYW55LCBwbGFjZXM6IG51bWJlciA9IDIsIHplcm9zOiBib29sID0gZmFsc2UpOiBzdHJpbmcgPT4ge1xyXG5cdGNvbnN0IG51bSA9IF9yb3VuZChfbnVtKHZhbHVlKSwgcGxhY2VzID0gX2ludChwbGFjZXMsIDIpKTtcclxuXHRpZiAoaXNOYU4obnVtKSl7XHJcblx0XHRjb25zb2xlLndhcm4oJ1tXQVJOSU5HOiBgX2NvbW1hc2BdIE5hTiB2YWx1ZTonLCB2YWx1ZSk7XHJcblx0XHRyZXR1cm4gJyc7XHJcblx0fVxyXG5cdGxldCB2YWwgPSBTdHJpbmcobnVtKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCAnLCcpO1xyXG5cdGlmIChwbGFjZXMgJiYgemVyb3Mpe1xyXG5cdFx0aWYgKHZhbC5pbmRleE9mKCcuJykgPT09IC0xKSB2YWwgKz0gJy4nLnBhZEVuZChwbGFjZXMgKyAxLCAnMCcpO1xyXG5cdFx0ZWxzZSB2YWwgPSB2YWwuc3BsaXQoJy4nKS5yZWR1Y2U8c3RyaW5nW10+KChwcmV2LCB2LCBpKSA9PiB7XHJcblx0XHRcdHByZXYucHVzaChpID09PSAxICYmIHYubGVuZ3RoIDwgcGxhY2VzID8gdi5wYWRFbmQocGxhY2VzLCAnMCcpIDogdik7XHJcblx0XHRcdHJldHVybiBwcmV2O1xyXG5cdFx0fSwgW10pLmpvaW4oJy4nKTtcclxuXHR9XHJcblx0cmV0dXJuIHZhbDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZSByYW5kb20gYGludGVnZXJgIG51bWJlci5cclxuICogXHJcbiAqIEBwYXJhbSBtaW4gIE1pbiBgaW50ZWdlcmBcclxuICogQHBhcmFtIG1heCAgTWF4IGBpbnRlZ2VyYFxyXG4gKiBAcmV0dXJucyAgYG51bWJlcmAgUmFuZG9tIGBpbnRlZ2VyYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9yYW5kID0gKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluO1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnQgcHggdG8gcmVtIChvciByZXZlcnNlKVxyXG4gKiBcclxuICogQHBhcmFtIHZhbCAtIGNvbnZlcnQgdmFsdWUgW2RlZmF1bHQ6IGAxYF1cclxuICogQHBhcmFtIHJldmVyc2UgLSBjb252ZXJ0IHJlbSB0byBweFxyXG4gKiBAcGFyYW0gYmFzZSAtIHJvb3QgcHggW2RlZmF1bHQ6IGAxNmBdXHJcbiAqIEByZXR1cm5zIGBudW1iZXJgXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3B4MnJlbSA9ICh2YWw6IG51bWJlciA9IDEsIHJldmVyc2U6IGJvb2xlYW4gPWZhbHNlLCBiYXNlOiBudW1iZXIgPSAxNik6IG51bWJlciA9PiB7XHJcblx0dmFsID0gX251bSh2YWwsIDEpO1xyXG5cdGJhc2UgPSBfbnVtKGJhc2UsIDE2KTtcclxuXHRjb25zdCB1bml0ID0gYmFzZSA9PT0gMTYgPyAwLjA2MjUgOiAxNi9iYXNlKjAuMDYyNTtcclxuXHRyZXR1cm4gcmV2ZXJzZSA/IHZhbC91bml0IDogdmFsICogdW5pdDtcclxufTsiLCJpbXBvcnQgeyBib29sIH0gZnJvbSAnLi4vdHlwZXMnO1xyXG5pbXBvcnQgeyBfanNvbkNvcHksIF9qc29uUGFyc2UsIF9qc29uU3RyaW5naWZ5IH0gZnJvbSAnLi9fanNvbic7XHJcbmltcG9ydCB7IF9pbnQsIF9udW0gfSBmcm9tICcuL19udW1iZXInO1xyXG5pbXBvcnQgeyBfc3RyLCBfc3RyaW5nLCBfc3RyaW5nYWJsZSB9IGZyb20gJy4vX3N0cmluZyc7XHJcbmltcG9ydCB7IF9pc0J1ZmZlciB9IGZyb20gJy4uLzNyZC1wYXJ0eSc7XHJcblxyXG4vKipcclxuICogR2V0IGFsbCBwcm9wZXJ0eSBkZXNjcmlwdG9yc1xyXG4gKiAtIEFQSSByZWY6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9kZWZpbmVQcm9wZXJ0eVxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlIC0gcGFyc2UgdmFsdWUgb2JqZWN0XHJcbiAqIEByZXR1cm5zIGB7W2tleTogc3RyaW5nfG51bWJlcnxzeW1ib2xdOiBhbnl9YCB+IHtwcm9wZXJ0eSA9PiBkZXNjcmlwdG9yc30gb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2dldEFsbFByb3BlcnR5RGVzY3JpcHRvcnMgPSAodmFsdWU6IGFueSk6IHtba2V5OiBzdHJpbmd8bnVtYmVyfHN5bWJvbF06IGFueX0gPT4ge1xyXG5cdGlmIChbbnVsbCwgdW5kZWZpbmVkXS5pbmNsdWRlcyh2YWx1ZSkpIHJldHVybiB7fTtcclxuXHRjb25zdCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSk7XHJcblx0cmV0dXJuIHsuLi5fZ2V0QWxsUHJvcGVydHlEZXNjcmlwdG9ycyhwcm90byksIC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHZhbHVlKX07XHJcbn07XHJcblxyXG4vKipcclxuICogR2V0IGFsbCB2YWx1ZSBwcm9wZXJ0aWVzXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgLSBwYXJzZSB2YWx1ZSBvYmplY3RcclxuICogQHBhcmFtIHN0YXRpY3MgLSBpbmNsdWRlIGBzdGF0aWNgIGNsYXNzIHByb3BlcnRpZXNcclxuICogQHJldHVybnMgYChzdHJpbmd8bnVtYmVyfHN5bWJvbClbXWAgLSBmb3VuZCBvd24vcHJvdG90eXBlL3N5bWJvbCBwcm9wZXJ0aWVzIHwgYFtdYCB3aGVuIG5vbmUgZm91bmRcclxuICovXHJcbmV4cG9ydCBjb25zdCBfZ2V0QWxsUHJvcGVydGllcyA9ICh2YWx1ZTogYW55LCBzdGF0aWNzOiBib29sZWFuID0gZmFsc2UpOiAoc3RyaW5nfG51bWJlcnxzeW1ib2wpW10gPT4ge1xyXG5cdGlmIChbbnVsbCwgdW5kZWZpbmVkXS5pbmNsdWRlcyh2YWx1ZSkpIHJldHVybiBbXTsgLy9pZ25vcmUgbnVsbC91bmRlZmluZWRcclxuXHRjb25zdCBwcm9wcyA9IG5ldyBTZXQ8c3RyaW5nfG51bWJlcnxzeW1ib2w+KCk7IC8vcHJvcGVyaWVzXHJcblxyXG5cdC8vYWRkIG93biBwcm9wZXJ0eSBuYW1lc1xyXG5cdGZvciAoY29uc3QgdiBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSkpIHByb3BzLmFkZCh2KTsgLy9vd25cclxuXHRcclxuXHQvL2ZuID0+IGdldCBrZXlzIGhlbHBlclxyXG5cdGNvbnN0IF9fZ2V0X2tleXMgPSAob2JqOiBhbnkpOiAoc3RyaW5nfG51bWJlcnxzeW1ib2wpW10gPT4ge1xyXG5cdFx0Y29uc3Qga2V5czogKHN0cmluZ3xudW1iZXJ8c3ltYm9sKVtdID0gW107XHJcblx0XHRmb3IgKGxldCBrZXkgaW4gb2JqKSBrZXlzLnB1c2goa2V5KTtcclxuXHRcdHJldHVybiBrZXlzO1xyXG5cdH07XHJcblxyXG5cdC8vZm4gPT4gZ2V0IHByb3BlcnRpZXMgaGVscGVyXHJcblx0Y29uc3QgX19nZXRfcHJvcHMgPSAodmFsOiBhbnkpOiAoc3RyaW5nfG51bWJlcnxzeW1ib2wpW10gPT4gX19nZXRfa2V5cyhfZ2V0QWxsUHJvcGVydHlEZXNjcmlwdG9ycyh2YWwpKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh2YWwpKTtcclxuXHJcblx0Ly9leGNsdWRlZCBkZWZhdWx0IHByb3BzXHJcblx0Y29uc3QgZXhjbHVkZWRfcHJvcHM6IChzdHJpbmd8bnVtYmVyfHN5bWJvbClbXSA9IFsuLi5uZXcgU2V0KFtcclxuXHRcdFxyXG5cdFx0Ly9GdW5jdGlvblxyXG5cdFx0Li4uX19nZXRfcHJvcHMoRnVuY3Rpb24ucHJvdG90eXBlKSxcclxuXHRcdC4uLighc3RhdGljcyA/IFtdIDogX19nZXRfcHJvcHMoRnVuY3Rpb24pKSxcclxuXHJcblx0XHQvL09iamVjdFxyXG5cdFx0Li4uX19nZXRfcHJvcHMoT2JqZWN0LnByb3RvdHlwZSksXHJcblx0XHQuLi4oIXN0YXRpY3MgPyBbXSA6IF9fZ2V0X3Byb3BzKE9iamVjdCkpLFxyXG5cdF0pXTtcclxuXHJcblx0Ly9mbiA9PiBhZGQgcHJvcHMgaGVscGVyXHJcblx0Y29uc3QgX19hZGRfcHJvcHMgPSAodmFsOiBhbnkpOiB2b2lkID0+IHtcclxuXHRcdGZvciAoY29uc3QgdiBvZiBfX2dldF9wcm9wcyh2YWwpKXtcclxuXHRcdFx0aWYgKCFleGNsdWRlZF9wcm9wcy5pbmNsdWRlcyh2KSkgcHJvcHMuYWRkKHYpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly9hZGQgcHJvcHNcclxuXHRfX2FkZF9wcm9wcyh2YWx1ZSk7XHJcblx0aWYgKHN0YXRpY3MpIF9fYWRkX3Byb3BzKE9iamVjdCh2YWx1ZSkuY29uc3RydWN0b3IpO1xyXG5cclxuXHQvL3Jlc3VsdFxyXG5cdHJldHVybiBbLi4ucHJvcHNdO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHZhbHVlIGhhcyBwcm9wZXJ0eVxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBTZWFyY2ggYG9iamVjdGAgdmFsdWVcclxuICogQHBhcmFtIHByb3AgIEZpbmQgcHJvcGVydHlcclxuICogQHBhcmFtIG93biAgW2RlZmF1bHQ6IGBmYWxzZWBdIEFzIG93biBwcm9wZXJ0eVxyXG4gKiBcclxuICovXHJcbmV4cG9ydCBjb25zdCBfaGFzUHJvcCA9ICh2YWx1ZTogYW55LCBwcm9wOiBhbnksIG93bjogYm9vbCA9IGZhbHNlKTogYm9vbGVhbiA9PiB7XHJcblx0aWYgKCEoJ29iamVjdCcgPT09IHR5cGVvZiB2YWx1ZSAmJiB2YWx1ZSkpIHJldHVybiBmYWxzZTtcclxuXHRyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBwcm9wKSB8fCAob3duID8gZmFsc2UgOiBwcm9wIGluIHZhbHVlKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBvYmplY3QgaGFzIHByb3BlcnRpZXNcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAgU2VhcmNoIGBvYmplY3RgIHZhbHVlXHJcbiAqIEBwYXJhbSBwcm9wcyAgU3ByZWFkIGZpbmQgcHJvcGVydGllc1xyXG4gKiBcclxuICovXHJcbmV4cG9ydCBjb25zdCBfaGFzUHJvcHMgPSAodmFsdWU6IGFueSwgLi4ucHJvcHM6IGFueSk6IGJvb2xlYW4gPT4ge1xyXG5cdGlmICghcHJvcHMubGVuZ3RoKSByZXR1cm4gZmFsc2U7XHJcblx0Zm9yIChjb25zdCBrZXkgb2YgcHJvcHMpe1xyXG5cdFx0aWYgKCFfaGFzUHJvcCh2YWx1ZSwga2V5KSkgcmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHRyZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBvYmplY3QgaGFzIGFueSBvZiB0aGUgcHJvcGVydGllc1xyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBTZWFyY2ggYG9iamVjdGAgdmFsdWVcclxuICogQHBhcmFtIHByb3BzICBTcHJlYWQgZmluZCBwcm9wZXJ0aWVzXHJcbiAqIFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9oYXNBbnlQcm9wcyA9ICh2YWx1ZTogYW55LCAuLi5wcm9wczogYW55KTogYm9vbGVhbiA9PiB7XHJcblx0aWYgKCFwcm9wcy5sZW5ndGgpIHJldHVybiBmYWxzZTtcclxuXHRmb3IgKGNvbnN0IGtleSBvZiBwcm9wcyl7XHJcblx0XHRpZiAoX2hhc1Byb3AodmFsdWUsIGtleSkpIHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHRyZXR1cm4gZmFsc2U7XHJcbn07XHJcblxyXG4vKipcclxuICogUHJvcGVydHkgaW50ZXJmYWNlIH4gc2VlIGBfZ2V0UHJvcCgpYFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJUHJvcGVydHkge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIC0gcHJvcGVydHkgbWF0Y2hcclxuXHQgKi9cclxuXHRtYXRjaDogYW55O1xyXG5cclxuXHQvKipcclxuXHQgKiAtIGZvdW5kIHByb3BlcnR5XHJcblx0ICovXHJcblx0a2V5OiBhbnk7XHJcblxyXG5cdC8qKlxyXG5cdCAqIC0gcHJvcGVydHkgdmFsdWVcclxuXHQgKi9cclxuXHR2YWx1ZTogYW55O1xyXG5cclxuXHQvKipcclxuXHQgKiAtIHByb3BlcnR5IGV4aXN0cyBzdGF0ZSB+IGAwYCA9IG5vdCBmb3VuZCwgYDFgID0gb3duIHByb3BlcnR5LCBgMmAgPSBub3Qgb3duIHByb3BlcnR5XHJcblx0ICovXHJcblx0ZXhpc3RzOiAwfDF8MjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB2YWx1ZSBwcm9wZXJ0eVxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlIC0gcGFyc2UgdmFsdWVcclxuICogQHBhcmFtIG1hdGNoIC0gbWF0Y2ggcHJvcGVydHlcclxuICogQHBhcmFtIGlnbm9yZUNhc2UgLSB3aGV0aGVyIHRvIGlnbm9yZSBwcm9wZXJ0eSBuYW1lIGNhc2VcclxuICogQHBhcmFtIG93biAtIHdoZXRoZXIgcHJvcGVydHkgaXMgdmFsdWUncyBvd24gfiBgdmFsdWUuaGFzT3duUHJvcGVydHlgXHJcbiAqIEByZXR1cm5zIGBJUHJvcGVydHlgIH4gYHtleGlzdHM6Ym9vbGVhbjsgbmFtZTpzdHJpbmc7IHZhbHVlOmFueTt9YFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9nZXRQcm9wID0gKHZhbHVlOiBhbnksIG1hdGNoOiBhbnksIGlnbm9yZUNhc2U6IGJvb2wgPSBmYWxzZSk6IElQcm9wZXJ0eSA9PiB7XHJcblx0Y29uc3QgcHJvcGVydHk6IElQcm9wZXJ0eSA9IHtcclxuXHRcdG1hdGNoLFxyXG5cdFx0a2V5OiB1bmRlZmluZWQsXHJcblx0XHR2YWx1ZTogdW5kZWZpbmVkLFxyXG5cdFx0ZXhpc3RzOiAwLFxyXG5cdH07XHJcblx0Y29uc3QgcHJvcHMgPSBfZ2V0QWxsUHJvcGVydGllcyh2YWx1ZSwgZmFsc2UpO1xyXG5cdGlmIChwcm9wcy5pbmNsdWRlcyhtYXRjaCkpe1xyXG5cdFx0cHJvcGVydHkua2V5ID0gbWF0Y2g7XHJcblx0XHRwcm9wZXJ0eS52YWx1ZSA9IHZhbHVlW21hdGNoXTtcclxuXHRcdHByb3BlcnR5LmV4aXN0cyA9IHZhbHVlLmhhc093blByb3BlcnR5KG1hdGNoKSA/IDEgOiAyO1xyXG5cdFx0cmV0dXJuIHByb3BlcnR5O1xyXG5cdH1cclxuXHRjb25zdCB0ZXh0X21hdGNoID0gX3N0cmluZ2FibGUobWF0Y2gpO1xyXG5cdGlmICh0ZXh0X21hdGNoICE9PSBmYWxzZSl7XHJcblx0XHRpZiAocHJvcHMuaW5jbHVkZXMobWF0Y2ggPSB0ZXh0X21hdGNoKSl7XHJcblx0XHRcdHByb3BlcnR5LmtleSA9IG1hdGNoO1xyXG5cdFx0XHRwcm9wZXJ0eS52YWx1ZSA9IHZhbHVlW21hdGNoXTtcclxuXHRcdFx0cHJvcGVydHkuZXhpc3RzID0gdmFsdWUuaGFzT3duUHJvcGVydHkobWF0Y2gpID8gMSA6IDI7XHJcblx0XHRcdHJldHVybiBwcm9wZXJ0eTtcclxuXHRcdH1cclxuXHRcdGlmIChpZ25vcmVDYXNlKXtcclxuXHRcdFx0Zm9yIChjb25zdCBwcm9wIG9mIHByb3BzKXtcclxuXHRcdFx0XHRjb25zdCBrZXkgPSBfc3RyaW5nYWJsZShwcm9wKTtcclxuXHRcdFx0XHRpZiAoa2V5ID09PSBmYWxzZSkgY29udGludWU7XHJcblx0XHRcdFx0aWYgKGtleS50b0xvd2VyQ2FzZSgpID09PSBtYXRjaC50b0xvd2VyQ2FzZSgpKXtcclxuXHRcdFx0XHRcdHByb3BlcnR5LmtleSA9IGtleTtcclxuXHRcdFx0XHRcdHByb3BlcnR5LnZhbHVlID0gdmFsdWVba2V5XTtcclxuXHRcdFx0XHRcdHByb3BlcnR5LmV4aXN0cyA9IHZhbHVlLmhhc093blByb3BlcnR5KG1hdGNoKSA/IDEgOiAyO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHByb3BlcnR5O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gcHJvcGVydHk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgdmFsdWUgaXMgYSBjbGFzcyBmdW5jdGlvblxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBUZXN0IHZhbHVlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2lzQ2xhc3MgPSAodmFsdWU6IGFueSk6IGJvb2xlYW4gPT4ge1xyXG5cdGlmICghKHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yID09PSBGdW5jdGlvbikgfHwgdmFsdWUucHJvdG90eXBlID09PSB1bmRlZmluZWQpIHJldHVybiBmYWxzZTtcclxuXHRpZiAoRnVuY3Rpb24ucHJvdG90eXBlICE9PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpKSByZXR1cm4gdHJ1ZTtcclxuXHRyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUucHJvdG90eXBlKS5sZW5ndGggPiAxO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHZhbHVlIGlzIGEgZnVuY3Rpb24gKG9yIGNsYXNzIG9wdGlvbmFsbHkpXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgIFRlc3QgdmFsdWVcclxuICogQHBhcmFtIG9yQ2xhc3MgIFtkZWZhdWx0OiBgZmFsc2VgXSBJbmNsdWRlcyBjbGFzcyBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9pc0Z1bmMgPSAodmFsdWU6IGFueSwgb3JDbGFzczogYm9vbGVhbiA9IGZhbHNlKTogYm9vbGVhbiA9PiB7XHJcblx0cmV0dXJuIHZhbHVlICYmICdmdW5jdGlvbicgPT09IHR5cGVvZiB2YWx1ZSAmJiAob3JDbGFzcyA/IHRydWUgOiAhX2lzQ2xhc3ModmFsdWUpKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXQgYFttaW4sIG1heF1gIGNvbXBhcmVkIGFuZCBhcnJhbmdlZCBpbiBvcmRlclxyXG4gKiAtIEV4YW1wbGU6IGBfbWluTWF4KDIwLCAxMClgID0+IGBbMTAsIDIwXWBcclxuICogLSBFeGFtcGxlOiBgX21pbk1heCgwLjIzLCBudWxsKWAgPT4gYFtudWxsLCAwLjIzXWBcclxuICogIFxyXG4gKiBAcGFyYW0gYSAgQ29tcGFyZSB2YWx1ZSAxXHJcbiAqIEBwYXJhbSBiICBDb21wYXJlIHZhbHVlIDJcclxuICogQHJldHVybnMgYFttaW4sIG1heF1gXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX21pbk1heCA9IChhOiBhbnksIGI6IGFueSk6IFttaW46IGFueSwgbWF4OiBhbnldID0+IHtcclxuXHRsZXQgbWluOiBhbnkgPSBhLCBtYXg6IGFueSA9IGI7XHJcblx0aWYgKGEgPiBiKXtcclxuXHRcdG1pbiA9IGI7XHJcblx0XHRtYXggPSBhO1xyXG5cdH1cclxuXHRyZXR1cm4gW21pbiwgbWF4XTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBGbGF0dGVuIG9iamVjdCB2YWx1ZXMgcmVjdXJzaXZlbHkgdG8gZG90IHBhdGhzIChpLmUuIGB7YTp7eDoxfSxiOnt5OjIsejpbNSw2XX19YCA9PiBgeydhLngnOjEsJ2IueSc6MiwnYi56LjAnOjUsJ2Iuei4xJzo2fWApXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgIFBhcnNlIG9iamVjdFxyXG4gKiBAcGFyYW0gb21pdCAgT21pdCBlbnRyeSBrZXlzL2RvdCBwYXRoc1xyXG4gKiBAcmV0dXJucyBge1trZXk6IHN0cmluZ106IGFueX1gXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2RvdEZsYXQgPSAodmFsdWU6IGFueSwgb21pdDogc3RyaW5nW10gPSBbXSk6e1trZXk6IHN0cmluZ106IGFueX0gPT4ge1xyXG5cdGlmICghKHZhbHVlICYmICdvYmplY3QnID09PSB0eXBlb2YgdmFsdWUpKSByZXR1cm4ge307XHJcblx0Y29uc3QgX2VudHJpZXM6IFtrZXk6IHN0cmluZywgdmFsOiBhbnldW10gPSBbXTtcclxuXHRjb25zdCBfYWRkRW50cmllcyA9IChvYmo6IGFueSwgX3Bfa2V5OiBzdHJpbmcpID0+IHtcclxuXHRcdGZvciAoY29uc3QgZW50cnkgb2YgT2JqZWN0LmVudHJpZXMob2JqKSl7XHJcblx0XHRcdGNvbnN0IFtrLCB2XSA9IGVudHJ5O1xyXG5cdFx0XHRjb25zdCBfa2V5ID0gYCR7KF9wX2tleSA/IGAke19wX2tleX0uYCA6ICcnKX0ke2t9YDtcclxuXHRcdFx0aWYgKG9taXQgJiYgQXJyYXkuaXNBcnJheShvbWl0KSAmJiBvbWl0Lmxlbmd0aCAmJiAob21pdC5pbmNsdWRlcyhgJHtrfWApIHx8IG9taXQuaW5jbHVkZXMoX2tleSkpKSBjb250aW51ZTtcclxuXHRcdFx0aWYgKHYgJiYgJ29iamVjdCcgPT09IHR5cGVvZiB2KSBfYWRkRW50cmllcyh2LCBfa2V5KTtcclxuXHRcdFx0ZWxzZSBfZW50cmllcy5wdXNoKFtfa2V5LCB2XSk7XHJcblx0XHR9XHJcblx0fTtcclxuXHRfYWRkRW50cmllcyh2YWx1ZSwgJycpO1xyXG5cdHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoX2VudHJpZXMpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFBhcnNlIGRvdCBmbGF0dGVuZWQgb2JqZWN0IHRvIFtrZXkgPT4gdmFsdWVdIG9iamVjdCB+IHJldmVyc2UgYF9kb3RGbGF0KClgXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgLSBwYXJzZSB2YWx1ZSB+IGB7W2RvdF9wYXRoOiBzdHJpbmddOiBhbnl9YFxyXG4gKiBAcmV0dXJucyBge1trZXk6IHN0cmluZ106IGFueX1gIHBhcnNlZCByZXN1bHQgfCBge31gIHdoZW4gdmFsdWUgaXMgaW52YWxpZFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9kb3RJbmZsYXRlID0gKHZhbHVlOiBhbnkpOiB7W2tleTogc3RyaW5nXTogYW55fSA9PiB7XHJcblx0Y29uc3QgZW50cmllczogW3N0cmluZywgYW55XVtdID0gT2JqZWN0LmVudHJpZXMoX2RvdEZsYXQodmFsdWUpKTtcclxuXHRjb25zdCBidWZmZXI6IHtba2V5OiBzdHJpbmddOiBhbnl9ID0ge307XHJcblx0Zm9yIChjb25zdCBbcGF0aCwgcGF0aF92YWx1ZV0gb2YgZW50cmllcyl7XHJcblx0XHRjb25zdCBrZXlzID0gcGF0aC5zcGxpdCgnLicpO1xyXG5cdFx0aWYgKGtleXMubGVuZ3RoID09PSAxKXtcclxuXHRcdFx0Y29uc3Qga2V5ID0ga2V5c1swXTtcclxuXHRcdFx0YnVmZmVyW2tleV0gPSBwYXRoX3ZhbHVlO1xyXG5cdFx0XHRjb250aW51ZTtcclxuXHRcdH1cclxuXHRcdGNvbnN0IGl0ZW0gPSBrZXlzLnNsaWNlKCkucmV2ZXJzZSgpLnJlZHVjZSgocHJldiwga2V5KSA9PiAoe1trZXldOiBwcmV2fSksIHBhdGhfdmFsdWUpO1xyXG5cdFx0bGV0IGtleXNfaXRlbTogYW55ID0gaXRlbTtcclxuXHRcdGxldCBrZXlzX2J1ZmZlcjogYW55ID0gYnVmZmVyO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSArKyl7XHJcblx0XHRcdGNvbnN0IGtleSA9IGtleXNbaV07XHJcblx0XHRcdGNvbnN0IHZhbCA9IGtleXNfaXRlbSA9IGtleXNfaXRlbVtrZXldO1xyXG5cdFx0XHRpZiAoIWtleXNfYnVmZmVyLmhhc093blByb3BlcnR5KGtleSkpIGtleXNfYnVmZmVyW2tleV0gPSB2YWw7XHJcblx0XHRcdGtleXNfYnVmZmVyID0ga2V5c19idWZmZXJba2V5XTtcclxuXHRcdH1cclxuXHR9XHJcblx0Y29uc3QgX25vcm0gPSAodmFsOiBhbnkpOiBhbnkgPT4ge1xyXG5cdFx0aWYgKE9iamVjdCh2YWwpICE9PSB2YWwpIHJldHVybiB2YWw7XHJcblx0XHRsZXQga2V5czogYW55LCBsZW4gPSAwO1xyXG5cdFx0aWYgKChsZW4gPSAoa2V5cyA9IE9iamVjdC5rZXlzKHZhbCkpLmxlbmd0aCkgJiYgT2JqZWN0LmtleXMoWy4uLkFycmF5KGxlbildKS5qb2luKCcsJykgPT09IGtleXMuam9pbignLCcpKSB2YWwgPSBPYmplY3QudmFsdWVzKHZhbCk7XHJcblx0XHRmb3IgKGNvbnN0IGtleSBpbiB2YWwpIHZhbFtrZXldID0gX25vcm0odmFsW2tleV0pO1xyXG5cdFx0cmV0dXJuIHZhbDtcclxuXHR9O1xyXG5cdHJldHVybiBfbm9ybShidWZmZXIpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCB2YWxpZGF0ZWQgb2JqZWN0IGRvdCBwYXRoIChpLmUuIGAnYS5iLmMnYCB0byByZWZlciB0byBge2E6e2I6e2M6MX19fWApXHJcbiAqIFxyXG4gKiBAcGFyYW0gZG90X3BhdGggLSBkb3Qgc2VwYXJhdGVkIGtleXNcclxuICogQHBhcmFtIG9wZXJhdGlvbnMgLSBzdXBwb3J0cyBvcGVyYXRpb25zIChpLmUuICchcmV2ZXJzZScvJyFzbGljZT0wJykgfiB0ZXN0cyBkb3Qga2V5cyB1c2luZyBgL15bLV8wLTlhLXpBLVpdK1xcPShbXlxcPVxcLl0qKSQvYCBpbnN0ZWFkIG9mIGRlZmF1bHQgYC9eWy1fMC05YS16QS1aXSskL2BcclxuICogQHBhcmFtIF9mYWlsdXJlIC0gZXJyb3IgaGFuZGxpbmcgfiBgMGAgPSAoZGVmYXVsdCkgZGlzYWJsZWQsICcxJyA9IHdhcm4gZXJyb3IsIGAyYCA9IHdhcm4gYW5kIHRocm93IGVycm9yXHJcbiAqIEByZXR1cm5zIGBzdHJpbmdgIHZhbGlkIGRvdCBwYXRoXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3ZhbGlkRG90UGF0aCA9IChkb3RfcGF0aDogc3RyaW5nLCBvcGVyYXRpb25zOiBib29sZWFuID0gZmFsc2UsIF9mYWlsdXJlOiAwfDF8MiA9IDApOiBzdHJpbmcgPT4ge1xyXG5cdHRyeSB7XHJcblx0XHRpZiAoIShkb3RfcGF0aCA9IF9zdHIoZG90X3BhdGgsIHRydWUpKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBkb3QgcGF0aCB2YWx1ZS4nKTtcclxuXHRcdGNvbnN0IHBhcnRzOiBzdHJpbmdbXSA9IFtdO1xyXG5cdFx0Zm9yIChsZXQgdiBvZiBkb3RfcGF0aC5zcGxpdCgnLicpKXtcclxuXHRcdFx0aWYgKCEhKHYgPSB2LnRyaW0oKSkpIHBhcnRzLnB1c2godik7XHJcblx0XHR9XHJcblx0XHRpZiAoIXBhcnRzLmxlbmd0aCkgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBkb3QgcGF0aCBmb3JtYXQgXCIke2RvdF9wYXRofVwiLmApO1xyXG5cdFx0Y29uc3QgYnVmZmVyID0gW107XHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSArKyl7XHJcblx0XHRcdGxldCBwYXJ0ID0gcGFydHNbaV07XHJcblx0XHRcdGxldCB2YWxpZDogYm9vbGVhbiA9IC9eWy1fMC05YS16QS1aXSskLy50ZXN0KHBhcnQpO1xyXG5cdFx0XHRpZiAoIXZhbGlkICYmIG9wZXJhdGlvbnMpe1xyXG5cdFx0XHRcdGlmIChbJyFyZXZlcnNlJywgJyFzbGljZSddLmluY2x1ZGVzKHBhcnQpKSB2YWxpZCA9IHRydWU7XHJcblx0XHRcdFx0ZWxzZSBpZiAocGFydC5pbmRleE9mKCc9JykgPiAtMSl7XHJcblx0XHRcdFx0XHRjb25zdCBfaW52YWxpZDogc3RyaW5nW10gPSBbXTtcclxuXHRcdFx0XHRcdGZvciAobGV0IHYgb2YgcGFydC5zcGxpdCgnLCcpKXtcclxuXHRcdFx0XHRcdFx0aWYgKCh2ID0gdi50cmltKCkpICYmICEvXlstXzAtOWEtekEtWl0rXFw9KFteXFw9XFwuXSopJC8udGVzdCh2KSkgX2ludmFsaWQucHVzaCh2KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmICghX2ludmFsaWQubGVuZ3RoKSB2YWxpZCA9IHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGlmICghdmFsaWQpIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgZG90IHBhdGgga2V5IFwiJHtwYXJ0fVwiLmApO1xyXG5cdFx0XHRidWZmZXIucHVzaChwYXJ0KTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBidWZmZXIuam9pbignLicpO1xyXG5cdH1cclxuXHRjYXRjaCAoZSl7XHJcblx0XHRpZiAoX2ZhaWx1cmUpe1xyXG5cdFx0XHRpZiAoX2ZhaWx1cmUgPT09IDEpIGNvbnNvbGUud2FybihlLCB7ZG90X3BhdGgsIG9wZXJhdGlvbnN9KTtcclxuXHRcdFx0ZWxzZSBpZiAoX2ZhaWx1cmUgPT09IDIpIHRocm93IGU7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gJyc7XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCBwYXJzZWQgYGJvb2xlYW5gIHZhbHVlXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgLSBwYXJzZSB2YWx1ZVxyXG4gKiBAcGFyYW0gc3RyaWN0IC0gc3RyaWN0IG1vZGUgfiBzdXBwb3J0IG9ubHkgYGJvb2xlYW4tbGlrZWAgdmFsdWUgKGkuZS4gYCd0cnVlJ3wnZmFsc2UnfHRydWV8ZmFsc2V8MXwwYCkgcmV0dXJucyBgdW5kZWZpbmVkYCBpZiB1bnN1cHBvcnRlZCB3aGVuIGVuYWJsZWQuXHJcbiAqIEBwYXJhbSB0cmltIC0gdHJpbSBgc3RyaW5nYCB2YWx1ZSAoZGVmYXVsdCBgdHJ1ZWApXHJcbiAqIEByZXR1cm5zXHJcbiAqIC0gYGJvb2xlYW5gXHJcbiAqIC0gYHVuZGVmaW5lZGAgd2hlbiBpbnZhbGlkIGlmIGBzdHJpY3RgIGlzIGVuYWJsZWRcclxuICogLSBgJ2ZhbHNlJyA9PiBmYWxzZWAgfCBgISF2YWx1ZWAgd2hlbiBzdHJpY3QgaXMgZGlzYWJsZWRcclxuICovXHJcbmV4cG9ydCBjb25zdCBfYm9vbCA9ICh2YWx1ZTogYW55LCBzdHJpY3Q6IGJvb2xlYW4gPSBmYWxzZSwgdHJpbTogYm9vbGVhbiA9IHRydWUpOiBib29sZWFufHVuZGVmaW5lZCA9PiB7XHJcblx0aWYgKHRyaW0gJiYgJ3N0cmluZycgPT09IHR5cGVvZiB2YWx1ZSkgdmFsdWUgPSB2YWx1ZS50cmltKCk7XHJcblx0aWYgKHN0cmljdCAmJiAhWyd0cnVlJywgJ2ZhbHNlJywgdHJ1ZSwgZmFsc2UsIDEsIDBdLmluY2x1ZGVzKHZhbHVlKSkgcmV0dXJuIHVuZGVmaW5lZDtcclxuXHRyZXR1cm4gdmFsdWUgPT09ICdmYWxzZScgPyBmYWxzZSA6ICEhdmFsdWU7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVzb2x2ZSBkb3QgcGF0aCBvYmplY3QgdmFsdWUgfiBzdXBwb3J0cyBhcnJheSBvcGVyYXRpb25zIGNoYWluaW5nXHJcbiAqIFxyXG4gKiBAZXhhbXBsZVxyXG4gKiBcclxuICogLy9zaW1wbGUgdXNhZ2VcclxuICogX2RvdEdldCgneCcsIHsneCc6MX0pID0+IDFcclxuICogX2RvdEdldCgnYS5iLmMnLCB7J2EnOnsnYic6eydjJzoxfX19KSA9PiAxXHJcbiAqIF9kb3RHZXQoJ2EuYi5kJywgeydhJzp7J2InOnsnYyc6MX19fSkgPT4gbnVsbFxyXG4gKiBfZG90R2V0KCdhLjAnLCB7J2EnOlsneCcsJ3knXX0pID0+ICd4J1xyXG4gKiBcclxuICogLy9hcnJheSByZXZlcnNlIG9wZXJhdGlvbiAoZG9uZSBzbGljZSBjb3B5KVxyXG4gKiBfZG90R2V0KCcwLiFyZXZlcnNlJywgW1szLDIsMV1dKSA9PiBbMywyLDFdXHJcbiAqIFxyXG4gKiAvL2FycmF5IHNsaWNlIG9wZXJhdGlvblxyXG4gKiBfZG90R2V0KCcwLiFzbGljZScsIFtbMSwyLDNdXSkgPT4gWzEsMiwzXVxyXG4gKiBcclxuICogLy9hcnJheSBzbGljZSBuZWdhdGl2ZSBgLW51bWJlcmBcclxuICogX2RvdEdldCgnMC4tMicsIFtbMSwyLDNdXSkgPT4gWzIsM11cclxuICogXHJcbiAqIC8vYXJyYXkgYGtleT12YWx1ZWAgc2VhcmNoaW5nXHJcbiAqIF9kb3RHZXQoJzAuYT0yJywgW1t7J2EnOjEsJ2InOjJ9LHsnYSc6MiwnYic6M31dXSkgPT4geydhJzoyLCdiJzozfVxyXG4gKiBfZG90R2V0KCcwLmE9MSxiPTInLCBbW3snYSc6MSwnYic6MiwnYyc6M30seydhJzoyLCdiJzozLCdjJzo0fV1dKSA9PiB7J2EnOjEsJ2InOjIsJ2MnOjN9XHJcbiAqIFxyXG4gKiBAcGFyYW0gcGF0aCAtIGRvdCBzZXBhcmF0ZWQga2V5cyB+IG9wdGlvbmFsIGFycmF5IG9wZXJhdGlvbnNcclxuICogQHBhcmFtIHRhcmdldCAtIHRyYXZlcnNlIG9iamVjdFxyXG4gKiBAcGFyYW0gaWdub3JlQ2FzZSAtIHdoZXRoZXIgdG8gaWdub3JlIGNhc2Ugd2hlbiBtYXRjaGluZyBrZXlzIChkZWZhdWx0OiBgZmFsc2VgKVxyXG4gKiBAcGFyYW0gX2ZhaWx1cmUgLSBlcnJvciBoYW5kbGluZyB+IGAwYCA9IChkZWZhdWx0KSBkaXNhYmxlZCwgYDFgID0gd2FybiBlcnJvciwgYDJgID0gdGhyb3cgZXJyb3JcclxuICogQHBhcmFtIF9kZWZhdWx0IC0gZGVmYXVsdCByZXN1bHQgb24gZmFpbHVyZVxyXG4gKiBAcmV0dXJucyBgYW55YCBkb3QgcGF0aCBtYXRjaCByZXN1bHRcclxuICovXHJcbmV4cG9ydCBjb25zdCBfZG90R2V0ID0gKHBhdGg6IHN0cmluZywgdGFyZ2V0OiBhbnksIGlnbm9yZUNhc2U6IGJvb2xlYW4gPSBmYWxzZSwgX2ZhaWx1cmU6IDB8MXwyID0gMCwgX2RlZmF1bHQ/OiBhbnkpOiBhbnkgPT4ge1xyXG5cdHRyeSB7XHJcblx0XHRjb25zdCBrZXlzID0gKHBhdGggPSBfdmFsaWREb3RQYXRoKHBhdGgsIHRydWUsIF9mYWlsdXJlKSkuc3BsaXQoJy4nKTtcclxuXHRcdGlmICgha2V5cy5sZW5ndGgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgcmVzb2x2ZSBkb3QgcGF0aCBmb3JtYXQuJyk7XHJcblx0XHRsZXQgYWJvcnQ6IGJvb2xlYW4gPSBmYWxzZSwgdmFsdWU6IGFueSA9IGtleXMucmVkdWNlKChwcmV2OiBhbnksIGtleTogc3RyaW5nKSA9PiB7XHJcblx0XHRcdGlmIChhYm9ydCkgcmV0dXJuIHByZXY7IC8vbm90IGZvdW5kXHJcblx0XHRcdGlmIChwcmV2ICYmICdvYmplY3QnID09PSB0eXBlb2YgcHJldil7XHJcblx0XHRcdFx0Y29uc3QgcHJvcCA9IF9nZXRQcm9wKHByZXYsIGtleSwgaWdub3JlQ2FzZSk7XHJcblx0XHRcdFx0aWYgKHByb3AuZXhpc3RzKSByZXR1cm4gcHJvcC52YWx1ZTsgLy9rZXkgdmFsdWVcclxuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShwcmV2KSl7XHJcblx0XHRcdFx0XHRpZiAoa2V5ID09PSAnIXJldmVyc2UnKSByZXR1cm4gcHJldi5zbGljZSgpLnJldmVyc2UoKTsgLy9hcnJheSByZXZlcnNlIChzbGljZSlcclxuXHRcdFx0XHRcdGlmIChrZXkgPT09ICchc2xpY2UnKSByZXR1cm4gcHJldi5zbGljZSgpOyAvL2FycmF5IHNsaWNlXHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdC8vYXJyYXkgc2xpY2UgYC1udW1iZXJgXHJcblx0XHRcdFx0XHRsZXQgdG1wOiBhbnk7XHJcblx0XHRcdFx0XHRpZiAoKHRtcCA9IF9udW0oa2V5LCAwKSkgPCAwICYmIE51bWJlci5pc0ludGVnZXIodG1wKSkgcmV0dXJuIHByZXYuc2xpY2UodG1wKTtcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0Ly9hcnJheSBzZWFyY2hcclxuXHRcdFx0XHRcdGlmIChwcmV2Lmxlbmd0aCAmJiBrZXkuaW5kZXhPZignPScpID4gLTEpe1xyXG5cdFx0XHRcdFx0XHRjb25zdCBzZWFyY2hfZW50cmllczogW2tleTogc3RyaW5nLCB2YWw6IHN0cmluZ11bXSA9IFtdO1xyXG5cdFx0XHRcdFx0XHRmb3IgKGxldCB2YWwgb2Yga2V5LnNwbGl0KCcsJykpe1xyXG5cdFx0XHRcdFx0XHRcdGlmICghKHZhbCA9IHZhbC50cmltKCkpKSBjb250aW51ZTtcclxuXHRcdFx0XHRcdFx0XHRsZXQgYXJyID0gdmFsLnNwbGl0KCc9Jyk7XHJcblx0XHRcdFx0XHRcdFx0aWYgKGFyci5sZW5ndGggIT09IDIpIHJldHVybiBbXTtcclxuXHRcdFx0XHRcdFx0XHRsZXQgayA9IGFyclswXS50cmltKCk7XHJcblx0XHRcdFx0XHRcdFx0bGV0IHYgPSBkZWNvZGVVUklDb21wb25lbnQoYXJyWzFdKTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoaykgc2VhcmNoX2VudHJpZXMucHVzaChbaywgX2pzb25QYXJzZSh2LCB2KV0pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGxldCBpbmRleCA9IC0xO1xyXG5cdFx0XHRcdFx0XHRpZiAoc2VhcmNoX2VudHJpZXMubGVuZ3RoKXtcclxuXHRcdFx0XHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHByZXYubGVuZ3RoOyBpICsrKXtcclxuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IGVudHJ5ID0gcHJldltpXTtcclxuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IG1hdGNoZXM6IFtrZXk6IHN0cmluZywgdmFsOiBzdHJpbmddW10gPSBbXTtcclxuXHRcdFx0XHRcdFx0XHRcdGZvciAoY29uc3QgdiBvZiBzZWFyY2hfZW50cmllcyl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IHByb3AgPSBfZ2V0UHJvcChlbnRyeSwgdlswXSwgaWdub3JlQ2FzZSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChwcm9wLmV4aXN0cyAmJiBwcm9wLnZhbHVlID09PSB2WzFdKSBtYXRjaGVzLnB1c2godik7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAobWF0Y2hlcy5sZW5ndGggJiYgbWF0Y2hlcy5sZW5ndGggPT09IHNlYXJjaF9lbnRyaWVzLmxlbmd0aCl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGluZGV4ID0gaTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGlmIChpbmRleCA+IC0xKSByZXR1cm4gcHJldltpbmRleF07XHJcblx0XHRcdFx0XHRcdGFib3J0ID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdC8vbm90IGZvdW5kXHJcblx0XHRcdGFib3J0ID0gdHJ1ZTtcclxuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHRcdH0sIHRhcmdldCk7XHJcblx0XHRyZXR1cm4gIWFib3J0ID8gdmFsdWUgOiBfZGVmYXVsdDtcclxuXHR9XHJcblx0Y2F0Y2ggKGUpIHtcclxuXHRcdGlmIChfZmFpbHVyZSl7XHJcblx0XHRcdGlmIChfZmFpbHVyZSA9PT0gMSkgY29uc29sZS53YXJuKGUsIHtwYXRoLCB0YXJnZXR9KTtcclxuXHRcdFx0ZWxzZSBpZiAoX2ZhaWx1cmUgPT09IDIpIHRocm93IGU7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gX2RlZmF1bHQ7XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBkZXByZWNhdGVkXHJcbiAqIEdldCBjb2VyY2VkIGBudW1iZXIvc3RyaW5nL0pTT05gIHZhbHVlIH4gYHZhbHVlLnZhbHVlT2YoKWBcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAtIHBhcnNlIHZhbHVlXHJcbiAqIEByZXR1cm5zIGBhbnlgIH4gYG9iamVjdGB8YHVuZGVmaW5lZGB8YGJvb2xlYW5gfGBudW1iZXJgfGBiaWdpbnRgfGBzdHJpbmdgfGBzeW1ib2xgXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3ZhbHVlT2YgPSAodmFsdWU6IGFueSk6IGFueSA9PiB7XHJcblx0aWYgKCEodmFsdWUgJiYgJ29iamVjdCcgPT09IHR5cGVvZiB2YWx1ZSkpIHJldHVybiB2YWx1ZTtcclxuXHRsZXQgdmFsOiBhbnkgPSB2YWx1ZS52YWx1ZU9mKCk7XHJcblx0aWYgKHZhbCA9PT0gdmFsdWUpe1xyXG5cdFx0aWYgKE9iamVjdCh2YWx1ZVtTeW1ib2wudG9QcmltaXRpdmVdKSA9PT0gdmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSAmJiAhaXNOYU4odmFsID0gTnVtYmVyKHZhbHVlKSkpIHJldHVybiB2YWw7IC8vaGludCBudW1iZXJcclxuXHRcdGlmICgodmFsID0gX3N0cmluZ2FibGUodmFsdWUpKSAhPT0gZmFsc2UpIHJldHVybiB2YWw7IC8vaGludCBzdHJpbmcgfCB2YWx1ZS50b1N0cmluZygpXHJcblx0XHRpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHZhbHVlLnRvSlNPTiAmJiAodmFsID0gdmFsdWUudG9KU09OKCkpICE9PSB2YWx1ZSkgcmV0dXJuIHZhbDsgLy92YWx1ZS50b0pTT04oKVxyXG5cdH1cclxuXHRyZXR1cm4gdmFsOyAvL3ZhbHVlLnZhbHVlT2YoKVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHZhbHVlIGlzIGVtcHR5IH4gYG51bGxgL2B1bmRlZmluZWRgL2BOYU5gL2AnJ2AvYHt9YC9gIVsuLi52YWx1ZV1gXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgLSBwYXJzZSB2YWx1ZVxyXG4gKiBAcGFyYW0gdHJpbSAtIHRyaW0gd2hpdGVzcGFjZSB+IHdoZW4gdmFsdWUgaXMgYHN0cmluZy9CdWZmZXJgXHJcbiAqIEByZXR1cm5zIGBib29sZWFuYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9lbXB0eSA9ICh2YWx1ZTogYW55LCB0cmltOiBib29sZWFuID0gZmFsc2UpOiBib29sZWFuID0+IHtcclxuXHRpZiAoW251bGwsIHVuZGVmaW5lZCwgTmFOLCAnJ10uaW5jbHVkZXModmFsdWUpKSByZXR1cm4gdHJ1ZTsgLy9kZWZhdWx0IGVtcHR5XHJcblx0aWYgKFsnZnVuY3Rpb24nLCAnYm9vbGVhbicsICdudW1iZXInXS5pbmNsdWRlcyh0eXBlb2YgdmFsdWUpKSByZXR1cm4gZmFsc2U7IC8vZnVuY3Rpb24vYm9vbGVhbi9udW1iZXIgLSBpZ25vcmVcclxuXHRpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB2YWx1ZSB8fCBfaXNCdWZmZXIodmFsdWUpKSByZXR1cm4gIV9zdHIodmFsdWUsIHRyaW0pLmxlbmd0aDsgLy9zdHJpbmcvQnVmZmVyIC0gIWxlbmd0aFxyXG5cdGlmICgnb2JqZWN0JyAhPT0gdHlwZW9mIHZhbHVlKSByZXR1cm4gZmFsc2U7IC8vbm9uIG9iamVjdCAtIGlnbm9yZVxyXG5cdGlmICh2YWx1ZSBpbnN0YW5jZW9mIE1hcCB8fCB2YWx1ZSBpbnN0YW5jZW9mIFNldCkgcmV0dXJuICF2YWx1ZS5zaXplOyAvL01hcC9TZXQgLSAhc2l6ZVxyXG5cdGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkgcmV0dXJuICF2YWx1ZS5sZW5ndGg7IC8vQXJyYXkgLSAhbGVuZ3RoXHJcblx0aWYgKE9iamVjdCh2YWx1ZVtTeW1ib2wuaXRlcmF0b3JdKSA9PT0gdmFsdWVbU3ltYm9sLml0ZXJhdG9yXSkgcmV0dXJuICFbLi4udmFsdWVdLmxlbmd0aDsgLy92YWx1ZVtTeW1ib2wuaXRlcmF0b3JdIC0gIWxlbmd0aFxyXG5cdGlmICghX2dldEFsbFByb3BlcnRpZXModmFsdWUpLmxlbmd0aCkgcmV0dXJuIHRydWU7IC8vaGFzIG5vIHNlbGYgcHJvcGVydGllc1xyXG5cdHJldHVybiBmYWxzZTsgLy9pZ25vcmVcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiB2YWx1ZSBjYW4gYmUgaXRlcmF0ZWQgfiBgWy4uLnZhbHVlXWBcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAtIHBhcnNlIHZhbHVlXHJcbiAqIEBwYXJhbSBfYXN5bmMgLSB1c2luZyBgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXWAgKGRlZmF1bHQgYGZhbHNlYCB+IGBbU3ltYm9sLml0ZXJhdG9yXWApXHJcbiAqIEByZXR1cm5zIGBib29sZWFuYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9pdGVyYWJsZSA9ICh2YWx1ZTogYW55LCBfYXN5bmM6IGJvb2xlYW4gPSBmYWxzZSk6IGJvb2xlYW4gPT4gJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHZhbHVlPy5bX2FzeW5jID8gU3ltYm9sLmFzeW5jSXRlcmF0b3IgOiBTeW1ib2wuaXRlcmF0b3JdO1xyXG5cclxuLyoqXHJcbiAqIE9iamVjdCBhcnJheSB2YWx1ZXNcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAtIHBhcnNlIGFycmF5IHZhbHVlXHJcbiAqIEBwYXJhbSBlbnRyaWVzIC0gZW5hYmxlIGdldCBlbnRyaWVzIChpLmUuIGBba2V5OiBhbnksIHZhbHVlOiBhbnldW11gKSBpbnN0ZWFkIG9mIGRlZmF1bHQgdmFsdWVzIChpLmUuIGBhbnlbXWApXHJcbiAqIEBwYXJhbSBvYmplY3QgLSBlbmFibGUgZ2V0IGBPYmplY3QudmFsdWVzKHZhbHVlKWAvYE9iamVjdC5lbnRyaWVzKHZhbHVlKWBcclxuICogQHBhcmFtIGZsYXR0ZW4gLSBmbGF0dGVuIGRlcHRoIH4gYEFycmF5LmZsYXRgIGRlcHRoIChhbGlhczogYC0xYCA9PiBgQXJyYXkuZmxhdChJbmZpbml0eSlgLCBgdHJ1ZXxudWxsYCA9PiBgQXJyYXkuZmxhdCgpYClcclxuICogQHJldHVybnNcclxuICogLSBgYW55W11gIHZhbHVlcyBvciBgW2tleTogYW55LCB2YWx1ZTogYW55XVtdYCB3aGVuIGBlbnRyaWVzYCBhcmd1bWVudCBpcyBgdHJ1ZWBcclxuICogLSBgW3ZhbHVlXWAgd2hlbiBgdmFsdWVgIGFyZ3VtZW50IGlzIG5vdCBpdGVyYWJsZSBvciBhcnJheWFibGVcclxuICogLSBgW11gIHdoZW4gYHZhbHVlYCBhcmd1bWVudCBpcyBlbXB0eSB+IGBbXWAvYHt9YC9gdW5kZWZpbmVkYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF92YWx1ZXMgPSAodmFsdWU6IGFueSwgZW50cmllczogYm9vbGVhbiA9IGZhbHNlLCBvYmplY3Q6IGJvb2xlYW4gPSBmYWxzZSwgZmxhdHRlbj86IG51bWJlcnxib29sZWFufG51bGwpOiBhbnlbXSA9PiB7XHJcblx0bGV0IGl0ZW1zOiBhbnlbXSA9IHZhbHVlID09PSB1bmRlZmluZWQgPyBbXSA6IGVudHJpZXMgPyBbWycwJywgdmFsdWVdXSA6IFt2YWx1ZV07XHJcblx0aWYgKHZhbHVlICYmICdvYmplY3QnID09PSB0eXBlb2YgdmFsdWUgJiYgJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIHZhbHVlKXtcclxuXHRcdGlmIChPYmplY3QodmFsdWVbU3ltYm9sLml0ZXJhdG9yXSkgPT09IHZhbHVlW1N5bWJvbC5pdGVyYXRvcl0pe1xyXG5cdFx0XHRjb25zdCBoYXNfZW50cmllcyA9IChpdGVtcyA9IFsuLi52YWx1ZV0pLmxlbmd0aCAmJiBpdGVtcy5maW5kSW5kZXgodiA9PiAhKEFycmF5LmlzQXJyYXkodikgJiYgdi5sZW5ndGggPT09IDIgJiYgT2JqZWN0LmtleXModikgKyAnJyA9PT0gJzAsMScpKSA8IDA7XHJcblx0XHRcdGlmIChlbnRyaWVzKSBpdGVtcyA9IGhhc19lbnRyaWVzID8gaXRlbXMgOiBPYmplY3QuZW50cmllcyhpdGVtcyk7XHJcblx0XHRcdGVsc2UgaWYgKGhhc19lbnRyaWVzKXtcclxuXHRcdFx0XHRjb25zdCB2YWx1ZXM6IGFueVtdID0gW107XHJcblx0XHRcdFx0Zm9yIChjb25zdCB2IG9mIGl0ZW1zKSB2YWx1ZXMucHVzaCh2WzFdKTtcclxuXHRcdFx0XHRpdGVtcyA9IHZhbHVlcztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAob2JqZWN0KXtcclxuXHRcdFx0Y29uc3QgYXJyID0gT2JqZWN0LmVudHJpZXModmFsdWUpO1xyXG5cdFx0XHRpZiAoYXJyLmxlbmd0aCB8fCAoX2VtcHR5KHZhbHVlKSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpID09PSBPYmplY3QucHJvdG90eXBlKSl7XHJcblx0XHRcdFx0aWYgKCFlbnRyaWVzICYmIGFyci5sZW5ndGgpe1xyXG5cdFx0XHRcdFx0Y29uc3QgdmFsdWVzOiBhbnlbXSA9IFtdO1xyXG5cdFx0XHRcdFx0Zm9yIChjb25zdCB2IG9mIGFycikgdmFsdWVzLnB1c2godlsxXSk7XHJcblx0XHRcdFx0XHRpdGVtcyA9IHZhbHVlczsgXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaXRlbXMgPSBhcnI7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKF9lbXB0eSh2YWx1ZSkgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKSA9PT0gT2JqZWN0LnByb3RvdHlwZSkgaXRlbXMgPSBbXTsgLy97fVxyXG5cdH1cclxuXHRpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBmbGF0dGVuKXtcclxuXHRcdGxldCBkZXB0aDogYW55ID0gZmxhdHRlbjtcclxuXHRcdGlmIChmbGF0dGVuID09PSAtMSkgZGVwdGggPSBJbmZpbml0eTtcclxuXHRcdGVsc2UgaWYgKFtudWxsLCB0cnVlXS5pbmNsdWRlcyhkZXB0aCkpIGRlcHRoID0gdW5kZWZpbmVkO1xyXG5cdFx0aXRlbXMgPSBpdGVtcy5mbGF0KGRlcHRoKTtcclxuXHR9XHJcblx0cmV0dXJuIGl0ZW1zO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCBkdW1wIHZhbHVlIHdpdGggbGltaXQgbWF4IHN0cmluZyBsZW5ndGhcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAtIHBhcnNlIHZhbHVlXHJcbiAqIEBwYXJhbSBtYXhTdHJMZW5ndGggLSBtYXggc3RyaW5nIGxlbmd0aCBbZGVmYXVsdDogYDIwMGBdXHJcbiAqIEBwYXJhbSBmaXJzdCAtIHN1bW1hcml6ZSBvYmplY3QgYXJyYXkgdG8gY291bnQgYW5kIGZpcnN0IGVudHJ5IChpLmUuIGB7Y291bnQ6bnVtYmVyLGZpcnN0OmFueX1gKSBcclxuICogQHJldHVybnMgYGFueWAgLSBkdW1wIHZhbHVlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2R1bXBWYWwgPSAodmFsdWU6IGFueSwgbWF4U3RyTGVuZ3RoOiBudW1iZXIgPSAyMDAsIGZpcnN0OiBib29sZWFuID0gZmFsc2UpOiBhbnkgPT4ge1xyXG5cdGNvbnN0IG1pblN0ckxlbmd0aCA9IDIwO1xyXG5cdHZhbHVlID0gX2pzb25Db3B5KHZhbHVlKTtcclxuXHRtYXhTdHJMZW5ndGggPSAhKG1heFN0ckxlbmd0aCA9IF9pbnQobWF4U3RyTGVuZ3RoLCAyMDApKSA/IDAgOiAobWF4U3RyTGVuZ3RoID49IG1pblN0ckxlbmd0aCA/IG1heFN0ckxlbmd0aCA6IDIwMCk7XHJcblx0Y29uc3QgX21heFN0ciA9ICh2OiBhbnkpOiBhbnkgPT4ge1xyXG5cdFx0aWYgKCEoJ3N0cmluZycgPT09IHR5cGVvZiB2ICYmIHYubGVuZ3RoID4gbWF4U3RyTGVuZ3RoKSkgcmV0dXJuIHY7XHJcblx0XHRjb25zdCBhcHBlbmQgPSBgLi4uKCR7di5sZW5ndGh9KWA7XHJcblx0XHRyZXR1cm4gdi5zdWJzdHJpbmcoMCwgbWF4U3RyTGVuZ3RoIC0gYXBwZW5kLmxlbmd0aCkgKyBhcHBlbmQ7XHJcblx0fTtcclxuXHRjb25zdCBfZ2V0X2ZpcnN0ID0gKHZhbDogYW55KTogYW55ID0+IHtcclxuXHRcdGlmIChBcnJheS5pc0FycmF5KHZhbCkpe1xyXG5cdFx0XHRsZXQgc2FtZV9rZXlzID0gMSwgcHJldl9rZXlzID0gJyc7XHJcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgaSArKyl7XHJcblx0XHRcdFx0Y29uc3QgdiA9IHZhbFtpXTtcclxuXHRcdFx0XHRpZiAoT2JqZWN0KHYpICE9PSB2KXtcclxuXHRcdFx0XHRcdHNhbWVfa2V5cyA9IDA7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHYpO1xyXG5cdFx0XHRcdGlmIChrZXlzLmxlbmd0aCl7XHJcblx0XHRcdFx0XHRzYW1lX2tleXMgPSAwO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGNvbnN0IGtleXNfdmFsID0ga2V5cy5qb2luKCcsJyk7XHJcblx0XHRcdFx0aWYgKCFpKSBwcmV2X2tleXMgPSBrZXlzX3ZhbDtcclxuXHRcdFx0XHRlbHNlIGlmIChrZXlzX3ZhbCAhPT0gcHJldl9rZXlzKXtcclxuXHRcdFx0XHRcdHNhbWVfa2V5cyA9IDA7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKHNhbWVfa2V5cyAmJiB2YWwubGVuZ3RoKSByZXR1cm4ge2NvdW50OiB2YWwubGVuZ3RoLCBmaXJzdDogX2dldF9maXJzdCh2YWxbMF0pfTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB2YWw7XHJcblx0fTtcclxuXHRjb25zdCBfcGFyc2UgPSAodmFsOiBhbnkpOiBhbnkgPT4ge1xyXG5cdFx0aWYgKCdvYmplY3QnID09PSB0eXBlb2YgdmFsICYmIHZhbCl7XHJcblx0XHRcdGZvciAobGV0IGsgaW4gdmFsKXtcclxuXHRcdFx0XHRpZiAoIXZhbC5oYXNPd25Qcm9wZXJ0eShrKSkgY29udGludWU7XHJcblx0XHRcdFx0dmFsW2tdID0gX3BhcnNlKHZhbFtrXSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGVsc2UgdmFsID0gX21heFN0cih2YWwpO1xyXG5cdFx0cmV0dXJuIHZhbDtcclxuXHR9O1xyXG5cdHJldHVybiBfcGFyc2UoZmlyc3QgPyBfZ2V0X2ZpcnN0KHZhbHVlKSA6IHZhbHVlKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTb3J0IGFycmF5IHZhbHVlc1xyXG4gKiBcclxuICogQHBhcmFtIGFycmF5IC0gYXJyYXkgdmFsdWVzXHJcbiAqIEBwYXJhbSBzb3J0IC0gc29ydCAoZGVmYXVsdDogYGFzY2ApIH4gYDF8LTF8J2FzYyd8J2Rlc2MnfHtba2V5OiBzdHJpbmddOiAxfC0xfCdhc2MnfCdkZXNjJ31gXHJcbiAqIEByZXR1cm5zIFNvcnRlZCBgVFtdYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9zb3J0VmFsdWVzID0gPFQgPSBhbnk+KGFycmF5OiBUW10sIHNvcnQ/OiAxfC0xfCdhc2MnfCdkZXNjJ3x7W2tleTpzdHJpbmddOjF8LTF8J2FzYyd8J2Rlc2MnfSk6IFRbXSA9PiB7XHJcblx0Y29uc3QgX2NvbXBhcmUgPSAoYTogYW55LCBiOiBhbnkpOiBudW1iZXIgPT4ge1xyXG5cdFx0aWYgKCdzdHJpbmcnID09PSB0eXBlb2YgYSAmJiAnc3RyaW5nJyA9PT0gdHlwZW9mIGIgJiYgJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGE/LmxvY2FsZUNvbXBhcmUpIHJldHVybiBhLmxvY2FsZUNvbXBhcmUoYik7XHJcblx0XHRyZXR1cm4gYSA+IGIgPyAxIDogKGEgPCBiID8gLTEgOiAwKTtcclxuXHR9O1xyXG5cdGNvbnN0IF9kaXJlY3Rpb24gPSAodmFsOiBhbnkpOiBudW1iZXIgPT4ge1xyXG5cdFx0aWYgKCdudW1iZXInID09PSB0eXBlb2YgdmFsKSByZXR1cm4gdmFsID49IDAgPyAxIDogLTE7XHJcblx0XHRpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB2YWwpe1xyXG5cdFx0XHR2YWwgPSB2YWwudHJpbSgpLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdGlmICh2YWwuc3RhcnRzV2l0aCgnYXNjJykpIHJldHVybiAxO1xyXG5cdFx0XHRpZiAodmFsLnN0YXJ0c1dpdGgoJ2Rlc2MnKSkgcmV0dXJuIC0xO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIDE7XHJcblx0fTtcclxuXHRjb25zdCBfbWV0aG9kID0gKCk6ICgoYTogYW55LCBiOiBhbnkpPT5udW1iZXIpID0+IHtcclxuXHRcdGlmIChPYmplY3Qoc29ydCkgPT09IHNvcnQpe1xyXG5cdFx0XHRjb25zdCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMoc29ydCBhcyBhbnkpO1xyXG5cdFx0XHRpZiAoZW50cmllcy5sZW5ndGgpIHJldHVybiAoYSwgYikgPT4ge1xyXG5cdFx0XHRcdGxldCBpLCByZXN1bHQ7XHJcblx0XHRcdFx0Zm9yIChyZXN1bHQgPSAwLCBpID0gMDsgcmVzdWx0ID09PSAwIHx8IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSArKyl7XHJcblx0XHRcdFx0XHRjb25zdCBba2V5LCB2YWxdID0gZW50cmllc1tpXTtcclxuXHRcdFx0XHRcdHJlc3VsdCA9IF9jb21wYXJlKGE/LltrZXldLCBiPy5ba2V5XSkgKiBfZGlyZWN0aW9uKHZhbCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XHJcblx0XHRcdH07XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gKGEsIGIpID0+IF9jb21wYXJlKGEsIGIpICogX2RpcmVjdGlvbihzb3J0KTtcclxuXHR9O1xyXG5cdHJldHVybiBhcnJheS5zb3J0KF9tZXRob2QoKSk7XHJcbn07XHJcblxyXG4vKipcclxuICogUGFyc2UgdHJhbnNmb3JtIHRleHQgdGVtcGxhdGUgY29udGV4dCB2YWx1ZXNcclxuICogXHJcbiAqIC0gdGVtcGxhdGUgbXVzdCBiZSBpbiBkb3QgcGF0aCBwYXR0ZXJuIHdoZXJlIGZpcnN0IGRlbGltaXRlZCB2YWx1ZSBpcyB0aGUgY29udGV4dCBrZXkgbmFtZS5cclxuICogLSB0ZW1wbGF0ZSB2YWx1ZXMgbXVzdCBiZSBwdXQgaW4gY3VybHkgYnJhY2tldHMgd2hlbiB3aXRoaW4gbWl4ZWQgdGV4dC5cclxuICogLSBkb3QgcGF0aCBtYXRjaGluZyBpcyBjYXNlIGluc2Vuc2l0aXZlLlxyXG4gKiBcclxuICogQGV4YW1wbGVcclxuICogX3RyYW5zKCdNeSBuYW1lIGlzIHt1c2VyLm5hbWV9LicsIHtVc2VyOiB7TmFtZTogJ1Jvb3QnfX0sICdOVUxMJykgPT4gJ015IG5hbWUgaXMgUm9vdC4nXHJcbiAqIF90cmFucygnTXkgcGhvbmUgbnVtYmVyIGlzIHt1c2VyLnBob25lfS4nLCB7VXNlcjoge05hbWU6ICdSb290J319LCAnTlVMTCcpID0+ICdNeSBwaG9uZSBudW1iZXIgaXMgTlVMTC4nXHJcbiAqIF90cmFucygnYWRkcmVzcy5jaXR5Jywge0FkZHJlc3M6IHtDaXR5OiAnTmFpcm9iaSd9fSwgJ05VTEwnKSA9PiAnTmFpcm9iaSdcclxuICogX3RyYW5zKCdhZGRyZXNzLnRvd24nLCB7QWRkcmVzczoge0NpdHk6ICdOYWlyb2JpJywgdG93bjogdW5kZWZpbmVkfX0sICdOVUxMJykgPT4gJ3VuZGVmaW5lZCdcclxuICogX3RyYW5zKCdObyB0ZW1wbGF0ZS4nLCB7Zm9vOiAnYmFyJ30sICdOVUxMJykgPT4gJ05vIHRlbXBsYXRlLidcclxuICogX3RyYW5zKCdLRVMge2l0ZW0uYW1vdW50fS89Jywge2l0ZW06IHthbW91bnQ6IDQ1MDB9fSwgJ05VTEwnLCAodmFsdWU6c3RyaW5nLHBhdGg6c3RyaW5nLG5hbWU6c3RyaW5nKSA9PiBfY29tbWFzKHZhbHVlLCB0cnVlLCAyKSkgPT4gJ05vIHRlbXBsYXRlLidcclxuICogIFxyXG4gKiBcclxuICogQHBhcmFtIHRlbXBsYXRlIC0gcGFyc2UgdGVtcGxhdGUgfiB0ZXh0IHdpdGggdmFsdWUgdGVtcGxhdGUgKGUuZy4gYCdNeSBuYW1lIGlzIHt1c2VyLm5hbWV9J2ApXHJcbiAqIEBwYXJhbSBjb250ZXh0IC0gdmFsdWVzIGNvbnRleHQgfiBge1tuYW1lOiBzdHJpbmddOiBhbnl9YFxyXG4gKiBAcGFyYW0gX2RlZmF1bHQgLSBkZWZhdWx0IHZhbHVlIHdoZW4gdW5hYmxlIHRvIHJlc29sdmUgdGVtcGxhdGUgdmFsdWUgKGRlZmF1bHQ6IGAnTlVMTCdgKVxyXG4gKiBAcGFyYW0gX2Zvcm1hdCAtIGZvcm1hdCByZXNvbHZlZCB2YWx1ZSBjYWxsYmFjayAodGhpcyBhbGxvd3MgeW91IHRvIGZ1cnRoZXIgZWRpdCByZXNvbHZlZCB0ZW1wbGF0ZSBjb250ZXh0IHZhbHVlcylcclxuICogQHJldHVybnMgYHN0cmluZ2AgdHJhbnNmb3JtZWQgdGV4dCB3aGVyZSB0ZW1wbGF0ZSB2YWx1ZXMgYXJlIHJlcGxhY2VkIHdpdGggcmVzb2x2ZWQgY29udGV4dCB2YWx1ZXMgKHNlZSBleGFtcGxlcylcclxuICovXHJcbmV4cG9ydCBjb25zdCBfdHJhbnMgPSAodGVtcGxhdGU6IHN0cmluZywgY29udGV4dDoge1tuYW1lOiBzdHJpbmddOiBhbnl9LCBfZGVmYXVsdDogc3RyaW5nID0gJ05VTEwnLCBfZm9ybWF0PzogKHZhbHVlOnN0cmluZyxwYXRoOnN0cmluZyxuYW1lOnN0cmluZyk9PmFueSk6IHN0cmluZyA9PiB7XHJcblx0Y29uc3QgcGF0dGVybjogUmVnRXhwID0gL1xceyhbXzAtOWEtekEtWl0rKSgoXFwuW18wLTlhLXpBLVpdKykqKVxcfS9nO1xyXG5cdGNvbnN0IHZhbHVlOiBzdHJpbmcgPSBfc3RyKHRlbXBsYXRlKTtcclxuXHRpZiAoIXZhbHVlLnRyaW0oKSkgcmV0dXJuIHZhbHVlOyAvLy0tIGlnbm9yZXMgYmxhbmtcclxuXHRjb25zdCBtaXNzaW5nID0gYCEhXyR7RGF0ZS5ub3coKX1fISFgO1xyXG5cdGNvbnN0IF90cmFuc19mb3JtYXQ6ICgodmFsdWU6c3RyaW5nLHBhdGg6c3RyaW5nLG5hbWU6c3RyaW5nKT0+YW55KXx1bmRlZmluZWQgPSAnZnVuY3Rpb24nID09PSB0eXBlb2YgX2Zvcm1hdCA/IF9mb3JtYXQgOiB1bmRlZmluZWQ7XHJcblx0Y29uc3QgX3RyYW5zX2dldCA9IChuYW1lOiBzdHJpbmcsIHBhdGg6IHN0cmluZyA9ICcnKTogc3RyaW5nID0+IHtcclxuXHRcdGxldCB2YWw6IGFueSA9IF9kb3RHZXQobmFtZSwgY29udGV4dCwgdHJ1ZSwgMCwgbWlzc2luZyk7XHJcblx0XHRpZiAodmFsID09PSBtaXNzaW5nKSByZXR1cm4gbWlzc2luZztcclxuXHRcdGlmICghIShwYXRoID0gX3N0cihwYXRoLCB0cnVlKSkpIHZhbCA9IF9kb3RHZXQocGF0aCwgdmFsLCB0cnVlLCAwLCBtaXNzaW5nKTtcclxuXHRcdGlmICh2YWwgPT09IG1pc3NpbmcpIHJldHVybiBtaXNzaW5nO1xyXG5cdFx0aWYgKF90cmFuc19mb3JtYXQpIHZhbCA9IF90cmFuc19mb3JtYXQodmFsLCBwYXRoLCBuYW1lKTtcclxuXHRcdGNvbnN0IHRleHQgPSBBcnJheS5pc0FycmF5KHZhbCkgPyBmYWxzZSA6IF9zdHJpbmdhYmxlKHZhbCk7XHJcblx0XHRyZXR1cm4gdGV4dCAhPT0gZmFsc2UgPyB0ZXh0IDogX3N0cih2YWwsIGZhbHNlLCB0cnVlKTtcclxuXHR9O1xyXG5cdGlmICghcGF0dGVybi50ZXN0KHZhbHVlKSl7XHJcblx0XHRjb25zdCB2YWwgPSBfdHJhbnNfZ2V0KHZhbHVlKTtcclxuXHRcdHJldHVybiB2YWwgIT09IG1pc3NpbmcgPyB2YWwgOiB2YWx1ZTtcclxuXHR9XHJcblx0bGV0IGRlZmF1bHRfdmFsOiBzdHJpbmcgPSBfc3RyKF9kZWZhdWx0KTtcclxuXHRyZXR1cm4gdmFsdWUucmVwbGFjZShwYXR0ZXJuLCAoLi4uYXJncyk6IHN0cmluZyA9PiB7XHJcblx0XHRjb25zdCBuYW1lID0gYXJnc1sxXTtcclxuXHRcdGNvbnN0IHBhdGggPSBhcmdzWzJdLnJlcGxhY2UoL15cXC4vLCAnJyk7XHJcblx0XHRsZXQgdmFsID0gX3RyYW5zX2dldChuYW1lLCBwYXRoKTtcclxuXHRcdGlmICh2YWwgPT09IG1pc3NpbmcpIHZhbCA9IGRlZmF1bHRfdmFsO1xyXG5cdFx0cmV0dXJuIHZhbDtcclxuXHR9KTtcclxufTsiLCJpbXBvcnQgeyBfc3RyIH0gZnJvbSAnLi9fc3RyaW5nJztcclxuXHJcbi8qKlxyXG4gKiBQcm9taXNlIHJlc3VsdCBpbnRlcmZhY2VcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVByb21pc2VSZXN1bHQ8VFJlc3VsdD4ge1xyXG5cdHN0YXR1czogJ3Jlc29sdmVkJ3wncmVqZWN0ZWQnO1xyXG5cdGluZGV4OiBudW1iZXI7XHJcblx0dmFsdWU/OiBUUmVzdWx0O1xyXG5cdHJlYXNvbj86IGFueTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFBhcmFsbGVsIHJlc29sdmUgYGFycmF5YCB2YWx1ZXMgY2FsbGJhY2sgcHJvbWlzZXNcclxuICogLSBpLmUuIGF3YWl0IF9hc3luY0FsbDxudW1iZXIsIG51bWJlcj4oWzEsIDJdLCBhc3luYyAobnVtKSA9PiBudW0gKiAyKSAtLT4gW3tzdGF0dXM6ICdyZXNvbHZlZCcsIGluZGV4OiAwLCB2YWx1ZTogMn0sIHtzdGF0dXM6ICdyZXNvbHZlZCcsIGluZGV4OiAxLCB2YWx1ZTogNH1dXHJcbiAqIFxyXG4gKiBAcGFyYW0gYXJyYXkgIEVudHJpZXNcclxuICogQHBhcmFtIGNhbGxiYWNrICBFbnRyeSBjYWxsYmFja1xyXG4gKiBAcmV0dXJucyBgUHJvbWlzZTxJUHJvbWlzZVJlc3VsdDxUUmVzdWx0PltdPmBcclxuICovXHJcbmV4cG9ydCBjb25zdCBfYXN5bmNBbGwgPSBhc3luYzxUID0gYW55LCBUUmVzdWx0ID0gYW55PihhcnJheTogVFtdLCBjYWxsYmFjaz86ICh2YWx1ZTpULGluZGV4Om51bWJlcixsZW5ndGg6bnVtYmVyKT0+UHJvbWlzZTxUUmVzdWx0Pik6IFByb21pc2U8SVByb21pc2VSZXN1bHQ8VFJlc3VsdD5bXT4gPT4ge1xyXG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG5cdFx0Y29uc3QgX2J1ZmZlcjogSVByb21pc2VSZXN1bHQ8VFJlc3VsdD5bXSA9IFtdO1xyXG5cdFx0Y29uc3QgX3Jlc29sdmUgPSAoKSA9PiByZXNvbHZlKF9idWZmZXIpO1xyXG5cdFx0Y29uc3QgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xyXG5cdFx0aWYgKCFsZW5ndGgpIHJldHVybiBfcmVzb2x2ZSgpO1xyXG5cdFx0bGV0IGRvbmUgPSAwO1xyXG5cdFx0Y29uc3QgX2hhbmRsZXI6IHVuZGVmaW5lZHwoKHZhbHVlOlQsaW5kZXg6bnVtYmVyLGxlbmd0aDpudW1iZXIpPT5Qcm9taXNlPFRSZXN1bHQ+KSA9ICdmdW5jdGlvbicgPT09IHR5cGVvZiBjYWxsYmFjayA/IGNhbGxiYWNrIDogdW5kZWZpbmVkO1xyXG5cdFx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKyspe1xyXG5cdFx0XHRjb25zdCB2YWx1ZSA9IGFycmF5W2luZGV4XTtcclxuXHRcdFx0KGFzeW5jKCk9Pl9oYW5kbGVyID8gX2hhbmRsZXIodmFsdWUsIGluZGV4LCBsZW5ndGgpIDogdmFsdWUpKClcclxuXHRcdFx0LnRoZW4oKHZhbHVlOiBhbnkpID0+IHtcclxuXHRcdFx0XHRfYnVmZmVyLnB1c2goe3N0YXR1czogJ3Jlc29sdmVkJywgaW5kZXgsIHZhbHVlfSk7XHJcblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xyXG5cdFx0XHR9KVxyXG5cdFx0XHQuY2F0Y2goKHJlYXNvbjogYW55KSA9PiBfYnVmZmVyLnB1c2goe3N0YXR1czogJ3JlamVjdGVkJywgaW5kZXgsIHJlYXNvbn0pKVxyXG5cdFx0XHQuZmluYWxseSgoKSA9PiArK2RvbmUgPj0gbGVuZ3RoID8gX3Jlc29sdmUoKSA6IHVuZGVmaW5lZCk7XHJcblx0XHR9XHJcblx0fSk7XHJcbn07XHJcblxyXG4vKipcclxuICogR2V0IGFzeW5jIGl0ZXJhYmxlIHZhbHVlcyAoaS5lLiBgZm9yIGF3YWl0IChjb25zdCB2YWx1ZSBvZiBfYXN5bmNWYWx1ZXMoYXJyYXkpKXsuLi59YClcclxuICogXHJcbiAqIEBwYXJhbSBhcnJheSAgVmFsdWVzXHJcbiAqIEByZXR1cm5zIEFzeW5jIGl0ZXJhYmxlIG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9hc3luY1ZhbHVlcyA9IDxUID0gYW55PihhcnJheTogVFtdKToge1xyXG5cdHZhbHVlczogKCkgPT4gVFtdLFxyXG5cdHNpemU6ICgpID0+IG51bWJlcjtcclxuXHRlYWNoOiAoY2FsbGJhY2s6ICh2YWx1ZTogVCwgaW5kZXg6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIsIF9icmVhazogKCk9PnZvaWQpPT5Qcm9taXNlPGFueT4pID0+IFByb21pc2U8dm9pZD47XHJcblx0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXTogKCkgPT4ge1xyXG5cdFx0bmV4dDogKCkgPT4gUHJvbWlzZTx7ZG9uZTogYm9vbGVhbjsgdmFsdWU6IFR9PjtcclxuXHR9XHJcbn0gPT4gKHtcclxuXHR2YWx1ZXM6ICgpID0+IGFycmF5LFxyXG5cdHNpemU6ICgpID0+IGFycmF5Lmxlbmd0aCxcclxuXHRhc3luYyBlYWNoKGNhbGxiYWNrOiAodmFsdWU6IFQsIGluZGV4OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyLCBfYnJlYWs6ICgpPT52b2lkKT0+UHJvbWlzZTxhbnk+KTogUHJvbWlzZTx2b2lkPiB7XHJcblx0XHRsZXQgc2VsZiA9IHRoaXMsIGNhbmNlbCA9IGZhbHNlLCBpbmRleCA9IC0xLCBfYnJlYWsgPSAoKSA9PiB7XHJcblx0XHRcdGNhbmNlbCA9IHRydWU7XHJcblx0XHR9O1xyXG5cdFx0Zm9yIGF3YWl0IChjb25zdCB2YWx1ZSBvZiBzZWxmKXtcclxuXHRcdFx0aW5kZXggKys7XHJcblx0XHRcdGlmIChjYW5jZWwpIGJyZWFrO1xyXG5cdFx0XHRhd2FpdCBjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIHNlbGYuc2l6ZSgpLCBfYnJlYWspO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpe1xyXG5cdFx0bGV0IGluZGV4ID0gMDtcclxuXHRcdGNvbnN0IHRoYXQgPSB0aGlzO1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0YXN5bmMgbmV4dCgpOiBQcm9taXNlPHtkb25lOiBib29sZWFuOyB2YWx1ZTogVH0+IHtcclxuXHRcdFx0XHRsZXQgdmFsdWU6IFQgPSB1bmRlZmluZWQgYXMgVCwgbGVuZ3RoID0gdGhhdC5zaXplKCk7XHJcblx0XHRcdFx0aWYgKGluZGV4ID49IGxlbmd0aCkgcmV0dXJuIHtkb25lOiB0cnVlLCB2YWx1ZX07XHJcblx0XHRcdFx0dmFsdWUgPSBhd2FpdCBQcm9taXNlLnJlc29sdmUoYXJyYXlbaW5kZXhdKTtcclxuXHRcdFx0XHRpbmRleCArKztcclxuXHRcdFx0XHRyZXR1cm4ge2RvbmU6IGZhbHNlLCB2YWx1ZX07XHJcblx0XHRcdH0sXHJcblx0XHR9O1xyXG5cdH0sXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIERlbGF5IHByb21pc2VcclxuICogXHJcbiAqIEBwYXJhbSB0aW1lb3V0ICBEZWxheSBtaWxsaXNlY29uZHNcclxuICogQHJldHVybnMgYFByb21pc2U8bnVtYmVyPmAgdGltZW91dFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9zbGVlcCA9IGFzeW5jICh0aW1lb3V0OiBudW1iZXIpOiBQcm9taXNlPG51bWJlcj4gPT4ge1xyXG5cdHRpbWVvdXQgPSAhaXNOYU4odGltZW91dCkgJiYgdGltZW91dCA+PSAwID8gdGltZW91dCA6IDBcclxuXHRyZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUodGltZW91dCksIHRpbWVvdXQpKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXNvbHZlIHByb21pc2UgY2FsbGJhY2svdmFsdWVcclxuICogXHJcbiAqIEBwYXJhbSB0aGlzIC0gY2FsbCBjb250ZXh0XHJcbiAqIEBwYXJhbSBwcm9taXNlIC0gcmVzb2x2ZSB+IGAoKT0+UHJvbWlzZTxhbnk+fGFueWAgY2FsbGJhY2sgcmVzdWx0IHwgYGFueWAgdmFsdWVcclxuICogQHBhcmFtIF9uZXcgLSB3aGV0aGVyIHRvIHJldHVybiBuZXcgcHJvbWlzZVxyXG4gKiBAcmV0dXJucyBgUHJvbWlzZTxhbnk+YCB+IGBQcm9taXNlLnJlc29sdmVgIHZhbHVlL3Jlc3VsdFxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9yZXNvbHZlKHRoaXM6IGFueSwgcHJvbWlzZTogKCgpPT5Qcm9taXNlPGFueT58YW55KXxhbnksIF9uZXc6IGJvb2xlYW4gPSBmYWxzZSk6IFByb21pc2U8YW55PiB7XHJcblx0Y29uc3QgcmVzb2x2ZWQgPSBQcm9taXNlLnJlc29sdmUoJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIHByb21pc2UgPyBwcm9taXNlIDogKGFzeW5jICgpID0+IHByb21pc2UuY2FsbCh0aGlzKSkoKSk7XHJcblx0cmV0dXJuICFfbmV3ID8gcmVzb2x2ZWQgOiBuZXcgUHJvbWlzZSgocmVzb2x2ZTogKHZhbHVlOiBhbnkpPT52b2lkLCByZWplY3Q6IChyZWFzb246IGFueSk9PnZvaWQpID0+IHJlc29sdmVkLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KSk7XHJcbn07XHJcblxyXG4vKipcclxuICogUGVuZGluZyBwcm9taXNlIGludGVyZmFjZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJUGVuZGluZ1Byb21pc2Uge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIC0gdW5pcXVlIHByb21pc2Uga2V5L25hbWUvSURcclxuXHQgKi9cclxuXHRrZXk6IHN0cmluZztcclxuXHJcblx0LyoqXHJcblx0ICogLSBwcm9taXNlIGluc3RhbmNlXHJcblx0ICovXHJcblx0cHJvbWlzZTogUHJvbWlzZTxhbnk+O1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIC0gcHJvbWlzZSByZXNvbHZlZC9yZWplY3RlZC9hYm9ydGVkXHJcblx0ICovXHJcblx0ZG9uZTogYm9vbGVhbjtcclxuXHJcblx0LyoqXHJcblx0ICogLSBwcm9taXNlIHJlc29sdmVkIChzdWNjZXNzZnVsKSB+IGBmYWxzZWAgd2hlbiBwZW5kaW5nIG9yIHJlamVjdGVkXHJcblx0ICovXHJcblx0cmVzb2x2ZWQ6IGJvb2xlYW47XHJcblxyXG5cdC8qKlxyXG5cdCAqIC0gcHJvbWlzZSBhYm9ydGVkXHJcblx0ICovXHJcblx0YWJvcnRlZDogYm9vbGVhbjtcclxuXHJcblx0LyoqXHJcblx0ICogLSBzdGFydCB0aW1lIH4gcGVuZGluZyBwcm9taXNlIGNyZWF0ZSB0aW1lIChtaWxsaXNlY29uZHMgaS5lLiBgRGF0ZS5ub3coKWApXHJcblx0ICovXHJcblx0dGltZV9zdGFydDogbnVtYmVyO1xyXG5cclxuXHQvKipcclxuXHQgKiAtIHN0b3AgdGltZSB+IHRpbWUgcmVzb2x2ZWQvcmVqZWN0ZWQvYWJvcnRlZCAobWlsbGlzZWNvbmRzIGkuZS4gYERhdGUubm93KClgKVxyXG5cdCAqL1xyXG5cdHRpbWVfc3RvcD86IG51bWJlcjtcclxuXHJcblx0LyoqXHJcblx0ICogLSBzdG9wIHRpbWUgfiB0aW1lIHJlc29sdmVkL3JlamVjdGVkIChtaWxsaXNlY29uZHMgaS5lLiBgRGF0ZS5ub3coKWApXHJcblx0ICovXHJcblx0dGltZV9lbmQ/OiBudW1iZXI7XHJcblxyXG5cdC8qKlxyXG5cdCAqIC0gcHJldmlvdXMgY2hhaW4gcHJvbWlzZSAocmVzb2x2ZWQpXHJcblx0ICovXHJcblx0cHJldmlvdXM/OiBJUGVuZGluZ1Byb21pc2U7XHJcblxyXG5cdC8qKlxyXG5cdCAqIC0gcmVzb2x2ZSBuZXh0IGNoYWluIHByb21pc2VcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gcHJldmlvdXMgLSBwcmV2aW91cyBgSVBlbmRpbmdQcm9taXNlYFxyXG5cdCAqIEByZXR1cm5zIGBQcm9taXNlPGFueT5gXHJcblx0ICovXHJcblx0bmV4dD86IChwcmV2aW91czpJUGVuZGluZ1Byb21pc2UpPT5Qcm9taXNlPGFueT47XHJcblxyXG5cdC8qKlxyXG5cdCAqIC0gY2FuY2VsIHBlbmRpbmcgcHJvbWlzZVxyXG5cdCAqIFxyXG5cdCAqIEByZXR1cm5zIGB2b2lkYFxyXG5cdCAqL1xyXG5cdGFib3J0OiAoKT0+dm9pZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBjbGFzcyBwZW5kaW5nIHByb21pc2UgYWJvcnQgZXJyb3JcclxuICovXHJcbmV4cG9ydCBjbGFzcyBQZW5kaW5nQWJvcnRFcnJvciBleHRlbmRzIEVycm9yIHtcclxuXHRuYW1lOiBzdHJpbmcgPSAnUGVuZGluZ0Fib3J0RXJyb3InO1xyXG5cdHBlbmRpbmc6IElQZW5kaW5nO1xyXG5cdGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZywgcGVuZGluZzogSVBlbmRpbmcpe1xyXG5cdFx0c3VwZXIobWVzc2FnZSk7XHJcblx0XHR0aGlzLnBlbmRpbmcgPSBwZW5kaW5nO1xyXG5cdH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFBlbmRpbmcgcHJvbWlzZSBpdGVtIGludGVyZmFjZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJUGVuZGluZyB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogLSBwcm9taXNlIGtleSB+IHVuaXF1ZSBpZGVudGlmaWVyIChpZ25vcmVzL2NoYWlucyBkdXBsaWNhdGUpXHJcblx0ICovXHJcblx0a2V5OiBzdHJpbmc7XHJcblxyXG5cdC8qKlxyXG5cdCAqIC0gcGVuZGluZyBwcm9taXNlXHJcblx0ICovXHJcblx0cHJvbWlzZTogUHJvbWlzZTxhbnk+O1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIC0gcmVzb2x2ZWQgc3RhdGUgfiBgMGAgPSBwZW5kaW5nLCBgMWAgPSByZXNvbHZlZCwgYC0xYCA9IHJlamVjdGVkXHJcblx0ICovXHJcblx0cmVzb2x2ZWQ6IC0xfDB8MTtcclxuXHJcblx0LyoqXHJcblx0ICogLSB3aGV0aGVyIHRvIGtlZXAgcmVzb2x2ZWQgcHJvbWlzZSBpbiBjYWNoZSB+IHBlbmRpbmcgcHJvbWlzZXMgYXJlIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBmcm9tIGNhY2hlIGJ5IGRlZmF1bHQgb3Igb24gcmVqZWN0aW9uLlxyXG5cdCAqL1xyXG5cdGtlZXA6IGJvb2xlYW47XHJcblxyXG5cdC8qKlxyXG5cdCAqIC0gd2hldGhlciBwZW5kaW5nIHByb21pc2Ugd2FzIGFib3J0ZWRcclxuXHQgKi9cclxuXHRhYm9ydGVkOiBib29sZWFuO1xyXG5cclxuXHQvKipcclxuXHQgKiAtIHdoZXRoZXIgcGVuZGluZyBwcm9taXNlIHdhcyBhYm9ydGVkXHJcblx0ICovXHJcblx0YWJvcnRFcnJvcj86IFBlbmRpbmdBYm9ydEVycm9yO1xyXG5cclxuXHQvKipcclxuXHQgKiAtIGFib3J0IHBlbmRpbmcgcHJvbWlzZSB+IGFib3J0ZWQgcGVuZGluZyBwcm9taXNlcyB3aWxsIHJlamVjdCB3aXRoIGBBYm9ydFBlbmRpbmdFcnJvcmAgcmVhc29uXHJcblx0ICogXHJcblx0ICogQHBhcmFtIHJlYXNvbiAtIHNwZWNpZnkgYWJvcnQgcmVhc29uIChkZWZhdWx0OiBgJ2Fib3J0ZWQnYClcclxuXHQgKi9cclxuXHRhYm9ydDogKHJlYXNvbj86c3RyaW5nKT0+dm9pZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFBlbmRpbmcgcHJvbWlzZSBpbnRlcmZhY2UgfiBgZXh0ZW5kcyBQcm9taXNlPGFueT5gXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElQZW5kaW5nUHJvbWlzZSBleHRlbmRzIFByb21pc2U8YW55PiB7XHJcblx0cGVuZGluZzogSVBlbmRpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQZW5kaW5nIHByb21pc2UgdGFzayBjYWNoZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFBFTkRJTkdfQ0FDSEU6IHtba2V5OiBzdHJpbmddOiBJUGVuZGluZ30gPSB7fTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUvcmVzdW1lIHBlbmRpbmcgcHJvbWlzZVxyXG4gKiBcclxuICogQHBhcmFtIGtleSAtIHVuaXF1ZSBwcm9taXNlIGtleS9uYW1lL0lEIH4gYHN0cmluZ2AgKGkuZS4gYFN0cmluZyhEYXRlLm5vdygpKWApXHJcbiAqIEBwYXJhbSBwcm9taXNlIC0gcHJvbWlzZSBpbnN0YW5jZSBjcmVhdG9yIGNhbGxiYWNrIH4gYCgpPT5Qcm9taXNlPFRSZXN1bHQ+YFxyXG4gKiBAcGFyYW0gbW9kZSAtIG5ldyBwZW5kaW5nIGJlaGF2aW9yIHdoZW4gYGtleWAgZHVwbGljYXRlIGV4aXN0czpcclxuICogLSBgMGAgPSBpZ25vcmUgKGRlZmF1bHQpIH4gcmVzb2x2ZSBwZW5kaW5nXHJcbiAqIC0gYDFgID0gcmVwbGFjZSB+IHJlcGxhY2UgcGVuZGluZyBwcm9taXNlXHJcbiAqIC0gYDJgID0gcmV0cnkgfiByZXNvbHZlIG5leHQgaWYgcGVuZGluZyBwcm9taXNlIHJlamVjdGlvblxyXG4gKiAtIGAzYCA9IGNoYWluIH4gcmVzb2x2ZSBuZXh0IGFmdGVyIHBlbmRpbmcgcHJvbWlzZSBpcyBkb25lIChyZXNvbHZlcy9yZWplY3RzKVxyXG4gKiBAcGFyYW0ga2VlcCAtIHdoZXRoZXIgdG8ga2VlcCByZXNvbHZlZCBwcm9taXNlIGluIGNhY2hlIChkZWZhdWx0OiBgZmFsc2VgKSB+IHBlbmRpbmcgcHJvbWlzZXMgYXJlIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBmcm9tIGNhY2hlIGJ5IGRlZmF1bHQgb3Igb24gcmVqZWN0aW9uLlxyXG4gKiBAcmV0dXJucyBgSVBlbmRpbmdQcm9taXNlYCB+IGBleHRlbmRzIFByb21pc2U8YW55PmBcclxuICovXHJcbmV4cG9ydCBjb25zdCBfcGVuZGluZyA9IChrZXk6IHN0cmluZywgcHJvbWlzZTogKCk9PlByb21pc2U8YW55PiwgbW9kZTogMHwxfDJ8MyA9IDAsIGtlZXA6IGJvb2xlYW4gPSBmYWxzZSk6IElQZW5kaW5nUHJvbWlzZSA9PiB7XHJcblx0aWYgKCEoa2V5ID0gX3N0cihrZXksIHRydWUpKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBwZW5kaW5nIGBrZXlgIHZhbHVlLicpO1xyXG5cdGlmICgnZnVuY3Rpb24nICE9PSB0eXBlb2YgcHJvbWlzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBwZW5kaW5nIGBwcm9taXNlYCBjYWxsYmFjayBmdW5jdGlvbi4nKTtcclxuXHRsZXQgX3BlbmRpbmdfcmVzb2x2ZTogKCh2YWx1ZTphbnkpPT52b2lkKXx1bmRlZmluZWQgPSB1bmRlZmluZWQ7IFxyXG5cdGxldCBfcGVuZGluZ19yZWplY3Q6ICgocmVhc29uOmFueSwgYWJvcnQ/OmJvb2xlYW4pPT52b2lkKXx1bmRlZmluZWQgPSB1bmRlZmluZWQ7IFxyXG5cdGxldCBwZW5kaW5nOiBJUGVuZGluZyA9IFBFTkRJTkdfQ0FDSEVba2V5XTtcclxuXHRjb25zdCBjdXJyZW50ID0gcGVuZGluZyAmJiBwZW5kaW5nLnByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlICYmIHBlbmRpbmcucmVzb2x2ZWQgPiAtMSA/IHBlbmRpbmcucHJvbWlzZSA6IHVuZGVmaW5lZDtcclxuXHRpZiAoIWN1cnJlbnQgfHwgbW9kZSl7XHJcblx0XHRjb25zdCBuZXh0X3Byb21pc2UgPSAoIWN1cnJlbnQgfHwgbW9kZSA9PT0gMSkgPyBfcmVzb2x2ZShwcm9taXNlKSA6IF9yZXNvbHZlKGN1cnJlbnQsIHRydWUpXHJcblx0XHQudGhlbihhc3luYyAodmFsdWU6IGFueSkgPT4gbW9kZSA9PT0gMiA/IHZhbHVlIDogX3Jlc29sdmUocHJvbWlzZSkpXHJcblx0XHQuY2F0Y2goYXN5bmMgKCkgPT4gX3Jlc29sdmUocHJvbWlzZSkpO1xyXG5cdFx0cGVuZGluZyA9IFBFTkRJTkdfQ0FDSEVba2V5XSA9IHtcclxuXHRcdFx0a2V5LFxyXG5cdFx0XHRwcm9taXNlOiBuZXh0X3Byb21pc2UsXHJcblx0XHRcdHJlc29sdmVkOiAwLFxyXG5cdFx0XHRrZWVwLFxyXG5cdFx0XHRhYm9ydGVkOiBmYWxzZSxcclxuXHRcdFx0YWJvcnRFcnJvcjogdW5kZWZpbmVkLFxyXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24ocmVhc29uPzogc3RyaW5nKTogdm9pZCB7XHJcblx0XHRcdFx0Y29uc3QgdGhhdCA9IHRoaXM7XHJcblx0XHRcdFx0aWYgKCEoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIF9wZW5kaW5nX3JlamVjdCAmJiAhdGhhdC5yZXNvbHZlZCAmJiAhdGhhdC5hYm9ydGVkKSkgcmV0dXJuO1xyXG5cdFx0XHRcdF9wZW5kaW5nX3JlamVjdCh0aGF0LmFib3J0RXJyb3IgPSBuZXcgUGVuZGluZ0Fib3J0RXJyb3IoX3N0cihyZWFzb24sIHRydWUpIHx8ICdhYm9ydGVkJywgdGhhdCksIHRoYXQuYWJvcnRlZCA9IHRydWUpO1xyXG5cdFx0XHR9LFxyXG5cdFx0fTtcclxuXHR9XHJcblx0ZWxzZSB7XHJcblx0XHRwZW5kaW5nLmFib3J0RXJyb3IgPSB1bmRlZmluZWQ7XHJcblx0XHRwZW5kaW5nLmFib3J0ZWQgPSBmYWxzZTtcclxuXHR9XHJcblx0bGV0IHJlc29sdmVkOiAtMXwwfDEgPSAwO1xyXG5cdGNvbnN0IHBlbmRpbmdfcHJvbWlzZTogSVBlbmRpbmdQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmU6ICh2YWx1ZTogYW55KT0+dm9pZCwgcmVqZWN0OiAocmVhc29uOiBhbnkpPT52b2lkKSA9PiB7XHJcblx0XHRfcGVuZGluZ19yZXNvbHZlID0gKHZhbHVlOiBhbnkpOiB2b2lkID0+IHtcclxuXHRcdFx0aWYgKCFyZXNvbHZlZCl7XHJcblx0XHRcdFx0cmVzb2x2ZWQgPSAxO1xyXG5cdFx0XHRcdHJlc29sdmUodmFsdWUpO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIGVsc2UgY29uc29sZS5kZWJ1ZygnLS0tIHBlbmRpbmcgcmVzb2x2ZSAtIGlnbm9yZWQ6Jywge2tleSwgdmFsdWUsIHJlc29sdmVkfSk7IC8vVE9ETzogcmVtb3ZlIGRlYnVnIGxvZ1xyXG5cdFx0XHRwZW5kaW5nLnJlc29sdmVkID0gMTtcclxuXHRcdFx0aWYgKFBFTkRJTkdfQ0FDSEVba2V5XSA9PT0gcGVuZGluZyAmJiAhcGVuZGluZy5rZWVwKSBkZWxldGUgUEVORElOR19DQUNIRVtrZXldO1xyXG5cdFx0fTtcclxuXHRcdF9wZW5kaW5nX3JlamVjdCA9IChyZWFzb246IGFueSwgYWJvcnQ6IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWQgPT4ge1xyXG5cdFx0XHRpZiAoIXJlc29sdmVkKXtcclxuXHRcdFx0XHRyZXNvbHZlZCA9IC0xO1xyXG5cdFx0XHRcdHJlamVjdChyZWFzb24pO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIGVsc2UgY29uc29sZS5kZWJ1ZygnLS0tIHBlbmRpbmcgcmVqZWN0IC0gaWdub3JlZDonLCB7a2V5LCByZWFzb24sIHJlc29sdmVkfSk7IC8vVE9ETzogcmVtb3ZlIGRlYnVnIGxvZ1xyXG5cdFx0XHRpZiAoYWJvcnQpIHJldHVybjtcclxuXHRcdFx0cGVuZGluZy5yZXNvbHZlZCA9IC0xO1xyXG5cdFx0XHRpZiAoUEVORElOR19DQUNIRVtrZXldID09PSBwZW5kaW5nKSBkZWxldGUgUEVORElOR19DQUNIRVtrZXldO1xyXG5cdFx0fTtcclxuXHRcdGNvbnN0IF9yZWplY3QgPSAocmVhc29uOiBhbnkpOiB2b2lkID0+IHZvaWQgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBfcGVuZGluZ19yZWplY3QgPyBfcGVuZGluZ19yZWplY3QocmVhc29uKSA6IG51bGwpO1xyXG5cdFx0cGVuZGluZy5wcm9taXNlLnRoZW4oX3BlbmRpbmdfcmVzb2x2ZSwgX3JlamVjdCk7XHJcblx0fSkgYXMgYW55O1xyXG5cdHBlbmRpbmdfcHJvbWlzZS5wZW5kaW5nID0gcGVuZGluZztcclxuXHRyZXR1cm4gcGVuZGluZ19wcm9taXNlO1xyXG59XHJcblxyXG4vKipcclxuICogQWJvcnQgY2FjaGVkIHBlbmRpbmcgcHJvbWlzZXNcclxuICogXHJcbiAqIEBwYXJhbSByZW1vdmUgLSB3aGV0aGVyIHRvIHJlbW92ZSBhYm9ydGVkIHByb21pc2UgZnJvbSBjYWNoZSAoZGVmYXVsdDogYGZhbHNlYClcclxuICogQHBhcmFtIGtleSAtIHNwZWNpZnkgY2FjaGVkIHByb21pc2Uga2V5IHRvIGFib3J0IChkZWZhdWx0OiBgYWxsYCB+IHdoZW4ga2V5IGlzIGB1bmRlZmluZWRgL2JsYW5rKVxyXG4gKiBAcGFyYW0gcmVhc29uIC0gc3BlY2lmeSBhYm9ydCByZWFzb24gKGRlZmF1bHQ6IGAnYWJvcnRlZCdgKVxyXG4gKiBAcmV0dXJucyBgdm9pZGBcclxuICovXHJcbmV4cG9ydCBjb25zdCBfcGVuZGluZ0Fib3J0ID0gKHJlbW92ZTogYm9vbGVhbiA9IGZhbHNlLCBrZXk/OiBzdHJpbmcsIHJlYXNvbj86IHN0cmluZyk6IHZvaWQgPT4ge1xyXG5cdGlmIChrZXkgPSBfc3RyKGtleSwgdHJ1ZSkpe1xyXG5cdFx0Y29uc3QgcGVuZGluZyA9IFBFTkRJTkdfQ0FDSEVba2V5XTtcclxuXHRcdGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgcGVuZGluZz8uYWJvcnQpIHBlbmRpbmcuYWJvcnQocmVhc29uKTtcclxuXHRcdGlmIChyZW1vdmUgJiYgcGVuZGluZz8ua2V5KSBkZWxldGUgUEVORElOR19DQUNIRVtwZW5kaW5nLmtleV07XHJcblx0fVxyXG5cdGVsc2Uge1xyXG5cdFx0Zm9yIChjb25zdCBwZW5kaW5nIG9mIE9iamVjdC52YWx1ZXMoUEVORElOR19DQUNIRSkpe1xyXG5cdFx0XHRpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHBlbmRpbmc/LmFib3J0KSBwZW5kaW5nLmFib3J0KHJlYXNvbik7XHJcblx0XHRcdGlmIChyZW1vdmUgJiYgcGVuZGluZz8ua2V5KSBkZWxldGUgUEVORElOR19DQUNIRVtwZW5kaW5nLmtleV07XHJcblx0XHR9XHJcblx0fVxyXG59OyIsIi8qKlxyXG4gKiBRdWV1ZSBvYmplY3QgaW50ZXJmYWNlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElRdWV1ZTxUPiB7XHJcblx0Y291bnQ6IG51bWJlcjtcclxuXHRsZW5ndGg6IG51bWJlcjtcclxuXHRpc0VtcHR5OiBib29sZWFuO1xyXG5cdGVucXVldWUodmFsdWU6IFQpOiB2b2lkO1xyXG5cdGRlcXVldWUoKTogVHx1bmRlZmluZWQ7XHJcblx0cGVlaygpOiBUfHVuZGVmaW5lZDtcclxuXHR2YWx1ZXMoKTogVFtdO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlIHF1ZXVlIG9iamVjdFxyXG4gKiBcclxuICogQHJldHVybnMgYElRdWV1ZWBcclxuICovXHJcbmV4cG9ydCBjb25zdCBfcXVldWUgPSA8VCA9IGFueT4oKTogSVF1ZXVlPFQ+ID0+IHtcclxuXHRjb25zdCBpdGVtczoge1trZXk6IG51bWJlcl06IFR9ID0ge307XHJcblx0bGV0IGhlYWQ6IG51bWJlciA9IDA7XHJcblx0bGV0IHRhaWw6IG51bWJlciA9IDA7XHJcblx0cmV0dXJuIHtcclxuXHRcdGdldCBjb3VudCgpOiBudW1iZXIge1xyXG5cdFx0XHRyZXR1cm4gdGFpbDtcclxuXHRcdH0sXHJcblx0XHRnZXQgbGVuZ3RoKCk6IG51bWJlciB7XHJcblx0XHRcdHJldHVybiB0YWlsIC0gaGVhZDtcclxuXHRcdH0sXHJcblx0XHRnZXQgaXNFbXB0eSgpOiBib29sZWFuIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMubGVuZ3RoID09PSAwO1xyXG5cdFx0fSxcclxuXHRcdGVucXVldWUodmFsdWU6IFQpOiB2b2lkIHtcclxuXHRcdFx0aXRlbXNbdGFpbF0gPSB2YWx1ZTtcclxuXHRcdFx0dGFpbCArKztcclxuXHRcdH0sXHJcblx0XHRkZXF1ZXVlKCk6IFR8dW5kZWZpbmVkIHtcclxuXHRcdFx0Y29uc3QgaXRlbSA9IGl0ZW1zW2hlYWRdO1xyXG5cdFx0XHRkZWxldGUgaXRlbXNbaGVhZF07XHJcblx0XHRcdGhlYWQgKys7XHJcblx0XHRcdHJldHVybiBpdGVtO1xyXG5cdFx0fSxcclxuXHRcdHBlZWsoKTogVHx1bmRlZmluZWQge1xyXG5cdFx0XHRyZXR1cm4gaXRlbXNbaGVhZF07XHJcblx0XHR9LFxyXG5cdFx0dmFsdWVzKCk6IFRbXSB7XHJcblx0XHRcdHJldHVybiBPYmplY3QudmFsdWVzKGl0ZW1zKTtcclxuXHRcdH0sXHJcblx0fTtcclxufTsiLCJpbXBvcnQgeyBib29sIH0gZnJvbSAnLi4vdHlwZXMnO1xyXG5pbXBvcnQgeyBfanNvblN0cmluZ2lmeSB9IGZyb20gJy4vX2pzb24nO1xyXG5cclxuLyoqXHJcbiAqIEdldCB1bmlxdWUgc3RyaW5nIG9mIHJhbmRvbSBjaGFyYWN0ZXJzXHJcbiAqIFxyXG4gKiBAZXhhbXBsZVxyXG4gKiBfeHVpZCgpID0+ICd6dDdlZzRldTNiNm1mNjZqZ2EnIDE4XHJcbiAqIFxyXG4gKiBAcmV0dXJucyBgc3RyaW5nYCB+IGFscGhhbnVtZXJpYyBsb3dlcmNhc2VcclxuICovXHJcbmV4cG9ydCBjb25zdCBfeHVpZCA9ICgpOiBzdHJpbmcgPT4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIpICsgKG5ldyBEYXRlKCkpLmdldFRpbWUoKS50b1N0cmluZygzNik7XHJcblxyXG4vKipcclxuICogR2V0IHVuaXF1ZSBzdHJpbmcgb2YgcmFuZG9tIGNoYXJhY3RlcnMgYHN0cmluZ2AgfiBhbHBoYW51bWVyaWMgbG93ZXJjYXNlXHJcbiAqIFxyXG4gKiBAZXhhbXBsZVxyXG4gKiBfdXVpZCgpID0+ICdnOWVlbTV0cnkzcGxsOXVlJyAxNlxyXG4gKiBfdXVpZCgyMCkgPT4gJ2s2eW8yemd6b2RqbGw5dWVyczR1JyAyMFxyXG4gKiBfdXVpZCg3LCAndGVzdF8nKSA9PiAndGVzdF8zYm14ajJ0JyAxMlxyXG4gKiBfdXVpZCg3LCAndGVzdF97dXVpZH1fZXhhbXBsZScpID0+ICd0ZXN0X2xrOXI1dHZfZXhhbXBsZScgMjBcclxuICogX3V1aWQoNywgJ3Rlc3Rfe3V1aWR9X3t1dWlkfV9leGFtcGxlJykgPT4gJ3Rlc3RfZzk0OHZxZl8wczZtczh5X2V4YW1wbGUnIDI4XHJcbiAqIFxyXG4gKiBAcGFyYW0gbGVuZ3RoIC0gdXVpZCBsZW5ndGggLSBpbnRlZ2VyIGBudW1iZXJgIG1pbj1gN2AsIG1heD1gNjRgIChkZWZhdWx0IGAxNmApXHJcbiAqIEBwYXJhbSB0ZW1wbGF0ZSAtIHV1aWQgdGVtcGxhdGUgLSB0cmltbWVkIGBzdHJpbmdgIH4gYXBwZW5kcyB3aGVuIGAne3V1aWR9J2Agbm90IGluIHRlbXBsYXRlXHJcbiAqIEByZXR1cm5zIHVuaXF1ZSBgc3RyaW5nYCB+IGFscGhhbnVtZXJpYyBsb3dlcmNhc2UgYChsZW5ndGhbbWluOiA3LCBtYXg6IDY0XSlgXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3V1aWQgPSAobGVuZ3RoPzogbnVtYmVyLCB0ZW1wbGF0ZT86IHN0cmluZyk6IHN0cmluZyA9PiB7XHJcblx0Y29uc3QgbGVuOiBudW1iZXIgPSBsZW5ndGggIT09IHVuZGVmaW5lZCAmJiAhaXNOYU4ocGFyc2VJbnQobGVuZ3RoICsgJycpKSAmJiBOdW1iZXIuaXNJbnRlZ2VyKGxlbmd0aCkgJiYgbGVuZ3RoID49IDcgJiYgbGVuZ3RoIDw9IDY0ID8gbGVuZ3RoIDogMTY7XHJcblx0Y29uc3QgX2NyZWF0ZSA9ICgpID0+IHtcclxuXHRcdGxldCBidWZmZXIgPSAnJztcclxuXHRcdHdoaWxlIChidWZmZXIubGVuZ3RoIDwgbGVuKSBidWZmZXIgKz0gX3h1aWQoKTtcclxuXHRcdHJldHVybiBidWZmZXIuc3Vic3RyaW5nKDAsIGxlbik7XHJcblx0fTtcclxuXHRsZXQgdXVpZDogc3RyaW5nID0gJyc7XHJcblx0aWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdGVtcGxhdGUgJiYgKHRlbXBsYXRlID0gdGVtcGxhdGUudHJpbSgpKSl7XHJcblx0XHRsZXQgYXBwZW5kOiBib29sZWFuID0gdHJ1ZTtcclxuXHRcdGNvbnN0IHRtcCA9IHRlbXBsYXRlLnJlcGxhY2UoL1xce3V1aWRcXH0vZywgKCkgPT4ge1xyXG5cdFx0XHRpZiAoYXBwZW5kKSBhcHBlbmQgPSBmYWxzZTtcclxuXHRcdFx0cmV0dXJuIF9jcmVhdGUoKTtcclxuXHRcdH0pO1xyXG5cdFx0dXVpZCA9IGFwcGVuZCA/IHRtcCArIF9jcmVhdGUoKSA6IHRtcDtcclxuXHR9XHJcblx0ZWxzZSB1dWlkID0gX2NyZWF0ZSgpO1xyXG5cdHJldHVybiB1dWlkO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNhZmVseSBgc3RyaW5nYCBjYXN0IHZhbHVlXHJcbiAqIC0gUmV0dXJucyBJU08gZm9ybWF0IHRpbWVzdGFtcCBmb3IgdmFsaWQgRGF0ZSB2YWx1ZVxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBDYXN0IHZhbHVlXHJcbiAqIEBwYXJhbSBfZGVmYXVsdCAgW2RlZmF1bHQ6IGAnJ2BdIERlZmF1bHQgcmVzdWx0IG9uIGZhaWx1cmVcclxuICogQHJldHVybnMgYHN0cmluZ2BcclxuICovXHJcbmV4cG9ydCBjb25zdCBfc3RyaW5nID0gKHZhbHVlOiBhbnksIF9kZWZhdWx0OiBzdHJpbmcgPSAnJyk6IHN0cmluZyA9PiB7XHJcblx0bGV0IHZhbDogc3RyaW5nID0gJyc7XHJcblx0dHJ5IHtcclxuXHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKHZhbHVlLmdldFRpbWUoKSkpIHZhbCA9IHZhbHVlLnRvSVNPU3RyaW5nKCk7XHJcblx0XHRlbHNlIHZhbCA9IFN0cmluZyh2YWx1ZSk7XHJcblx0fVxyXG5cdGNhdGNoIChlKXtcclxuXHRcdHZhbCA9IF9kZWZhdWx0O1xyXG5cdH1cclxuXHRyZXR1cm4gdmFsO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNhZmVseSBgc3RyaW5nYCBjYXN0IHZhbHVlIGlmIHBvc3NpYmxlLlxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlXHJcbiAqIEByZXR1cm5zIGBmYWxzZXxzdHJpbmdgIENhc3QgcmVzdWx0IG9yIGBmYWxzZWAgb24gZmFpbHVyZVxyXG4gKiBAcmV0dXJucyB2YWx1ZSBgc3RyaW5nYCB8IGBmYWxzZWAgb24gZmFpbHVyZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9zdHJpbmdhYmxlID0gKHZhbHVlOiBhbnkpOiBmYWxzZXxzdHJpbmcgPT4ge1xyXG5cdGNvbnN0IGZhaWxlZCA9IGAhJHtEYXRlLm5vdygpfSFgLCB2YWwgPSBfc3RyaW5nKHZhbHVlLCBmYWlsZWQpLCBwYXR0ZXJuID0gL1xcW29iamVjdCBcXHcrXFxdLztcclxuXHRyZXR1cm4gISh2YWwgPT09IGZhaWxlZCB8fCBwYXR0ZXJuLnRlc3QodmFsKSkgPyB2YWwgOiBmYWxzZTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0IHZhbHVlIHRvIGBzdHJpbmdgIGVxdWl2YWxlbnRcclxuICogXHJcbiAqIC0gUmV0dXJucyAnJyBmb3IgYG51bGxgIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZVxyXG4gKiAtIFdoZW4gYHN0cmluZ2lmeWAgaXMgYGZhbHNlYCwgcmV0dXJucyAnJyBmb3IgYGFycmF5YCBvciBgb2JqZWN0YCB2YWx1ZSB0aGF0IGRvZXMgbm90IGltcGxlbWVudCBgdG9TdHJpbmcoKWAgbWV0aG9kXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWVcclxuICogQHBhcmFtIHRyaW0gIFRyaW0gcmVzdWx0XHJcbiAqIEBwYXJhbSBzdHJpbmdpZnkgIFN0cmluZ2lmeSBgYXJyYXlgIG9yIGBvYmplY3RgIHZhbHVlIHRoYXQgZG9lcyBub3QgaW1wbGVtZW50IGB0b1N0cmluZygpYCBtZXRob2RcclxuICogQHJldHVybnMgYHN0cmluZ2BcclxuICovXHJcbmV4cG9ydCBjb25zdCBfc3RyID0gKHZhbHVlOiBhbnksIHRyaW06IGJvb2xlYW4gPSBmYWxzZSwgc3RyaW5naWZ5OiBib29sZWFuID0gZmFsc2UpOiBzdHJpbmcgPT4ge1xyXG5cdGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIHZhbHVlKXtcclxuXHRcdGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJyc7XHJcblx0XHRlbHNlIGlmICgnb2JqZWN0JyA9PT0gdHlwZW9mIHZhbHVlKXtcclxuXHRcdFx0aWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSByZXR1cm4gc3RyaW5naWZ5ID8gX2pzb25TdHJpbmdpZnkodmFsdWUpIDogJyc7XHJcblx0XHRcdGNvbnN0IHRtcCA9IF9zdHJpbmdhYmxlKHZhbHVlKTtcclxuXHRcdFx0aWYgKHRtcCA9PT0gZmFsc2UpIHJldHVybiBzdHJpbmdpZnkgPyBfanNvblN0cmluZ2lmeSh2YWx1ZSkgOiAnJztcclxuXHRcdFx0ZWxzZSB2YWx1ZSA9IHRtcDtcclxuXHRcdH1cclxuXHRcdGVsc2UgdmFsdWUgPSBfc3RyaW5nKHZhbHVlKTtcclxuXHR9XHJcblx0cmV0dXJuIHRyaW0gPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBOb3JtYWxpemUgc3RyaW5nIGJ5IHJlbW92aW5nIGFjY2VudHMgKGkuZS4gXCJBbcOpbGllXCIgPT4gXCJBbWVsaWVcIilcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZVxyXG4gKiBAcmV0dXJucyBub3JtYWxpemVkIGBzdHJpbmdgXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3N0ck5vcm0gPSAodmFsdWU6IGFueSk6IHN0cmluZyA9PiBfc3RyKHZhbHVlKS5ub3JtYWxpemUoJ05GRCcpLnJlcGxhY2UoL1tcXHUwMzAwLVxcdTAzNmZdL2csICcnKTtcclxuXHJcbi8qKlxyXG4gKiBFc2NhcGUgcmVnZXggb3BlcmF0b3JzIGZyb20gc3RyaW5nXHJcbiAqIC0gaS5lLiBgJ1xcXFxzXFxuXFxyXFx0XFx2XFx4MDB+XyFAIyQlXiYqKClbXVxcXFwvLC4/XCJcXCc6O3t9fDw+PSstJ2AgPT4gYCdcXFxcc1xcblxcclxcdFxcdlxceDAwXFxzfl8hQCNcXFxcJCVcXFxcXiZcXFxcKlxcXFwoXFxcXClcXFxcW1xcXFxdXFxcXFxcXFwvLFxcXFwuXFxcXD9cIlxcJzo7XFxcXHtcXFxcfVxcXFx8PD49XFxcXCstJ2BcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZVxyXG4gKiBAcmV0dXJucyBlc2NhcGVkIGBzdHJpbmdgXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3JlZ0VzY2FwZSA9ICh2YWx1ZTogYW55KTogc3RyaW5nID0+IF9zdHIodmFsdWUpLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLCAnXFxcXCQmJyk7XHJcblxyXG4vKipcclxuICogRXNjYXBlIHN0cmluZyBzcGVjaWFsIGNoYXJhY3RlcnNcclxuICogLSBpLmUuIGAnXFxyXFxuXFx0XFxmXFx2XFx4MDAtXFx1MDBmMy1cXHUxMjM0LVxceGI0LVxcdTAwMGItL1xcXFwnYCA9PiBgJ1xcXFxyXFxcXG5cXFxcdFxcXFxmXFxcXHZcXFxceDAwLcOzLeGItC3CtC1cXFxcdi0vXFxcXFxcXFwnYFxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlXHJcbiAqIEByZXR1cm5zIGVzY2FwZWQgYHN0cmluZ2BcclxuICovXHJcbmV4cG9ydCBjb25zdCBfc3RyRXNjYXBlID0gKHZhbHVlOiBhbnkpOiBzdHJpbmcgPT4gSlNPTi5zdHJpbmdpZnkoX3N0cih2YWx1ZSkpXHJcbi5yZXBsYWNlKC9cXFxcdShbXFxkXFx3XXs0fSkvZywgKG0sIHMpID0+IHtcclxuXHRjb25zdCBoID0gcGFyc2VJbnQocywgMTYpO1xyXG5cdHJldHVybiBoID4gMjU1ID8gbSA6ICdcXFxcJyArIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcuZnJvbUNoYXJDb2RlKGgpKS5yZXBsYWNlKCclJywgJ3gnKS5yZXBsYWNlKCd4MEInLCAndicpO1xyXG59KVxyXG4ucmVwbGFjZSgvXlwifFwiJC9nLCAnJylcclxuLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKTtcclxuXHJcbi8qKlxyXG4gKiBFc2NhcGUgYFNRTGAgc3BlY2lhbCBjaGFyYWN0ZXJzIGZyb20gcXVlcnkgYHN0cmluZ2AgdmFsdWVcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAtIHBhcnNlIGBzdHJpbmdgXHJcbiAqIEByZXR1cm5zXHJcbiAqIC0gYHN0cmluZ2Agd2l0aCBzcGVjaWFsIGNoYXJhY3RlcnMgZXNjYXBlZCB+IGAnXFxcXCdcIlxcMFxcblxcclxceDFhJ2BcclxuICogLSBgbnVtYmVyYCAodW5jaGFuZ2VkKSB3aGVuIHR5cGUgaXMgYG51bWJlcmAgYW5kIG5vdCAgYE5hTmBcclxuICogLSBgYm9vbGVhbmAgKHVuY2hhbmdlZCkgd2hlbiB0eXBlIGlzIGB0cnVlYCBvciBgZmFsc2VgXHJcbiAqIC0gYG51bGxgIHdoZW4gdHlwZSBpcyBgdW5kZWZpbmVkYHxgTmFOYHxgbnVsbGBcclxuICovXHJcbmV4cG9ydCBjb25zdCBfc3FsRXNjYXBlID0gKHZhbHVlOiBhbnkpOiBzdHJpbmd8bnVtYmVyfGJvb2xlYW58bnVsbCA9PiB7XHJcblx0aWYgKHVuZGVmaW5lZCA9PT0gdmFsdWUgfHwgbnVsbCA9PT0gdmFsdWUpIHJldHVybiBudWxsO1xyXG5cdGVsc2UgaWYgKCdib29sZWFuJyA9PT0gdHlwZW9mIHZhbHVlKSByZXR1cm4gdmFsdWU7XHJcblx0ZWxzZSBpZiAoJ251bWJlcicgPT09IHR5cGVvZiB2YWx1ZSkgcmV0dXJuICFpc05hTih2YWx1ZSkgPyB2YWx1ZSA6IG51bGw7XHJcblx0aWYgKCEodmFsdWUgPSBfc3RyKHZhbHVlLCBmYWxzZSwgdHJ1ZSkpKSByZXR1cm4gdmFsdWU7XHJcblx0cmV0dXJuIHZhbHVlLnJlcGxhY2UoL1xcXFwvZywgJ1xcXFxcXFxcJylcclxuXHQucmVwbGFjZSgvXFwwL2csICdcXFxcMCcpXHJcblx0LnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKVxyXG5cdC5yZXBsYWNlKC9cXHIvZywgJ1xcXFxyJylcclxuXHQucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXHJcblx0LnJlcGxhY2UoL1wiL2csICdcXFxcXCInKVxyXG5cdC5yZXBsYWNlKC9cXHgxYS9nLCAnXFxcXFonKVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlZ2V4IHN0cmluZyB0cmltIGNoYXJhY3RlcnNcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAgVHJpbSB2YWx1ZVxyXG4gKiBAcGFyYW0gY2hhcnMgIFN0cmlwIGNoYXJhY3RlcnMgW2RlZmF1bHQ6IGAnIFxcblxcclxcdFxcZlxcdlxceDAwJ2BdIC0gdXNlIGAne2RlZmF1bHR9J2AgdG8gaW5jbHVkZSBkZWZhdWx0cyAoaS5lIGAnLXtkZWZhdWx0c30nYCA9PSBgJy0gXFxuXFxyXFx0XFxmXFx2XFx4MDAnYClcclxuICogQHBhcmFtIHJsICBUcmltIG1vZGUgKGAnJ2AgPT4gKGRlZmF1bHQpIHRyaW0gcmlnaHQgJiBsZWZ0LCBgJ3InfCdyaWdodCdgID0+IHRyaW0gcmlnaHQsIGAnbCd8J2xlZnQnYCA9PiB0cmltIGxlZnQpXHJcbiAqIEByZXR1cm5zIHRyaW1tZWQgYHN0cmluZ2BcclxuICovXHJcbmV4cG9ydCBjb25zdCBfdHJpbSA9ICh2YWx1ZTogYW55LCBjaGFyczogc3RyaW5nID0gJyBcXHJcXG5cXHRcXGZcXHZcXHgwMCcsIHJsOiAnJ3wncid8J2wnfCdyaWdodCd8J2xlZnQnID0gJycpOiBzdHJpbmcgPT4ge1xyXG5cdGlmICghKHZhbHVlID0gX3N0cih2YWx1ZSkpIHx8ICEoKGNoYXJzID0gX3N0cihjaGFycykpKSkgcmV0dXJuIHZhbHVlO1xyXG5cdGNoYXJzID0gY2hhcnMucmVwbGFjZSgvXFx7ZGVmYXVsdFxcfS8sICcgXFxyXFxuXFx0XFxmXFx2XFx4MDAnKTtcclxuXHRsZXQgdHJpbV9jaGFyczogc3RyaW5nW10gPSBbXSwgZDEgPSAwLCBkMiA9IDA7XHJcblx0Zm9yIChjb25zdCB2IG9mIFsuLi5uZXcgU2V0KFsuLi5jaGFyc10pXSl7XHJcblx0XHRpZiAoIXYpIGNvbnRpbnVlO1xyXG5cdFx0aWYgKHYgPT09ICctJyl7XHJcblx0XHRcdGQxID0gMTtcclxuXHRcdFx0Y29udGludWU7XHJcblx0XHR9XHJcblx0XHRpZiAodiA9PT0gJ18nKXtcclxuXHRcdFx0ZDIgPSAxO1xyXG5cdFx0XHRjb250aW51ZTtcclxuXHRcdH1cclxuXHRcdHRyaW1fY2hhcnMucHVzaCh2KTtcclxuXHR9XHJcblx0aWYgKGQyKSB0cmltX2NoYXJzLnVuc2hpZnQoJ18nKTtcclxuXHRpZiAoZDEpIHRyaW1fY2hhcnMudW5zaGlmdCgnLScpO1xyXG5cdGxldCBwID0gYFske19yZWdFc2NhcGUodHJpbV9jaGFycy5qb2luKCcnKSl9XSpgLCBwYXR0ZXJuID0gYF4ke3B9fCR7cH0kYDtcclxuXHRpZiAoWydsJywgJ2xlZnQnXS5pbmNsdWRlcyhybCkpIHBhdHRlcm4gPSBgXiR7cH1gO1xyXG5cdGVsc2UgaWYgKFsncicsICdyaWdodCddLmluY2x1ZGVzKHJsKSkgcGF0dGVybiA9IGAke3B9JGA7XHJcblx0cmV0dXJuIHZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChwYXR0ZXJuLCAnZ3MnKSwgJycpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlZ2V4IHN0cmluZyB0cmltIGxlYWRpbmcgY2hhcmFjdGVycyAobGVmdClcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSBUcmltIHZhbHVlXHJcbiAqIEBwYXJhbSBjaGFycyBTdHJpcCBjaGFyYWN0ZXJzIFtkZWZhdWx0OiBgJyBcXG5cXHJcXHRcXGZcXHZcXHgwMCdgXSAtIHVzZSBgJ3tkZWZhdWx0fSdgIHRvIGluY2x1ZGUgZGVmYXVsdHMgKGkuZSBgJy17ZGVmYXVsdHN9J2AgPT0gYCctIFxcblxcclxcdFxcZlxcdlxceDAwJ2ApXHJcbiAqIEByZXR1cm5zIGxlZnQgdHJpbW1lZCBgc3RyaW5nYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9sdHJpbSA9ICh2YWx1ZTogYW55LCBjaGFyczogc3RyaW5nID0gJyBcXHJcXG5cXHRcXGZcXHZcXHgwMCcpOiBzdHJpbmcgPT4gX3RyaW0odmFsdWUsIGNoYXJzLCAnbGVmdCcpO1xyXG5cclxuLyoqXHJcbiAqIFJlZ2V4IHN0cmluZyB0cmltIHRyYWlsaW5nIGNoYXJhY3RlcnMgKHJpZ2h0KVxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlIFRyaW0gdmFsdWVcclxuICogQHBhcmFtIGNoYXJzIFN0cmlwIGNoYXJhY3RlcnMgW2RlZmF1bHQ6IGAnIFxcblxcclxcdFxcZlxcdlxceDAwJ2BdIC0gdXNlIGAne2RlZmF1bHR9J2AgdG8gaW5jbHVkZSBkZWZhdWx0cyAoaS5lIGAnLXtkZWZhdWx0c30nYCA9PSBgJy0gXFxuXFxyXFx0XFxmXFx2XFx4MDAnYClcclxuICogQHJldHVybnMgcmlnaHQgdHJpbW1lZCBgc3RyaW5nYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9ydHJpbSA9ICh2YWx1ZTogYW55LCBjaGFyczogc3RyaW5nID0gJyBcXHJcXG5cXHRcXGZcXHZcXHgwMCcpOiBzdHJpbmcgPT4gX3RyaW0odmFsdWUsIGNoYXJzLCAncmlnaHQnKTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0IHN0cmluZyB0byB0aXRsZSBjYXNlIChpLmUuIFwiaGVMTG8gd29SbGRcIiA9PiBcIkhlbGxvIFdvcmxkXCIpXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgIFBhcnNlIHN0cmluZ1xyXG4gKiBAcGFyYW0ga2VlcENhc2UgIERpc2FibGUgbG93ZXJjYXNpbmcgdW5jYXBpdGFsaXplZCBjaGFyYWN0ZXJzXHJcbiAqIEByZXR1cm5zIFRpdGxlIENhc2UgYHN0cmluZ2BcclxuICovXHJcbmV4cG9ydCBjb25zdCBfdG9UaXRsZUNhc2UgPSAodmFsdWU6IGFueSwga2VlcENhc2U6IGJvb2wgPSBmYWxzZSk6IHN0cmluZyA9PiBfc3RyKHZhbHVlKVxyXG4ucmVwbGFjZSgvXFx3XFxTKi9nLCBtYXRjaCA9PiBtYXRjaFswXS50b1VwcGVyQ2FzZSgpXHJcbisgKGtlZXBDYXNlID8gbWF0Y2guc3Vic3RyaW5nKDEpIDogbWF0Y2guc3Vic3RyaW5nKDEpLnRvTG93ZXJDYXNlKCkpKTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0IHN0cmluZyB0byBzZW50ZW5jZSBjYXNlXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgIFBhcnNlIHN0cmluZ1xyXG4gKiBAcGFyYW0ga2VlcENhc2UgIERpc2FibGUgbG93ZXJjYXNpbmcgdW5jYXBpdGFsaXplZCBjaGFyYWN0ZXJzXHJcbiAqIEByZXR1cm5zIFNlbnRlbmNlIGNhc2UgYHN0cmluZ2BcclxuICovXHJcbmV4cG9ydCBjb25zdCBfdG9TZW50ZW5jZUNhc2UgPSAodmFsdWU6IGFueSwga2VlcENhc2U6IGJvb2wgPSBmYWxzZSk6IHN0cmluZyA9PiB7XHJcblx0bGV0IGJ1ZmZlcjogc3RyaW5nID0gJyc7XHJcblx0Zm9yIChsZXQgdmFsIG9mIF9zdHIodmFsdWUpLnNwbGl0KC8oKD86XFwufFxcP3whKVxccyopLykpe1xyXG5cdFx0aWYgKHZhbC5sZW5ndGgpe1xyXG5cdFx0XHRjb25zdCBmaXJzdCA9IHZhbC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKTtcclxuXHRcdFx0Y29uc3QgcmVzdCA9IHZhbC5sZW5ndGggPiAxID8gdmFsLnNsaWNlKDEpIDogJyc7XHJcblx0XHRcdHZhbCA9IGZpcnN0ICsgKGtlZXBDYXNlID8gcmVzdCA6IHJlc3QudG9Mb3dlckNhc2UoKSk7XHJcblx0XHR9XHJcblx0XHRidWZmZXIgKz0gdmFsO1xyXG5cdH1cclxuXHRyZXR1cm4gYnVmZmVyO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnQgdmFsdWUgdG8gc25ha2UgY2FzZSAoaS5lLiAnSGVsbG9Xb3JsZCcgPT4gJ2hlbGxvX3dvcmxkJylcclxuICogLSBhY2NlbnRzIGFyZSBub3JtYWxpemVkIChpLmUuIFwiVGVzdCBBbcOpbGllXCIgPT4gXCJ0ZXN0X2FtZWxpZVwiKVxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBQYXJzZSBzdHJpbmdcclxuICogQHBhcmFtIHRyaW1UcmFpbGluZyAgVHJpbSB0cmFpbGluZyBcIl9cIiAoYGZhbHNlYCA9IChkZWZhdWx0KSBkaXNhYmxlZCwgYHRydWVgID0+IHRyaW0gcmlnaHQgJiBsZWZ0LCBgJ3InfCdyaWdodCdgID0+IHRyaW0gcmlnaHQsIGAnbCd8J2xlZnQnYCA9PiB0cmltIGxlZnQpXHJcbiAqIEByZXR1cm5zIHNuYWtlX2Nhc2UgYHN0cmluZ2BcclxuICovXHJcbmV4cG9ydCBjb25zdCBfdG9TbmFrZUNhc2UgPSAodmFsdWU6IGFueSwgdHJpbVRyYWlsaW5nOiBib29sZWFufCdsJ3wnbGVmdCd8J3InfCdyaWdodCcgPSBmYWxzZSk6IHN0cmluZyA9PiB7XHJcblx0bGV0IHJlcyA9IF9zdHJOb3JtKF90cmltKHZhbHVlKSlcclxuXHQucmVwbGFjZSgvW0EtWl0rL2csIG0gPT4gbVswXS50b1VwcGVyQ2FzZSgpICsgbS5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKSlcclxuXHQucmVwbGFjZSgvXFxXKy9nLCAnICcpXHJcblx0LnNwbGl0KC8gfFxcQig/PVtBLVpdKS8pLmpvaW4oJ18nKS5yZXBsYWNlKC9fKy9nLCAnXycpLnRvTG93ZXJDYXNlKCk7XHJcblx0aWYgKHJlcyA9PT0gJ18nKSByZXR1cm4gJyc7XHJcblx0aWYgKC9eX3xfJC8udGVzdChyZXMpICYmIHRyaW1UcmFpbGluZykgcmVzID0gX3RyaW0ocmVzLCAnXycsIChbJ2wnLCdsZWZ0JywncicsJ3JpZ2h0J10uaW5jbHVkZXModHJpbVRyYWlsaW5nIGFzIGFueSkgPyB0cmltVHJhaWxpbmcgOiAnJykgYXMgYW55KTtcclxuXHRyZXR1cm4gcmVzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnQgdmFsdWUgdG8gc2x1ZyBjYXNlIChpLmUuICdIZWxsb1dvcmxkJyA9PiAnaGVsbG8td29ybGQnKVxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBQYXJzZSBzdHJpbmdcclxuICogQHJldHVybnMgc2x1Zy1jYXNlIGBzdHJpbmdgXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3RvU2x1Z0Nhc2UgPSAodmFsdWU6IGFueSwgdHJpbVRyYWlsaW5nOiBib29sZWFufCdsJ3wnbGVmdCd8J3InfCdyaWdodCcgPSBmYWxzZSk6IHN0cmluZyA9PiBfdG9TbmFrZUNhc2UodmFsdWUsIHRyaW1UcmFpbGluZykucmVwbGFjZSgvXy9nLCAnLScpO1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnQgdmFsdWUgdG8gc3R1ZGx5IGNhc2UgKGkuZS4gJ2hlbGxvLXdvcmxkJyA9PiAnSGVsbG9Xb3JsZCcpXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgIFBhcnNlIHN0cmluZ1xyXG4gKiBAcmV0dXJucyBTdHVkbHlDYXNlIGBzdHJpbmdgXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3RvU3R1ZGx5Q2FzZSA9ICh2YWx1ZTogYW55KTogc3RyaW5nID0+IHtcclxuXHRsZXQgYnVmZmVyOiBzdHJpbmcgPSAnJztcclxuXHRmb3IgKGNvbnN0IHdvcmQgb2YgX3RvU25ha2VDYXNlKHZhbHVlKS5zcGxpdCgnXycpKXtcclxuXHRcdGlmICghd29yZC5sZW5ndGgpIGNvbnRpbnVlO1xyXG5cdFx0YnVmZmVyICs9IHdvcmRbMF0udG9VcHBlckNhc2UoKSArIHdvcmQuc3Vic3RyaW5nKDEpLnRvTG93ZXJDYXNlKCk7XHJcblx0fVxyXG5cdHJldHVybiBidWZmZXI7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29udmVydCB2YWx1ZSB0byBjYW1lbCBjYXNlIChpLmUuICdoZWxsby13b3JsZCcgPT4gJ2hlbGxvV29ybGQnKVxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBQYXJzZSBzdHJpbmdcclxuICogQHJldHVybnMgY2FtZWxDYXNlIGBzdHJpbmdgXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3RvQ2FtZWxDYXNlID0gKHZhbHVlOiBhbnkpOiBzdHJpbmcgPT4ge1xyXG5cdGxldCByZXMgPSBfdG9TdHVkbHlDYXNlKHZhbHVlKTtcclxuXHRpZiAocmVzLmxlbmd0aCkgcmVzID0gcmVzWzBdLnRvTG93ZXJDYXNlKCkgKyByZXMuc3Vic3RyaW5nKDEpO1xyXG5cdHJldHVybiByZXM7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29udmVydCB2YWx1ZSB0byBsb3dlciBjYXNlIHN0aW5nXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWVcclxuICogQHJldHVybnMgbG93ZXJjYXNlIGBzdHJpbmdgXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3RvTG93ZXJDYXNlID0gKHZhbHVlOiBhbnkpOiBzdHJpbmcgPT4gX3N0cih2YWx1ZSkudG9Mb3dlckNhc2UoKTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0IHZhbHVlIHRvIGxvd2VyIGNhc2Ugc3RpbmdcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZVxyXG4gKiBAcmV0dXJucyBVUFBFUkNBU0UgYHN0cmluZ2BcclxuICovXHJcbmV4cG9ydCBjb25zdCBfdG9VcHBlckNhc2UgPSAodmFsdWU6IGFueSk6IHN0cmluZyA9PiBfc3RyKHZhbHVlKS50b1VwcGVyQ2FzZSgpO1xyXG5cclxuLyoqXHJcbiAqIEdldCBzdHJpbmcgYnVmZmVyIHVuaXF1ZSBoYXNoIGNvZGVcclxuICogXHJcbiAqIEBleGFtcGxlXHJcbiAqIF9oYXNoQ29kZSgnSGVsbG8gd29ybGQhJykgPT4gLTUyOTY2OTE1XHJcbiAqIFxyXG4gKiBAcGFyYW0gYnVmZmVyICBQYXJzZSBzdHJpbmcgdmFsdWVcclxuICogQHJldHVybnMgYG51bWJlcmAgaGFzaFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9oYXNoQ29kZSA9IChidWZmZXI6IGFueSk6IG51bWJlciA9PiB7XHJcbiAgbGV0IGhhc2ggPSAwO1xyXG4gIGlmICghKGJ1ZmZlciA9IF9zdHIoYnVmZmVyKSkpIHJldHVybiBoYXNoO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVyLmxlbmd0aDsgaSArKyl7XHJcbiAgICBsZXQgY2hyID0gYnVmZmVyLmNoYXJDb2RlQXQoaSk7XHJcbiAgICBoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBjaHI7XHJcbiAgICBoYXNoIHw9IDA7IC8vQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXHJcbiAgfVxyXG4gIHJldHVybiBoYXNoO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCBzdHJpbmcgYnVmZmVyIHVuaXF1ZSBoYXNoIGNvZGUgaW4gYHN0cmluZ2AgZm9ybWF0XHJcbiAqIC0gYWxpYXMgYFN0cmluZyhfaGFzaENvZGUoYnVmZmVyKSkucmVwbGFjZSgvXi0vLCAneCcpYFxyXG4gKiBcclxuICogQGV4YW1wbGVcclxuICogX2hhc2hDb2RlU3RyKCdIZWxsbyB3b3JsZCEnKSA9PiAneDUyOTY2OTE1J1xyXG4gKiBfaGFzaENvZGVTdHIoJ0hlbGxvJykgPT4gJzY5NjA5NjUwJ1xyXG4gKiBcclxuICogQHBhcmFtIGJ1ZmZlciAgUGFyc2Ugc3RyaW5nIHZhbHVlXHJcbiAqIEByZXR1cm5zIGBzdHJpbmdgIGhhc2hcclxuICovXHJcbmV4cG9ydCBjb25zdCBfaGFzaENvZGVTdHIgPSAoYnVmZmVyOiBhbnkpOiBzdHJpbmcgPT4gU3RyaW5nKF9oYXNoQ29kZShidWZmZXIpKS5yZXBsYWNlKC9eLS8sICd4Jyk7XHJcblxyXG4vKipcclxuICogR2V0IHN0cmluZyBidWZmZXIgaGFzaENvZGUgKGkuZS4gYF9oYXNoNTMoJ0hlbGxvIHdvcmxkIScpYCA9PiBgNTIxMTAyNDEyMTM3MTIzMmAgKGxlbmd0aD0xNikpXHJcbiAqIC0gQSBzaW1wbGUgYnV0IGhpZ2ggcXVhbGl0eSA1My1iaXQgc3RyaW5nIGhhc2ggZ2VuZXJhdG9yIGJhc2VkIG9uXHJcbiAqICAgYGN5cmI1M2Agc2NyaXB0IGJ5IGBicnljYCAoaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzUyMTcxNDgwLzM3MzU1NzYpXHJcbiAqIFxyXG4gKiBAcGFyYW0gYnVmZmVyICBQYXJzZSBzdHJpbmcgdmFsdWVcclxuICogQHBhcmFtIHNlZWQgIEhhc2ggZW50cm9weVxyXG4gKiBAcmV0dXJucyBgbnVtYmVyYCBoYXNoXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2hhc2g1MyA9IChidWZmZXI6IGFueSwgc2VlZDogbnVtYmVyID0gMCk6IG51bWJlciA9PiB7XHJcblx0aWYgKGlzTmFOKHNlZWQpKSBzZWVkID0gMDtcclxuXHRsZXQgaDEgPSAweGRlYWRiZWVmIF4gc2VlZCwgaDIgPSAweDQxYzZjZTU3IF4gc2VlZDtcclxuXHRmb3IgKGxldCBpID0gMCwgY2g7IGkgPCBidWZmZXIubGVuZ3RoOyBpKyspe1xyXG5cdFx0Y2ggPSBidWZmZXIuY2hhckNvZGVBdChpKTtcclxuXHRcdGgxID0gTWF0aC5pbXVsKGgxIF4gY2gsIDI2NTQ0MzU3NjEpO1xyXG5cdFx0aDIgPSBNYXRoLmltdWwoaDIgXiBjaCwgMTU5NzMzNDY3Nyk7XHJcblx0fVxyXG5cdGgxID0gTWF0aC5pbXVsKGgxIF4gKGgxID4+PiAxNiksIDIyNDY4MjI1MDcpIF4gTWF0aC5pbXVsKGgyIF4gKGgyID4+PiAxMyksIDMyNjY0ODk5MDkpO1xyXG5cdGgyID0gTWF0aC5pbXVsKGgyIF4gKGgyID4+PiAxNiksIDIyNDY4MjI1MDcpIF4gTWF0aC5pbXVsKGgxIF4gKGgxID4+PiAxMyksIDMyNjY0ODk5MDkpO1xyXG5cdHJldHVybiA0Mjk0OTY3Mjk2ICogKDIwOTcxNTEgJiBoMikgKyAoaDEgPj4+IDApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFBhcnNlZCBkYXRhIFVSSSBpbnRlcmZhY2VcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSURhdGFVcmkge1xyXG5cdG1pbWU6IHN0cmluZztcclxuXHRlbmNvZGluZzogc3RyaW5nO1xyXG5cdGNoYXJzZXQ6IHN0cmluZztcclxuXHRkYXRhOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQYXJzZSBkYXRhIFVSSSAodW5pZm9ybSByZXNvdXJjZSBpZGVudGlmaWVyKVxyXG4gKiBcclxuICogQGV4YW1wbGVcclxuICogX3BhcnNlRGF0YVVyaSgnZGF0YTp0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLTgsSGVsbG8lMjB3b3JsZCUyMScpID0+IHtcclxuICogICBtaW1lOiAndGV4dC9wbGFpbicsXHJcbiAqICAgZW5jb2Rpbmc6ICdjaGFyc2V0PXV0Zi04JyxcclxuICogICBjaGFyc2V0OiAndXRmLTgnLFxyXG4gKiAgIGRhdGE6ICdIZWxsbyUyMHdvcmxkJTIxJyxcclxuICogfVxyXG4gKiBfcGFyc2VEYXRhVXJpKCdkYXRhOmltYWdlL2pwZWc7YmFzZTY0LC85ai80QUFRU2taSlJnQUJBZ0FBWkFCa0FBRCcpID0+IHtcclxuICogICBtaW1lOiAnaW1hZ2UvanBlZycsXHJcbiAqICAgZW5jb2Rpbmc6ICdiYXNlNjQnLFxyXG4gKiAgIGNoYXJzZXQ6ICcnLFxyXG4gKiAgIGRhdGE6ICcvOWovNEFBUVNrWkpSZ0FCQWdBQVpBQmtBQUQnLFxyXG4gKiB9XHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgLSBwYXJzZSBkYXRhIHVyaSB2YWx1ZVxyXG4gKiBAcmV0dXJuc1xyXG4gKiAtIGBJRGF0YVVyaWAgfiBge21pbWU6c3RyaW5nO2VuY29kaW5nOnN0cmluZztjaGFyc2V0OnN0cmluZztkYXRhOnN0cmluZ31gXHJcbiAqIC0gYHVuZGVmaW5lZGAgb24gZXJyb3JcclxuICovXHJcbmV4cG9ydCBjb25zdCBfcGFyc2VEYXRhVXJpID0gKHZhbHVlOiBhbnkpOiBJRGF0YVVyaXx1bmRlZmluZWQgPT4ge1xyXG5cdGlmICghKHZhbHVlID0gX3N0cih2YWx1ZSwgdHJ1ZSkpKSByZXR1cm4gdW5kZWZpbmVkO1xyXG5cdGNvbnN0IHJlID0gL2RhdGE6KD88bWltZT5bXFx3L1xcLVxcLl0rKTsoPzxlbmNvZGluZz4oY2hhcnNldD0pPyhbXixdKykpLCg/PGRhdGE+W15cXHNdKykvO1xyXG5cdGNvbnN0IHJlczogUmVnRXhwRXhlY0FycmF5fG51bGwgPSByZS5leGVjKHZhbHVlKTtcclxuXHRpZiAoIXJlcykgcmV0dXJuIHVuZGVmaW5lZDtcclxuXHRyZXR1cm4ge1xyXG5cdFx0bWltZTogcmVzWzFdLFxyXG5cdFx0ZW5jb2Rpbmc6IHJlc1syXSxcclxuXHRcdGNoYXJzZXQ6IHJlc1szXSAmJiByZXNbNF0gfHwgJycsXHJcblx0XHRkYXRhOiByZXNbNV0sXHJcblx0fTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZSBVUkwgYHN0cmluZ2AgKHVuaWZvcm0gcmVzb3VyY2UgbG9jYXRvcilcclxuICogLSBpbmNsdWRlcyBJUCAodjQpIGFkZHJlc3Nlc1xyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlIC0gcGFyc2UgdXJsIGBzdHJpbmdgIHZhbHVlXHJcbiAqIEBwYXJhbSBtYXRjaERhdGFVUkkgLSB2YWxpZGF0aW9uIGluY2x1ZGVzIGRhdGEgVVJJIChpLmUuICdkYXRhOmltYWdlL2pwZWc7YmFzZTY0LC85ai80QUFRU2taSlJnQUJBZ0FBWkFCa0FBRCcpXHJcbiAqIEByZXR1cm5zIGBib29sZWFuYCAtIHZhbGlkIHVybFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9pc1VybCA9ICh2YWx1ZTogYW55LCBtYXRjaERhdGFVUkk6IGJvb2xlYW4gPSBmYWxzZSk6IGJvb2xlYW4gPT4ge1xyXG5cdGlmICghKHZhbHVlICYmICdzdHJpbmcnID09PSB0eXBlb2YgdmFsdWUgJiYgdmFsdWUudHJpbSgpKSkgcmV0dXJuIGZhbHNlO1xyXG5cdGlmIChtYXRjaERhdGFVUkkgJiYgX3BhcnNlRGF0YVVyaSh2YWx1ZSkpIHJldHVybiB0cnVlO1xyXG5cdGNvbnN0IHBhdHRlcm4gPSAnXihodHRwcz86XFxcXC9cXFxcLyk/JyAgLy8gcHJvdG9jb2xcclxuXHQrICcoKChbYS16XFxcXGRdKFthLXpcXFxcZC1dKlthLXpcXFxcZF0pKilcXFxcLj8pK1thLXpdezIsfXwnICAvLyBkb21haW4gbmFtZVxyXG5cdCsgJygoXFxcXGR7MSwzfVxcXFwuKXszfVxcXFxkezEsM30pKScgIC8vIG9yIElQICh2NCkgYWRkcmVzc1xyXG5cdCsgJyhcXFxcOlxcXFxkKyk/KFxcXFwvWy1hLXpcXFxcZCVfLn4rXSopKicgIC8vIHBvcnQgYW5kIHBhdGhcclxuXHQrICcoXFxcXD9bOyZhLXpcXFxcZCVfLn4rPS1dKik/JyAvLyBxdWVyeSBzdHJpbmdcclxuXHQrICcoXFxcXCNbLWEtelxcXFxkX10qKT8kJzsgLy8gZnJhZ21lbnQgbG9jYXRvclxyXG5cdHJldHVybiBuZXcgUmVnRXhwKHBhdHRlcm4sICdpJykudGVzdCh2YWx1ZSk7XHJcbn1cclxuLy9SRUY6ICh5dXAgdXJsIHZhbGlkYXRpb24gcmVnZXgpXHJcbi8vbGV0IHJVcmwgPSAvXigoaHR0cHM/fGZ0cCk6KT9cXC9cXC8oKCgoW2Etel18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OikqQCk/KCgoXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pXFwuKFxcZHxbMS05XVxcZHwxXFxkXFxkfDJbMC00XVxcZHwyNVswLTVdKVxcLihcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSlcXC4oXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pKXwoKChbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpXFwuKSsoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4/KSg6XFxkKik/KShcXC8oKChbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6fEApKyhcXC8oKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCkqKSopPyk/KFxcPygoKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCl8W1xcdUUwMDAtXFx1RjhGRl18XFwvfFxcPykqKT8oXFwjKCgoW2Etel18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKXxcXC98XFw/KSopPyQvaTtcclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZSBlbWFpbCBhZGRyZXNzIGBzdHJpbmdgXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWVcclxuICogQHJldHVybnMgYGJvb2xlYW5gXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2lzRW1haWwgPSAodmFsdWU6IGFueSk6IGJvb2xlYW4gPT4ge1xyXG5cdGlmICghKHZhbHVlICYmICdzdHJpbmcnID09PSB0eXBlb2YgdmFsdWUgJiYgdmFsdWUudHJpbSgpKSkgcmV0dXJuIGZhbHNlO1xyXG5cdHJldHVybiAvXigoW148PigpW1xcXVxcXFwuLDs6XFxzQFwiXSsoXFwuW148PigpW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8LihcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXF0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvLnRlc3QodmFsdWUudG9Mb3dlckNhc2UoKSk7XHJcbn07XHJcbi8vUkVGOiAoeXVwIGVtYWlsIHZhbGlkYXRpb24gcmVnZXgpXHJcbi8vIGxldCByRW1haWwgPSAvXlthLXpBLVowLTkuISMkJSYnKitcXC89P15fYHt8fX4tXStAW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KD86XFwuW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KSokLztcclxuXHJcbi8qKlxyXG4gKiBQYXJzZSBjc3YgZGF0YSBpbnRvIDJkIHN0cmluZyBhcnJheVxyXG4gKiBcclxuICogQHBhcmFtIHRleHQgLSBwYXJzZSB0ZXh0XHJcbiAqIEBwYXJhbSBkZWxpbWl0ZXIgLSBkZWxpbWl0ZXIgY2hhcmFjdGVyIChkZWZhdWx0OiBgJywnYClcclxuICogQHBhcmFtIGJyIC0gbmV3IGxpbmUgKGRlZmF1bHQ6IGAnXFxuJ2ApXHJcbiAqIEByZXR1cm5zIGBzdHJpbmdbXVtdYCB+IGBbWy4uLmNvbHNdLCAuLi5yb3dzXWBcclxuICovXHJcbmV4cG9ydCBjb25zdCBfcGFyc2VDc3YgPSAodGV4dDogc3RyaW5nLCBkZWxpbWl0ZXI/OiBzdHJpbmcsIGJyPzogc3RyaW5nKTogc3RyaW5nW11bXSA9PiB7XHJcblx0Y29uc3Qgbl9zZXAgPSAnXFx4MUQnOyBjb25zdCBuX3NlcF9yZSA9IG5ldyBSZWdFeHAobl9zZXAsICdnJyk7XHJcblx0Y29uc3QgcV9zZXAgPSAnXFx4MUUnOyBjb25zdCBxX3NlcF9yZSA9IG5ldyBSZWdFeHAocV9zZXAsICdnJyk7XHJcblx0Y29uc3QgY19zZXAgPSAnXFx4MUYnOyBjb25zdCBjX3NlcF9yZSA9IG5ldyBSZWdFeHAoY19zZXAsICdnJyk7XHJcblx0Y29uc3QgZGVsaW06IHN0cmluZyA9IChkZWxpbWl0ZXIgPSBfc3RyKGRlbGltaXRlciwgdHJ1ZSkpLmxlbmd0aCA9PT0gMSA/IGRlbGltaXRlciA6ICcsJztcclxuXHRjb25zdCBmaWVsZF9yZSA9IG5ldyBSZWdFeHAoJyhefFsnICsgZGVsaW0gKyAnXFxcXG5dKVwiKFteXCJdKig/OlwiXCJbXlwiXSopKilcIig/PSgkfFsnICsgZGVsaW0gKyAnXFxcXG5dKSknLCAnZycpO1xyXG5cdGNvbnN0IGxpbmVzOiBzdHJpbmdbXSA9IF9zdHIodGV4dCwgdHJ1ZSlcclxuXHQucmVwbGFjZSgvXFxyL2csICcnKVxyXG5cdC5yZXBsYWNlKC9cXG4rJC8sICcnKVxyXG5cdC5yZXBsYWNlKGZpZWxkX3JlLCAoXzogc3RyaW5nLCBwMTogc3RyaW5nLCBwMjogc3RyaW5nKSA9PiBwMSArIHAyLnJlcGxhY2UoL1xcbi9nLCBuX3NlcCkucmVwbGFjZSgvXCJcIi9nLCBxX3NlcCkucmVwbGFjZSgvLC9nLCBjX3NlcCkpXHJcblx0LnNwbGl0KC9cXG4vKTtcclxuXHRjb25zdCByb3dzOiBzdHJpbmdbXVtdID0gW107XHJcblx0Zm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKXtcclxuXHRcdGlmICghbGluZS5sZW5ndGgpIGNvbnRpbnVlO1xyXG5cdFx0Y29uc3Qgcm93OiBzdHJpbmdbXSA9IFtdO1xyXG5cdFx0Zm9yIChjb25zdCBjZWxsIG9mIGxpbmUuc3BsaXQoZGVsaW0pKXtcclxuXHRcdFx0cm93LnB1c2goY2VsbC5yZXBsYWNlKG5fc2VwX3JlLCBiciA/PyAnXFxuJykucmVwbGFjZShxX3NlcF9yZSwgJ1wiJykucmVwbGFjZShjX3NlcF9yZSwgJywnKSk7XHJcblx0XHR9XHJcblx0XHRyb3dzLnB1c2gocm93KTtcclxuXHR9XHJcblx0cmV0dXJuIHJvd3M7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29udmVydCBkYXRhIHRvIGNzdiB0ZXh0XHJcbiAqIFxyXG4gKiBAcGFyYW0gZGF0YSAtIHBhcnNlIGRhdGFcclxuICogQHBhcmFtIGRlbGltaXRlciAtIGRlbGltaXRlciBjaGFyYWN0ZXIgKGRlZmF1bHQ6IGAnLCdgKVxyXG4gKiBAcGFyYW0gYnIgLSBuZXcgbGluZSByZXBsYWNlIChkZWZhdWx0OiBgJ1xcbidgKVxyXG4gKiBAcmV0dXJucyBgc3RyaW5nYCBjc3YgdGV4dFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF90b0NzdiA9IChkYXRhOiBzdHJpbmd8c3RyaW5nW118c3RyaW5nW11bXSwgZGVsaW1pdGVyPzogc3RyaW5nLCBicj86IHN0cmluZyk6IHN0cmluZyA9PiB7XHJcblx0Y29uc3QgZGVsaW06IHN0cmluZyA9IChkZWxpbWl0ZXIgPSBfc3RyKGRlbGltaXRlciwgdHJ1ZSkpLmxlbmd0aCA9PT0gMSA/IGRlbGltaXRlciA6ICcsJztcclxuXHRjb25zdCByb3dzOiBzdHJpbmdbXVtdID0gW107XHJcblx0Y29uc3QgX2NlbGwgPSAodmFsdWU6IGFueSk6IHN0cmluZyA9PiB7XHJcblx0XHRsZXQgdmFsOiBzdHJpbmcgPSBfc3RyKHZhbHVlKTtcclxuXHRcdGlmICghdmFsLmxlbmd0aCkgcmV0dXJuIHZhbDtcclxuXHRcdGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIGJyICYmIHZhbC5pbmRleE9mKGJyKSA+IC0xICYmIGJyICE9PSAnXFxuJykgdmFsID0gdmFsLnJlcGxhY2UobmV3IFJlZ0V4cChiciwgJ2cnKSwgJ1xcbicpO1xyXG5cdFx0dmFsID0gdmFsLnJlcGxhY2UoL1xcci9nLCAnJykucmVwbGFjZSgvXFxuKyQvLCAnJykucmVwbGFjZSgvXCIvZywgJ1wiXCInKTtcclxuXHRcdGlmICh2YWwuaW5kZXhPZihkZWxpbSkgPiAtMSB8fCB2YWwuaW5kZXhPZignXCInKSA+IC0xIHx8IHZhbC5pbmRleE9mKCdcXG4nKSA+IC0xIHx8IC9eXFxzK3xcXHMrJC8udGVzdCh2YWwpKSB2YWwgPSBgXCIke3ZhbH1cImA7XHJcblx0XHRyZXR1cm4gdmFsO1xyXG5cdH07XHJcblx0aWYgKGRhdGEgJiYgJ29iamVjdCcgPT09IHR5cGVvZiBkYXRhICYmIGRhdGFbU3ltYm9sLml0ZXJhdG9yXSl7XHJcblx0XHRjb25zdCBpdGVyYWJsZXM6IGFueVtdID0gW10sIHZhbHVlcyA9IE9iamVjdC52YWx1ZXMoWy4uLmRhdGFdKTtcclxuXHRcdGZvciAoY29uc3QgdiBvZiB2YWx1ZXMpe1xyXG5cdFx0XHRpZiAoJ29iamVjdCcgPT09IHR5cGVvZiB2ICYmIHZbU3ltYm9sLml0ZXJhdG9yXSkgaXRlcmFibGVzLnB1c2godik7XHJcblx0XHR9XHJcblx0XHRpZiAoaXRlcmFibGVzLmxlbmd0aCl7XHJcblx0XHRcdGZvciAoY29uc3QgdmFsIG9mIHZhbHVlcyl7XHJcblx0XHRcdFx0Y29uc3Qgdl9yb3c6IHN0cmluZ1tdID0gW107XHJcblx0XHRcdFx0Zm9yIChjb25zdCBjZWxsIG9mIHZhbCl7XHJcblx0XHRcdFx0XHR2X3Jvdy5wdXNoKF9jZWxsKGNlbGwgYXMgYW55KSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJvd3MucHVzaCh2X3Jvdyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRjb25zdCB2X3Jvdzogc3RyaW5nW10gPSBbXTtcclxuXHRcdFx0Zm9yIChjb25zdCB2YWwgb2YgdmFsdWVzKXtcclxuXHRcdFx0XHR2X3Jvdy5wdXNoKF9jZWxsKHZhbCBhcyBhbnkpKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyb3dzLnB1c2godl9yb3cpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRlbHNlIGlmIChkYXRhID0gX3N0cihkYXRhLCB0cnVlKSl7XHJcblx0XHRjb25zdCBkYXRhX3Jvd3M6IHN0cmluZ1tdW10gPSBfcGFyc2VDc3YoZGF0YSwgZGVsaW0sIGJyKTtcclxuXHRcdGZvciAoY29uc3QgZGF0YV9yb3cgb2YgZGF0YV9yb3dzKXtcclxuXHRcdFx0Y29uc3QgZF9yb3c6IHN0cmluZ1tdID0gW107XHJcblx0XHRcdGZvciAoY29uc3QgdmFsIG9mIGRhdGFfcm93KXtcclxuXHRcdFx0XHRkX3Jvdy5wdXNoKF9jZWxsKHZhbCkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJvd3MucHVzaChkX3Jvdyk7XHJcblx0XHR9XHJcblx0fVxyXG5cdGxldCBjc3Y6IHN0cmluZyA9ICcnLCBkaXYgPSAwO1xyXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7IGkgKyspe1xyXG5cdFx0Y29uc3QgbGluZTogc3RyaW5nID0gcm93c1tpXS5qb2luKGRlbGltKS50cmltKCk7XHJcblx0XHRpZiAoIWxpbmUpIGNvbnRpbnVlO1xyXG5cdFx0aWYgKCFkaXYpe1xyXG5cdFx0XHRkaXYgPSAxO1xyXG5cdFx0XHRjc3YgKz0gbGluZTtcclxuXHRcdH1cclxuXHRcdGVsc2UgY3N2ICs9ICdcXG4nICsgbGluZTtcclxuXHR9XHJcblx0cmV0dXJuIGNzdjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTcGxpdCBgc3RyaW5nYCB2YWx1ZSBpbnRvIHBhcnRzIH4gcGFydCBhbmQgc2VwYXJhdG9yIGFycmF5IChsYXN0IGVudHJ5J3Mgc2VwYXJhdG9yIGlzIGAnJ2ApXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgLSBzcGxpdCBzdHJpbmdcclxuICogQHBhcmFtIHNlcGFyYXRvciAtIHNwbGl0IHNlcGFyYXRvciAoZGVmYXVsdDogYHVuZGVmaW5lZGApXHJcbiAqIEBwYXJhbSBsaW1pdCAtIHNwbGl0IGl0ZW1zIGxpbWl0L2NvdW50IChkZWZhdWx0OiBgdW5kZWZpbmVkYClcclxuICogQHJldHVybnMgYFtwYXJ0OiBzdHJpbmcsIHNlcGFyYXRvcjogc3RyaW5nIHwgJyddW11gIHNwbGl0IHBhcnRzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgIF9zcGxpdCA9ICh2YWx1ZTogYW55LCBzZXBhcmF0b3I/OiBzdHJpbmd8UmVnRXhwLCBsaW1pdD86IG51bWJlcik6IFtwYXJ0OiBzdHJpbmcsIHNlcGFyYXRvcjogc3RyaW5nIHwgJyddW10gPT4ge1xyXG5cdGxldCB2YWwgPSBfc3RyKHZhbHVlKTtcclxuXHRsZXQgcmU6IFJlZ0V4cHx1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcblx0aWYgKCdzdHJpbmcnID09PSB0eXBlb2Ygc2VwYXJhdG9yKSByZSA9IG5ldyBSZWdFeHAoX3JlZ0VzY2FwZShfc3RyKHNlcGFyYXRvcikpKTtcclxuXHRlbHNlIGlmIChzZXBhcmF0b3IgaW5zdGFuY2VvZiBSZWdFeHApIHJlID0gc2VwYXJhdG9yO1xyXG5cdGlmIChyZSkgcmUgPSBuZXcgUmVnRXhwKHJlLCBbLi4ubmV3IFNldCgoJ2cnICsgcmUuZmxhZ3MpLnNwbGl0KCcnKSldLmpvaW4oJycpKTtcclxuXHRsaW1pdCA9IGxpbWl0ICYmICFpc05hTihsaW1pdCA9IHBhcnNlSW50KGxpbWl0ICsgJycpKSAmJiBsaW1pdCA+PSAwID8gbGltaXQgOiB1bmRlZmluZWQ7XHJcblx0Y29uc3QgcGFydHM6IHN0cmluZ1tdID0gcmUgPyB2YWwuc3BsaXQocmUsIGxpbWl0KSA6IHZhbC5zcGxpdCh1bmRlZmluZWQgYXMgYW55LCBsaW1pdCk7XHJcblx0Y29uc3QgbWF0Y2hlczogc3RyaW5nW10gPSByZSA/IHZhbC5tYXRjaChyZSkgfHwgW10gOiB2YWwubWF0Y2godW5kZWZpbmVkIGFzIGFueSkgfHwgW107XHJcblx0Y29uc3QgaXRlbXM6IFtwYXJ0OiBzdHJpbmcsIHNlcGFyYXRvcjogc3RyaW5nIHwgJyddW10gPSBbXTtcclxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSArKyl7XHJcblx0XHRjb25zdCBwYXJ0OiBzdHJpbmcgPSBwYXJ0c1tpXTtcclxuXHRcdGNvbnN0IHNlcGFyYXRvcjogc3RyaW5nID0gbWF0Y2hlc1tpXSA/PyAnJztcclxuXHRcdGl0ZW1zLnB1c2goW3BhcnQsIHNlcGFyYXRvcl0pO1xyXG5cdH1cclxuXHRyZXR1cm4gaXRlbXM7XHJcbn07XHJcblxyXG4vKipcclxuICogR2V0IGVycm9yIHRleHRcclxuICogXHJcbiAqIEBwYXJhbSBlcnJvciAtIHBhcnNlIGVycm9yIHZhbHVlXHJcbiAqIEByZXR1cm5zIGBzdHJpbmdgXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2Vycm9yVGV4dCA9IChlcnJvcjogYW55KTogc3RyaW5nID0+IHtcclxuXHRjb25zdCBlcnJvcnM6IHtba2V5OiBzdHJpbmddOiBzdHJpbmd9ID0ge307XHJcblx0Y29uc3QgX3BhcnNlID0gKGl0ZW06IGFueSk6IHZvaWQgPT4ge1xyXG5cdFx0aWYgKCEoJ29iamVjdCcgPT09IHR5cGVvZiBpdGVtICYmIGl0ZW0pKXtcclxuXHRcdFx0Y29uc3QgdmFsID0gX3N0cihpdGVtLCB0cnVlKTtcclxuXHRcdFx0aWYgKHZhbCkgZXJyb3JzW3ZhbC50b0xvd2VyQ2FzZSgpXSA9IHZhbDtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpe1xyXG5cdFx0XHRmb3IgKGNvbnN0IHZhbCBvZiBpdGVtKSBfcGFyc2UodmFsKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGl0ZW0gaW5zdGFuY2VvZiBFcnJvcil7XHJcblx0XHRcdGxldCBuYW1lOiBzdHJpbmcgPSBfc3RyKGVycm9yLm5hbWUsIHRydWUpO1xyXG5cdFx0XHRpZiAoWydFcnJvcicsICdUeXBlRXJyb3InXS5pbmNsdWRlcyhuYW1lKSkgbmFtZSA9ICcnO1xyXG5cdFx0XHRjb25zdCBtZXNzYWdlID0gX3N0cihlcnJvci5tZXNzYWdlLCB0cnVlKTtcclxuXHRcdFx0Y29uc3QgdmFsID0gbWVzc2FnZSA/IChuYW1lID8gbmFtZSArICcgJzogJycpICsgbWVzc2FnZSA6ICcnO1xyXG5cdFx0XHRpZiAodmFsKSBlcnJvcnNbdmFsLnRvTG93ZXJDYXNlKCldID0gdmFsO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRpZiAoaXRlbS5yZXNwb25zZSkgcmV0dXJuIF9wYXJzZShpdGVtLnJlc3BvbnNlKTtcclxuXHRcdGlmIChpdGVtLmJvZHkpIHJldHVybiBfcGFyc2UoaXRlbS5ib2R5KTtcclxuXHRcdGlmIChpdGVtLmVycm9yKSByZXR1cm4gX3BhcnNlKGl0ZW0uZXJyb3IpO1xyXG5cdFx0aWYgKGl0ZW0ubWVzc2FnZSkgcmV0dXJuIF9wYXJzZShpdGVtLm1lc3NhZ2UpO1xyXG5cdFx0Y29uc3QgdmFsID0gX3N0cihpdGVtLCB0cnVlLCB0cnVlKTtcclxuXHRcdGlmICh2YWwpIGVycm9yc1t2YWwudG9Mb3dlckNhc2UoKV0gPSB2YWw7XHJcblx0fTtcclxuXHRfcGFyc2UoZXJyb3IpO1xyXG5cdHJldHVybiBPYmplY3QudmFsdWVzKGVycm9ycykuam9pbignXFxuJyk7XHJcbn07XHJcblxyXG4vKipcclxuICogR2V0IHRleHQgd2l0aCBtYXggbGVuZ3RoIGxpbWl0XHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgLSBwYXJzZSB0ZXh0XHJcbiAqIEBwYXJhbSBtYXggLSBtYXggY2hhcmFjdGVycyBsZW5ndGggKGRlZmF1bHQ6IGAxMDAwYClcclxuICogQHBhcmFtIG1vZGUgLSByZXN1bHQgbW9kZVxyXG4gKiAtIGAwYCA9IGBzdWJzdHJpbmcoMCwgbWF4KWBcclxuICogLSBgMWAgPSBgc3Vic3RyaW5nKDAsIG1heCAtIDMpICsgJy4uLidgXHJcbiAqIC0gYDJgID0gYHN1YnN0cmluZygwLCBtYXggLSBbYXBwZW5kXS5sZW5ndGgpICsgW2FwcGVuZF1gIHdoZXJlIGBbYXBwZW5kXWAgaXMgYCcuLi4oJyArIHZhbHVlLmxlbmd0aCArICcpJ2BcclxuICogQHJldHVybnMgYHN0cmluZ2AgfiB3aG9zZSBjaGFyYWN0ZXIgbGVuZ3RoIGlzIDw9IG1heFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF90ZXh0TWF4TGVuZ3RoID0gKHZhbHVlOiBhbnksIG1heDogbnVtYmVyID0gMTAwMCwgbW9kZTogMHwxfDIgPSAwKTogc3RyaW5nID0+IHtcclxuXHRjb25zdCBsZW4gPSAodmFsdWUgPSBfc3RyKHZhbHVlKSkubGVuZ3RoLCBtYXhfbGVuID0gIWlzTmFOKG1heCA9IHBhcnNlSW50KG1heCBhcyBhbnkpKSAmJiBtYXggPiAwID8gbWF4IDogMTAwMDtcclxuXHRpZiAobGVuIDw9IG1heF9sZW4pIHJldHVybiB2YWx1ZTtcclxuXHRjb25zdCBhcHBlbmQgPSBtb2RlID09PSAyID8gYC4uLigke3ZhbHVlLmxlbmd0aH0pYCA6IG1vZGUgPT09IDEgPyAnLi4uJyA6ICcnO1xyXG5cdGNvbnN0IGFwcGVuZF9sZW4gPSBhcHBlbmQubGVuZ3RoLCB0ZXh0X2xlbiA9IG1heF9sZW4gLSBhcHBlbmRfbGVuO1xyXG5cdGlmICh0ZXh0X2xlbiA+IGFwcGVuZF9sZW4gJiYgbGVuID4gdGV4dF9sZW4pIHJldHVybiB2YWx1ZS5zdWJzdHJpbmcoMCwgdGV4dF9sZW4pICsgYXBwZW5kO1xyXG5cdHJldHVybiB2YWx1ZS5zdWJzdHJpbmcoMCwgbWF4X2xlbik7XHJcbn07IiwiZXhwb3J0ICogZnJvbSAnLi9fYmF0Y2gnO1xyXG5leHBvcnQgKiBmcm9tICcuL19jbG9uZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vX2Nsb25lRGVlcCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vX2NvbXBhcmUnO1xyXG5leHBvcnQgKiBmcm9tICcuL19jb21wYXJlU2hhbGxvdyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vX2RhdGV0aW1lJztcclxuZXhwb3J0ICogZnJvbSAnLi9fZGVib3VjZWQnO1xyXG5leHBvcnQgKiBmcm9tICcuL19oZWxsbyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vX2pzb24nO1xyXG5leHBvcnQgKiBmcm9tICcuL19udW1iZXInO1xyXG5leHBvcnQgKiBmcm9tICcuL19vYmplY3RzJztcclxuZXhwb3J0ICogZnJvbSAnLi9fcHJvbWlzZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vX3F1ZXVlJztcclxuZXhwb3J0ICogZnJvbSAnLi9fc3RyaW5nJzsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcxMyk7XG4iXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwidGhpcyIsImJ5dGVMZW5ndGgiLCJiNjQiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwidG9CeXRlQXJyYXkiLCJ0bXAiLCJpIiwiYXJyIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwibGVuIiwicmV2TG9va3VwIiwiY2hhckNvZGVBdCIsImZyb21CeXRlQXJyYXkiLCJ1aW50OCIsImxlbmd0aCIsImV4dHJhQnl0ZXMiLCJwYXJ0cyIsIm1heENodW5rTGVuZ3RoIiwibGVuMiIsInB1c2giLCJlbmNvZGVDaHVuayIsImxvb2t1cCIsImpvaW4iLCJVaW50OEFycmF5IiwiQXJyYXkiLCJjb2RlIiwiRXJyb3IiLCJpbmRleE9mIiwic3RhcnQiLCJlbmQiLCJudW0iLCJvdXRwdXQiLCJiYXNlNjQiLCJpZWVlNzU0IiwiY3VzdG9tSW5zcGVjdFN5bWJvbCIsIlN5bWJvbCIsIkJ1ZmZlciIsIlNsb3dCdWZmZXIiLCJhbGxvYyIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiS19NQVhfTEVOR1RIIiwiY3JlYXRlQnVmZmVyIiwiUmFuZ2VFcnJvciIsImJ1ZiIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiYXJnIiwiZW5jb2RpbmdPck9mZnNldCIsIlR5cGVFcnJvciIsImFsbG9jVW5zYWZlIiwiZnJvbSIsInZhbHVlIiwic3RyaW5nIiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwid3JpdGUiLCJzbGljZSIsImZyb21TdHJpbmciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImFycmF5VmlldyIsImlzSW5zdGFuY2UiLCJjb3B5IiwiZnJvbUFycmF5QnVmZmVyIiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImZyb21BcnJheUxpa2UiLCJmcm9tQXJyYXlWaWV3IiwiU2hhcmVkQXJyYXlCdWZmZXIiLCJ2YWx1ZU9mIiwiYiIsIm9iaiIsImlzQnVmZmVyIiwiY2hlY2tlZCIsInVuZGVmaW5lZCIsIm51bWJlcklzTmFOIiwidHlwZSIsImlzQXJyYXkiLCJkYXRhIiwiZnJvbU9iamVjdCIsInRvUHJpbWl0aXZlIiwiYXNzZXJ0U2l6ZSIsInNpemUiLCJhcnJheSIsInRvU3RyaW5nIiwibXVzdE1hdGNoIiwiYXJndW1lbnRzIiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJ0b0xvd2VyQ2FzZSIsInNsb3dUb1N0cmluZyIsImhleFNsaWNlIiwidXRmOFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwiYmFzZTY0U2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJzd2FwIiwibiIsIm0iLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsInZhbCIsImRpciIsImFycmF5SW5kZXhPZiIsImNhbGwiLCJsYXN0SW5kZXhPZiIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsIlN0cmluZyIsInJlYWQiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJqIiwiaGV4V3JpdGUiLCJvZmZzZXQiLCJOdW1iZXIiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJwYXJzZUludCIsInN1YnN0ciIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwic3RyIiwiYnl0ZUFycmF5IiwiYXNjaWlUb0J5dGVzIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImMiLCJoaSIsImxvIiwidXRmMTZsZVRvQnl0ZXMiLCJNYXRoIiwibWluIiwicmVzIiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImNvZGVQb2ludHMiLCJNQVhfQVJHVU1FTlRTX0xFTkdUSCIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwiZGVjb2RlQ29kZVBvaW50c0FycmF5Iiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJwcm90byIsImZvbyIsImUiLCJ0eXBlZEFycmF5U3VwcG9ydCIsImNvbnNvbGUiLCJlcnJvciIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInBvb2xTaXplIiwiZmlsbCIsImFsbG9jVW5zYWZlU2xvdyIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJhIiwieCIsInkiLCJjb25jYXQiLCJsaXN0IiwicG9zIiwic2V0Iiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwidG9Mb2NhbGVTdHJpbmciLCJlcXVhbHMiLCJpbnNwZWN0IiwibWF4IiwicmVwbGFjZSIsInRyaW0iLCJ0YXJnZXQiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJpc0Zpbml0ZSIsInRvSlNPTiIsIl9hcnIiLCJyZXQiLCJvdXQiLCJoZXhTbGljZUxvb2t1cFRhYmxlIiwiYnl0ZXMiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwid3J0QmlnVUludDY0TEUiLCJjaGVja0ludEJJIiwiQmlnSW50Iiwid3J0QmlnVUludDY0QkUiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0IiwibGl0dGxlRW5kaWFuIiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInN1YmFycmF5IiwicmVhZFVpbnRMRSIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVWludEJFIiwicmVhZFVJbnRCRSIsInJlYWRVaW50OCIsInJlYWRVSW50OCIsInJlYWRVaW50MTZMRSIsInJlYWRVSW50MTZMRSIsInJlYWRVaW50MTZCRSIsInJlYWRVaW50MzJMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVaW50MzJCRSIsInJlYWRVSW50MzJCRSIsInJlYWRCaWdVSW50NjRMRSIsImRlZmluZUJpZ0ludE1ldGhvZCIsInZhbGlkYXRlTnVtYmVyIiwiZmlyc3QiLCJsYXN0IiwiYm91bmRzRXJyb3IiLCJyZWFkQmlnVUludDY0QkUiLCJyZWFkSW50TEUiLCJwb3ciLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEJpZ0ludDY0TEUiLCJyZWFkQmlnSW50NjRCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVpbnRMRSIsIndyaXRlVUludExFIiwid3JpdGVVaW50QkUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVWludDgiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVaW50MTZMRSIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVpbnQxNkJFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVWludDMyTEUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVaW50MzJCRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUJpZ1VJbnQ2NExFIiwid3JpdGVCaWdVSW50NjRCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUJpZ0ludDY0TEUiLCJ3cml0ZUJpZ0ludDY0QkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0IiwiY29weVdpdGhpbiIsImVycm9ycyIsIkUiLCJzeW0iLCJnZXRNZXNzYWdlIiwiQmFzZSIsImNvbnN0cnVjdG9yIiwic3VwZXIiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIm5hbWUiLCJzdGFjayIsIm1lc3NhZ2UiLCJhZGROdW1lcmljYWxTZXBhcmF0b3IiLCJyYW5nZSIsIkVSUl9PVVRfT0ZfUkFOR0UiLCJjaGVja0JvdW5kcyIsIkVSUl9JTlZBTElEX0FSR19UWVBFIiwiZmxvb3IiLCJFUlJfQlVGRkVSX09VVF9PRl9CT1VORFMiLCJpbnB1dCIsIm1zZyIsInJlY2VpdmVkIiwiaXNJbnRlZ2VyIiwiYWJzIiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJJbmZpbml0eSIsImxlYWRTdXJyb2dhdGUiLCJzcGxpdCIsImJhc2U2NGNsZWFuIiwic3JjIiwiZHN0IiwiYWxwaGFiZXQiLCJ0YWJsZSIsImkxNiIsImZuIiwiQnVmZmVyQmlnSW50Tm90RGVmaW5lZCIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiZCIsInMiLCJOYU4iLCJydCIsImlzTmFOIiwibG9nIiwiTE4yIiwiX2Jhc2U2NEVuY29kZSIsImJ1ZmZlckVuY29kaW5nIiwiX2Jhc2U2NERlY29kZSIsIkRFRkFVTFRfRUFTSU5HIiwiRWFzaW5ncyIsImVhc2VMaW5lYXIiLCJERUZBVUxUX0RVUkFUSU9OIiwib3B0aW9ucyIsIl9kZWJ1ZyIsInVwZGF0ZSIsIl91cGRhdGUiLCJiZWZvcmUiLCJfYmVmb3JlIiwiYWZ0ZXIiLCJfYWZ0ZXIiLCJlYXNpbmciLCJfZWFzaW5nIiwiZHVyYXRpb24iLCJfZHVyYXRpb24iLCJkZWxheSIsIl9kZWxheSIsImRlbGF5ZWQiLCJfZGVsYXllZCIsIl9mcm9tIiwidG8iLCJfdG8iLCJ0aW1lb3V0IiwiX3RpbWVvdXQiLCJtYW51YWwiLCJfbWFudWFsIiwic2VsZiIsImNvbnRleHQiLCJfaXNGdW5jIiwiZXJyIiwiaGFzT3duUHJvcGVydHkiLCJfcG9zSW50IiwiQm9vbGVhbiIsIl9udW0iLCJkaWZmIiwiaWQiLCJpc19kb25lIiwiaXNfcGF1c2VkIiwicHJldiIsInQiLCJwIiwicHQiLCJldCIsImVsYXBzZWQiLCJpbmRleCIsInRoZW4iLCJEYXRlIiwibm93IiwicmVzZXQiLCJjbGVhclRpbWVvdXQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImdldFRpbWUiLCJmaW5pc2giLCJ0aW1lc3RhbXAiLCJhYm9ydF9tZXRob2QiLCJwYXVzZV9kdXJhdGlvbiIsInRvdGFsX2R1cmF0aW9uIiwiYWJvcnRlZCIsImNvbXBsZXRlIiwic3RlcCIsInNldFRpbWVvdXQiLCJiZWdpbiIsInRvRml4ZWQiLCJ0aW1lIiwiZGVsdGEiLCJmcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInBsYXkiLCJyZXN0YXJ0IiwiZGVidWciLCJwYXVzZSIsInRvZ2dsZSIsImJlZ3VuIiwicGF1c2VkIiwiZG9uZSIsInJlc3VtZSIsImNhbmNlbCIsImFib3J0IiwiX3JlcXVlc3RBbmltYXRpb25GcmFtZSIsIl9jYW5jZWxBbmltYXRpb25GcmFtZSIsIndpbmRvdyIsInZlbmRvcnMiLCJ2ZW5kb3IiLCJjYWxsYmFjayIsImN1cnIiLCJoYW5kbGUiLCJjaGFuZ2UiLCJlYXNlSW5RdWFkIiwiZWFzZU91dFF1YWQiLCJlYXNlSW5PdXRRdWFkIiwiZWFzZUluU2luZSIsImNvcyIsIlBJIiwiZWFzZU91dFNpbmUiLCJzaW4iLCJlYXNlSW5PdXRTaW5lIiwiZWFzZUluRXhwbyIsImVhc2VPdXRFeHBvIiwiZWFzZUluT3V0RXhwbyIsImVhc2VJbkNpcmMiLCJzcXJ0IiwiZWFzZU91dENpcmMiLCJlYXNlSW5PdXRDaXJjIiwiZWFzZUluQ3ViaWMiLCJlYXNlT3V0Q3ViaWMiLCJlYXNlSW5PdXRDdWJpYyIsImVhc2VJblF1YXJ0IiwiZWFzZU91dFF1YXJ0IiwiZWFzZUluT3V0UXVhcnQiLCJlYXNlSW5RdWludCIsImVhc2VPdXRRdWludCIsImVhc2VJbk91dFF1aW50IiwiZWFzZUluRWxhc3RpYyIsImFzaW4iLCJlYXNlT3V0RWxhc3RpYyIsImVhc2VJbk91dEVsYXN0aWMiLCJlYXNlSW5CYWNrIiwic3RhcnRfdGltZSIsInN0b3BfdGltZSIsIl9tcyIsIl9ub3ciLCJfaXNEYXRlIiwidXBkYXRlU3RhcnQiLCJfc3RhcnQiLCJzdG9wIiwiX3N0b3BfdGltZSIsIl9zdG9wIiwic3RhcnRlZCIsInN0b3BwZWQiLCJtcyIsInNlYyIsImRlY2ltYWxQbGFjZXMiLCJfcm91bmQiLCJlbGFwc2VkX21zIiwiREVGQVVMVF9NQVhfTElTVEVORVJTIiwiUFJPUFMiLCJFdmVudEVtaXR0ZXIiLCJtYXhfbGlzdGVuZXJzIiwiX21heF9saXN0ZW5lcnMiLCJfZXZlbnRzIiwic3RhdGljIiwidGhyb3dhYmxlIiwiX3R5cGUiLCJ3YXJuIiwibGlzdGVuZXIiLCJfbGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJwcm9wcyIsImhhc0xpc3RlbmVyIiwiZmluZEluZGV4IiwidiIsImVtaXQiLCJldmVudCIsIm9uIiwib25jZSIsImFkZExpc3RlbmVyIiwic3Vic2NyaWJlIiwicmVtb3ZlTGlzdGVuZXIiLCJoYW5kbGVyIiwiZmlyZWQiLCJuZXdMaXN0ZW5lciIsInJlbW92ZWQiLCJfbGlzdGVuZXJzIiwic3BsaWNlIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdF9yZW1vdmVfbGlzdGVuZXIiLCJFdmVudHMiLCJFeGNlcHRpb24iLCJfdGltZSIsInRleHQiLCJfZXJyb3IiLCJfZ2V0X3N0ciIsIl9nZXRfaW50IiwiX2dldF9jb2RlIiwiaXQiLCJpdGVyYXRvciIsIlRBU0tfU1RBVFVTRVMiLCJERUZBVUxUX0VWRU5UX0RFQk9VTkNFIiwiREVGQVVMVF9QUkVDSVNJT04iLCJfcG9zX251bSIsIl9kZWZhdWx0IiwiX2JsYW5rIiwicGFyc2VGbG9hdCIsIl9wb3NfaW50IiwicGxhY2VzIiwicm91bmQiLCJFUFNJTE9OIiwiX2pzb25fc3RyIiwic2VlbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJfIiwidGVzdCIsIl9nZXRfZXJyb3IiLCJyZWFzb24iLCJfZGVib3VuY2UiLCJ0aW1lciIsIm1heF93YWl0IiwiX2hhbmRsZXIiLCJUYXNrIiwiZXZlbnRfZGVib3VuY2UiLCJkZWNpbWFsX3ByZWNpc2lvbiIsImxhYmVsIiwibGlua2VkIiwicHJlY2lzaW9uIiwicHJvZ3Jlc3MiLCJ0b3RhbCIsInN0YXR1cyIsInN0YXJ0VGltZSIsInN0b3BUaW1lIiwiZWxhcHNlZFRpbWUiLCJpdGVtIiwiX2RvbmUiLCJfZW1pdHRlciIsIl9kZWJvdW5jZWRfdXBkYXRlIiwiY2hhbmdlcyIsImZhaWx1cmUiLCJjb21wbGV0ZVByb2dyZXNzIiwic2V0UHJvZ3Jlc3MiLCJfdmFsdWUiLCJfdG90YWwiLCJzZXRUb3RhbCIsInNldFZhbHVlIiwic2V0SXRlbSIsIl9wcmVjaXNpb24iLCJfZXZlbnRfZGVib3VuY2UiLCJfcm91bmRfcCIsInByb2ciLCJfb3B0aW9ucyIsIlRhc2tzIiwiX3Rhc2tzIiwiTWFwIiwiX3Vuc3Vic2NyaWJlIiwiYWxsX3Byb2dyZXNzIiwiZnVsbF9wcm9ncmVzcyIsImhhc19ydW5uaW5nIiwiaGFzX3N0YXJ0ZWQiLCJoYXNfaW5jb21wbGV0ZSIsInRhc2tfZW50cmllcyIsInRhc2siLCJ2YWx1ZXMiLCJ0YXNrcyIsImZyb21FbnRyaWVzIiwicnVubmluZyIsImhhcyIsImFkZCIsIl90YXNrIiwiY3JlYXRlIiwidW5zdWJzY3JpYmUiLCJyZW1vdmUiLCJkZWxldGUiLCJURVJNX0xPR19NRVRIT0QiLCJURVJNX0ZPUk1BVF9ESVNBQkxFRCIsIkZPUk1BVF9ESVNBQkxFRCIsIl9ib29sIiwiTE9HX01FVEhPRFMiLCJMT0dfTUVUSE9EIiwiRk9STUFUUyIsImJyaWdodCIsImRpbSIsInVuZGVyc2NvcmUiLCJibGluayIsInJldmVyc2UiLCJoaWRkZW4iLCJmZ19ibGFjayIsImZnX3JlZCIsImZnX2dyZWVuIiwiZmdfeWVsbG93IiwiZmdfYmx1ZSIsImZnX21hZ2VudGEiLCJmZ19jeWFuIiwiZmdfd2hpdGUiLCJmZ19ncmF5IiwiYmdfYmxhY2siLCJiZ19yZWQiLCJiZ19ncmVlbiIsImJnX3llbGxvdyIsImJnX2JsdWUiLCJiZ19tYWdlbnRhIiwiYmdfY3lhbiIsImJnX3doaXRlIiwiYmdfZ3JheSIsIlBSRURFRklORURfRk9STUFUUyIsImR1bXAiLCJpbmZvIiwic3VjY2VzcyIsImJnX2xvZyIsImJnX2RlYnVnIiwiYmdfZXJyb3IiLCJiZ193YXJuIiwiYmdfaW5mbyIsImJnX3N1Y2Nlc3MiLCJnZXRGb3JtYXRzIiwiZm9ybWF0cyIsIkZNIiwiUEYiLCJyZWR1Y2UiLCJfYWRkUEYiLCJrIiwiZm9ybWF0IiwiYXJncyIsIl9mb3JtYXRzIiwiX2Zvcm1hdCIsIlJlZ0V4cCIsIl9zdHJpbmciLCJmIiwidGhhdCIsImxvZ19tZXRob2QiLCJfbWV0aG9kIiwibWV0aG9kIiwiaXRlbXMiLCJjbGVhbiIsIl9jbGVhbiIsIl92YWwiLCJfZm9ybWF0c19saXN0IiwiX2VudHJpZXMiLCJfY2xvbmUiLCJfc3RyaW5nYWJsZSIsImVudHJpZXMiLCJ0bXBfZW50cmllcyIsImNlbGxNYXhMZW5ndGgiLCJkaXZpZGVyIiwiZGF0YV9pdGVtcyIsImRhdGFfdHlwZSIsInN0clZhbCIsImNvbG9yIiwiX2pzb25TdHJpbmdpZnkiLCJfc3RyRXNjYXBlIiwibW9kZSIsInRhYmxlX2l0ZW1zIiwibWFwX2tleXMiLCJtYXBfaXRlbXMiLCJyIiwiZGF0YV9pdGVtIiwibGlzdF9pdGVtcyIsImxpc3RfdHlwZSIsIm1hcF9pdGVtIiwiX3N0ciIsInRhYmxlX2l0ZW0iLCJrZXkiLCJ3aWR0aF9tYXAiLCJzdHJfaXRlbXMiLCJzdHJfaXRlbSIsInJvd3NfbGVuIiwibWF4X2xpbmVzIiwic3RyX2l0ZW1fbGluZXMiLCJ3aWR0aCIsImxpbmVzIiwibGluZSIsInN1YnN0cmluZyIsInBhZEVuZCIsIm1heF9zdHJfaXRlbV9saW5lcyIsInN0cl9tYXhfbGluZXMiLCJtYXhfbGluZXNfYXJyYXkiLCJsaW5lX3Jvd3MiLCJyb3dzIiwibGluZV9yb3ciLCJib3JkZXJfdG9wIiwiYm9yZGVyX21pZCIsImJvcmRlcl9ib3R0b20iLCJjbGVhciIsIkVYVF9NSU1FUyIsIl9taW1lIiwiX2ZhaWx1cmUiLCJwcm9wIiwibWF0Y2giLCJmaW5kIiwic3RhcnRzV2l0aCIsIk1pbWVUeXBlRXJyb3IiLCJfYmFzZW5hbWUiLCJkb3RzIiwiX3N0cmljdCIsImJhc2VuYW1lIiwiaWxsZWdhbCIsImludmFsaWQiLCJwb3AiLCJCYXNlbmFtZUVycm9yIiwiX2ZpbGVwYXRoIiwic2VwYXJhdG9yIiwic2VwIiwiZHJpdmUiLCJwYXRoIiwicGF0aF9wYXJ0cyIsIl9zcGxpdCIsInBhcnQiLCJkaXYiLCJ0b1VwcGVyQ2FzZSIsInRyaW1tZWRfcGFydHMiLCJub3JtX3BhcnRzIiwiU2V0Iiwib3V0Ym91bmQiLCJ0bXBfcGF0aCIsIm91dGJvdW5kX3BhdGgiLCJOb3JtUGF0aEVycm9yIiwiX2JhdGNoVmFsdWVzIiwiYmF0Y2hTaXplIiwiX2J1ZmZlciIsImNsb25lIiwibm9kZVR5cGUiLCJjbG9uZU5vZGUiLCJfaW5zdGFuY2VvZiIsIm8iLCJfdG9TdHJpbmciLCJjbG9uZVByb3RvdHlwZSIsInBhcmVudCIsImdldFByb3RvdHlwZU9mIiwiY2lyY3VsYXIiLCJfY2lyY3VsYXIiLCJkZXB0aCIsIl9kZXB0aCIsIl9wcm90b3R5cGUiLCJub25fZW51bWVyYWJsZSIsIl9ub25fZW51bWVyYWJsZSIsImFsbFBhcmVudHMiLCJhbGxDaGlsZHJlbiIsInVzZUJ1ZmZlciIsImNoaWxkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjYXRjaCIsIl9pc1JlZ0V4cCIsInNvdXJjZSIsInJlZ2V4IiwiZmxhZ3MiLCJnbG9iYWwiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwiX2dldFJlZ0V4cEZsYWdzIiwibGFzdEluZGV4Iiwia2V5Q2hpbGQiLCJ2YWxDaGlsZCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm9ialByb3BlcnR5IiwiUmVmZXJlbmNlRXJyb3IiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwic3ltYm9sIiwiZGVzY3JpcHRvciIsImFsbFByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwicHJvcGVydHlOYW1lIiwiX2NvbXBhcmUiLCJsZWZ0Q2hhaW4iLCJyaWdodENoYWluIiwiZGVlcE1hdGNoIiwiaXNQcm90b3R5cGVPZiIsInZhbF9hIiwidmFsX2IiLCJfY29tcGFyZVNoYWxsb3ciLCJzaGFsbG93TWF0Y2giLCJEYXRlTG9jYWxlcyIsIm1vbnRoTmFtZXMiLCJkYXlOYW1lcyIsIkFNIiwiUE0iLCJfZGF0ZSIsImRhdGUiLCJfZW1wdHkiLCJwYXJzZSIsIl9nZXRfZGVmYXVsdCIsIl90b2RheSIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiX21pZG5pZ2h0IiwiX3llc3RlcmRheSIsIl90b21vcnJvdyIsIl9tb250aFN0YXJ0IiwiX21vbnRoRW5kIiwiX21vbnRoRGF5cyIsIl9kYXRldGltZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJwYWRkZWQiLCJwYWRTdGFydCIsIl9wYXJzZUlzbyIsInN0cnVjdCIsImV4ZWMiLCJtaW5fb2Zmc2V0IiwiVVRDIiwiX2RlYm91Y2VkIiwibWF4V2FpdCIsImltbWVkaWF0ZSIsImltbWVkaWF0ZVRpbWVyIiwiY2FsbFRpbWVyIiwid2FpdFRpbWVyIiwibmV4dENhbGwiLCJleGVjdXRlIiwiaXNfaW1tZWRpYXRlIiwibmV4dCIsIndyYXBwZXIiLCJfbmV4dCIsIm5vX3dhaXQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX3NheUhlbGxvIiwiaGVsbG8iLCJzcGFjZSIsIl91bmRlZmluZWQiLCJfc3BhY2UiLCJwYXJlbnRzIiwicmVmcyIsIl9yZXBsYWNlciIsIl9wYXJlbnRzIiwib3RoZXIiLCJfanNvblBhcnNlIiwiX2pzb25Db3B5IiwiX251bWVyaWMiLCJib29sZWFucyIsImJsYW5rcyIsInByZWZpeCIsIk1JTl9TQUZFX0lOVEVHRVIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiX3Bvc051bSIsIl9pbnQiLCJfY29tbWFzIiwiemVyb3MiLCJfcmFuZCIsInJhbmRvbSIsIl9weDJyZW0iLCJiYXNlIiwidW5pdCIsIl9nZXRBbGxQcm9wZXJ0eURlc2NyaXB0b3JzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsIl9nZXRBbGxQcm9wZXJ0aWVzIiwic3RhdGljcyIsIl9fZ2V0X3Byb3BzIiwia2V5cyIsIl9fZ2V0X2tleXMiLCJleGNsdWRlZF9wcm9wcyIsIkZ1bmN0aW9uIiwiX19hZGRfcHJvcHMiLCJfaGFzUHJvcCIsIm93biIsIl9oYXNQcm9wcyIsIl9oYXNBbnlQcm9wcyIsIl9nZXRQcm9wIiwicHJvcGVydHkiLCJleGlzdHMiLCJ0ZXh0X21hdGNoIiwiX2lzQ2xhc3MiLCJvckNsYXNzIiwiX21pbk1heCIsIl9kb3RGbGF0Iiwib21pdCIsIl9hZGRFbnRyaWVzIiwiX3Bfa2V5IiwiZW50cnkiLCJfa2V5IiwiX2RvdEluZmxhdGUiLCJwYXRoX3ZhbHVlIiwia2V5c19pdGVtIiwia2V5c19idWZmZXIiLCJfbm9ybSIsIl92YWxpZERvdFBhdGgiLCJkb3RfcGF0aCIsIm9wZXJhdGlvbnMiLCJ2YWxpZCIsIl9pbnZhbGlkIiwic3RyaWN0IiwiX2RvdEdldCIsInNlYXJjaF9lbnRyaWVzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwibWF0Y2hlcyIsIl92YWx1ZU9mIiwiX2l0ZXJhYmxlIiwiX2FzeW5jIiwiYXN5bmNJdGVyYXRvciIsIl92YWx1ZXMiLCJvYmplY3QiLCJmbGF0dGVuIiwiaGFzX2VudHJpZXMiLCJmbGF0IiwiX2R1bXBWYWwiLCJtYXhTdHJMZW5ndGgiLCJfZ2V0X2ZpcnN0Iiwic2FtZV9rZXlzIiwicHJldl9rZXlzIiwia2V5c192YWwiLCJjb3VudCIsIl9wYXJzZSIsImFwcGVuZCIsIl9tYXhTdHIiLCJfc29ydFZhbHVlcyIsInNvcnQiLCJsb2NhbGVDb21wYXJlIiwiX2RpcmVjdGlvbiIsInJlc3VsdCIsIl90cmFucyIsInRlbXBsYXRlIiwicGF0dGVybiIsIm1pc3NpbmciLCJfdHJhbnNfZm9ybWF0IiwiX3RyYW5zX2dldCIsImRlZmF1bHRfdmFsIiwiX3Jlc29sdmUiLCJwcm9taXNlIiwiX25ldyIsInJlc29sdmVkIiwiX2FzeW5jQWxsIiwiZmluYWxseSIsIl9hc3luY1ZhbHVlcyIsImVhY2giLCJfYnJlYWsiLCJfc2xlZXAiLCJQZW5kaW5nQWJvcnRFcnJvciIsInBlbmRpbmciLCJQRU5ESU5HX0NBQ0hFIiwiX3BlbmRpbmciLCJrZWVwIiwiX3BlbmRpbmdfcmVzb2x2ZSIsIl9wZW5kaW5nX3JlamVjdCIsImN1cnJlbnQiLCJuZXh0X3Byb21pc2UiLCJhYm9ydEVycm9yIiwicGVuZGluZ19wcm9taXNlIiwiX3BlbmRpbmdBYm9ydCIsIl9xdWV1ZSIsImhlYWQiLCJ0YWlsIiwiaXNFbXB0eSIsImVucXVldWUiLCJkZXF1ZXVlIiwicGVlayIsIl94dWlkIiwiX3V1aWQiLCJfY3JlYXRlIiwidXVpZCIsInRvSVNPU3RyaW5nIiwiZmFpbGVkIiwiX3N0ck5vcm0iLCJub3JtYWxpemUiLCJfcmVnRXNjYXBlIiwiaCIsImVuY29kZVVSSUNvbXBvbmVudCIsIl9zcWxFc2NhcGUiLCJfdHJpbSIsImNoYXJzIiwicmwiLCJ0cmltX2NoYXJzIiwiZDEiLCJkMiIsInVuc2hpZnQiLCJfbHRyaW0iLCJfcnRyaW0iLCJfdG9UaXRsZUNhc2UiLCJrZWVwQ2FzZSIsIl90b1NlbnRlbmNlQ2FzZSIsImNoYXJBdCIsInJlc3QiLCJfdG9TbmFrZUNhc2UiLCJ0cmltVHJhaWxpbmciLCJfdG9TbHVnQ2FzZSIsIl90b1N0dWRseUNhc2UiLCJ3b3JkIiwiX3RvQ2FtZWxDYXNlIiwiX3RvTG93ZXJDYXNlIiwiX3RvVXBwZXJDYXNlIiwiX2hhc2hDb2RlIiwiaGFzaCIsIl9oYXNoQ29kZVN0ciIsIl9oYXNoNTMiLCJzZWVkIiwiaDEiLCJoMiIsImNoIiwiaW11bCIsIl9wYXJzZURhdGFVcmkiLCJtaW1lIiwiY2hhcnNldCIsIl9pc1VybCIsIm1hdGNoRGF0YVVSSSIsIl9pc0VtYWlsIiwiX3BhcnNlQ3N2IiwiZGVsaW1pdGVyIiwiYnIiLCJuX3NlcF9yZSIsInFfc2VwX3JlIiwiY19zZXBfcmUiLCJkZWxpbSIsImZpZWxkX3JlIiwicDEiLCJwMiIsInJvdyIsImNlbGwiLCJfdG9Dc3YiLCJfY2VsbCIsIml0ZXJhYmxlcyIsInZfcm93IiwiZGF0YV9yb3dzIiwiZGF0YV9yb3ciLCJkX3JvdyIsImNzdiIsInJlIiwiX2Vycm9yVGV4dCIsInJlc3BvbnNlIiwiYm9keSIsIl90ZXh0TWF4TGVuZ3RoIiwibWF4X2xlbiIsImFwcGVuZF9sZW4iLCJ0ZXh0X2xlbiIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iXSwic291cmNlUm9vdCI6IiJ9